# Emacs mode:  -*-Makefile-*-
#
# To build on Windows using the Microsoft Visual Studio command-line compiler:
#
# 1. You no longer need to edit "include/Makefile.build", it now
#    automatically picks between Makefile.module (for Unix via Gnu
#    make) and Makefile.win32 (for Window via nmake).
#
# 2. Update Update the 'tcl_64' and 'tcllib_64' variables below for
#    your system.  See also these settings in "include/Makefile.win32":
#    'HAVE_OPENSSL_EVP_H', 'openssl_64'.
#
# 3. Run appropriate Microsoft build setup script.  E.g. one of these:
#    "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
#    "%ProgramFiles%\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Debug /x64 /win7
#
# 4. nmake -f Makefile.win32
#

tcl_64 = C:\P\Tcl-64-9.0.3
tcl_32 = C:\P\Tcl-32

tcllib_64 = tcl90.lib tclstub.lib
tcllib_32 = tcl85.lib

!if "" == "$(TARGET_CPU)"
TARGET_CPU = $(VSCMD_ARG_TGT_ARCH)
!endif

!if "x86" == "$(TARGET_CPU)"
TCLPATH = $(tcl_32)
TCLLIB  = $(tcllib_32)
!elseif "x64" == "$(TARGET_CPU)"
TCLPATH = $(tcl_64)
TCLLIB  = $(tcllib_64)
!else
!message Warning: Unexpected TARGET_CPU:  $(TARGET_CPU)
TCLPATH = $(tcl_64)
TCLLIB  = $(tcllib_64)
!endif

# I should be able to implicitly use these environment variable mappings:
#   %ProgramFiles%      -> C:\Program Files
#   %ProgramFiles(x86)% -> C:\Program Files (x86)
# And indeed those work fine when building with /x64.  But with /x86,
# they mysteriously fail, even though I SEE those exact same values in
# /x86 build shell!  So I do NOT use them here: --atp@piskorski.com,
# 2014/10/12 14:25 EDT

#VC      = C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC
#MSDK    = C:\Program Files\Microsoft SDKs\Windows\v7.1
#VC      = C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC

smash_lib_include = 0
# For reference and to help debugging, these are the full LIB and
# INCLUDE environment variable settings I need when set from scratch,
# smashing over any values set by SetEnv.Cmd:
!if (1 == $(smash_lib_include))
!if "x86" == "$(TARGET_CPU)"
!message Smashing over LIB and INCLUDE, for x86 cpu.
LIB     = $(MSDK)\Lib;$(VC)\Lib
INCLUDE = $(MSDK)\Include;$(VC)\include
!else
!message Smashing over LIB and INCLUDE, for x64 cpu.
LIB     = $(MSDK)\Lib\X64;$(VC)\Lib\amd64
INCLUDE = $(MSDK)\Include;$(VC)\include
!endif
!endif

# If your call to vcvars64.bat (or SetEnv.Cmd) is working correctly,
# you should only need to append to LIB and INCLUDE like this:
!message Appending to LIB and INCLUDE.
LIB     = $(LIB);$(TCLPATH)\lib
INCLUDE = $(INCLUDE);$(TCLPATH)\include


# include/Makefile.win32 uses this DEBUG flag.  For now default it to
# 1 rather than 0 or unset:
!ifndef DEBUG
DEBUG=1
!endif

PWD = $(MAKEDIR)
TEST_CERTIFICATES = tests/testserver/certificates
PEM_FILE          = $(TEST_CERTIFICATES)/server.pem
PEM_PRIVATE       = $(TEST_CERTIFICATES)/myprivate.pem
PEM_PUBLIC        = $(TEST_CERTIFICATES)/mypublic.pem
SSLCONFIG         = $(TEST_CERTIFICATES)/openssl.cnf
EXTRA_TEST_REQ    = $(PEM_FILE)

# nmake command to exec for each module:
NMAKE = nmake /nologo TCLPATH="$(TCLPATH)" TCLLIB="$(TCLLIB)" LIB="$(LIB)" DEBUG=$(DEBUG) NSBUILD=1


# Note our use below of nmake's macro string substitution feature:
#   https://docs.microsoft.com/en-us/cpp/build/reference/macro-substitution?view=vs-2019
#   http://msdn.microsoft.com/en-us/library/bsd42ets%28v=vs.110%29.aspx
#
# Our use of $(core_targets) below expands into a separate target for
# each module, which is especially convenient when we only want to
# build one or two of them at a time (e.g., for debugging).  But nmake
# does not have anything like Gnu make's explicit ".PHONY" syntax, so
# we must make sure that each target name is NOT a valid file or
# directory.  Thus our use of _, I, or C prefixes with each module
# name.
#
# Independently of this makefile, to clean a single module you can
# simply cd into its subdirectory in the DOS/command shell and run
# "nmake clean".  That works fine.  Or using this makefile, you can
# run the single "clean" target to clean them all, or one or more
# individual clean targets like "Cnsthread Cnsd".
#
# --atp@piskorski.com, 2014/09/25 16:29 EDT

# For the core NaviServer modules, we use the same module/Makefile for
# both make and nmake.  Unfortunately, it looks like that won't work
# for add-on modules.  Their makefiles have more diversity, and even
# if they did NOT, there are still other stumbling blocks.  E.g.:
#
# Microsoft nmake supports an undocumented "include" command, but it
# apparently ONLY allows hard-coded paths, it does NOT allow using
# variables!  The documented "!include" command, on the other hand,
# uses variables in the way you'd expect.
#
# So for add-on modules, we will instead use separate
# module/Makefile.win32 files.
# --atp@piskorski.com, 2014/10/10 17:25 EDT

core_targets = _nsthread _nsd _nscgi _nscp _nsdb _nsdbtest _nssock _nslog _nsperm _nsssl _nsproxy
module_targets = _nsoracle

tgts_core_clean = $(core_targets:_=C)
tgts_modl_clean = $(module_targets:_=C)
tgts_core_inst  = $(core_targets:_=I)
tgts_modl_inst  = $(module_targets:_=I)

all: all-core
clean: clean-core
install: all-core all-mod _install

# Actually only nsd needs nsversion-win32.h, but I do not see a good
# way to make only that one target depend on it:

include/nsversion-win32.h:  _nsversion
all-core:  include/nsversion-win32.h  $(core_targets) _cert
all-mod:  $(module_targets)
clean-core: $(tgts_core_clean)
clean-mod:  $(tgts_modl_clean)

# Bizarrely, from within nmake changing directories with "pushd" or
# "popd" only takes effect for THAT ONE LINE, while using "cd" retains
# the new directory location across multiple nmake command lines!
# Why, I have no idea.  --atp@piskorski.com, 2014/10/11 05:54 EDT

$(core_targets):
	@if exist "$(@:_=)\Makefile.win32" ( \
	pushd $(@:_=) & $(NMAKE) -f Makefile.win32 & popd ) else ( \
	pushd $(@:_=) & $(NMAKE) & popd )
$(module_targets):
	@if not exist "..\$(@:_=)" (echo No such directory:  ..\$(@:_=)) else ( \
	pushd "..\$(@:_=)" & $(NMAKE) -f Makefile.win32 & popd )
$(tgts_core_clean):
	@if exist "$(@:C=)\Makefile.win32" ( \
	pushd $(@:C=) & $(NMAKE) -f Makefile.win32 clean & popd ) else ( \
	pushd $(@:C=) & $(NMAKE) clean & popd )
$(tgts_modl_clean):
	@if not exist "..\$(@:C=)" (echo No such directory:  ..\$(@:C=)) else ( \
	pushd "..\$(@:C=)" & $(NMAKE) -f Makefile.win32 clean & popd )

_nsversion:
	tclsh win32-util/configure.tcl
	@if not exist sample-config.tcl copy sample-config.tcl.in sample-config.tcl

_install:
!if "" == "$(INSTALLDIR)"
	tclsh win32-util/install-nsd.tcl -i 1
!else
	tclsh win32-util/install-nsd.tcl -i 1 -t $(INSTALLDIR)\ -c 0 -m nsoracle
!endif

_cert: $(PEM_FILE)
$(PEM_FILE): $(PEM_PRIVATE)
	openssl genrsa 2048 > host.key
	openssl req -new -config $(SSLCONFIG) -x509 -nodes -sha1 -days 365 -key host.key > host.cert
	copy host.cert+host.key server.pem
	del host.cert
    del host.key
	openssl dhparam 1024 >> server.pem
	move server.pem $(PEM_FILE)
	-openssl rehash $(TEST_CERTIFICATES)

$(PEM_PRIVATE):
	openssl genrsa -out $(PEM_PRIVATE) 512
	openssl rsa -in $(PEM_PRIVATE) -pubout > $(PEM_PUBLIC)

# Make sure all required dlls are available in the PATH (tcl*.dll, libtommath.dll, zlib.dll, libcrypto*.dll, libssl*.dll)
_path=$(PWD)\nsd;$(PWD)\nsthread;$(PWD)\nsdb;$(PWD)\nsproxy;$(TCLPATH)\bin;$(openssl_dir)\bin;C:\P\ps;C:\Windows\system32

_test:
	setlocal
	set PATH=$(_path)
	$(PWD)\nsd\nsd.exe -c -t $(PWD)/tests/test.nscfg $(PWD)/tests/all.tcl 1>> test-win-out-0.txt 2>&1
	endlocal

_test_one:
	setlocal
	set PATH=$(_path)
	$(PWD)\nsd\nsd.exe -c -t $(PWD)/tests/test.nscfg $(PWD)/tests/all.tcl -verbose sp -file ns_thread.test
	endlocal
