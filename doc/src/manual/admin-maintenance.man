[include version_include.man]
[manpage_begin admin-maintenance n [vset version]]
[moddesc {NaviServer Manual}]

[titledesc {NaviServer Maintenance Guide}]

[description]

This guide provides essential information for maintaining and securing
NaviServer.

[section {Maintenance Tasks}]

[para]
Regular maintenance is essential for ensuring continuous and reliable service.
Key tasks include:

[list_begin enum]
[enum] Backing up pages and associated files for each virtual server.
[enum] Archiving the access log to preserve historical data.
[enum] Backing up the server log, especially when verbose logging is enabled.
[enum] Backing up Tcl script directories.
[enum] Backing up the bin directory, particularly if custom loadable modules are used.
[list_end]

Detailed instructions for each maintenance task are provided in the following sections.


[section {Maintain the Directories}]

Regular backups of key NaviServer directories are vital to protect
against data loss due to filesystem failures.


[subsection {Back Up the Pages Directory}]

The pages directory is defined by the [emph PageDir] parameter which
defaults to the [const /pages] subdirectory under NaviServer home.

When multiple servers are running with the same server configuration,
the home directory can be determined dynamically based on the
[const Host:] header field
  [uri ./admin-config.html#subsection9 "mass virtual hosting"].
Keep this in mind, when performing backups.

[para ]Schedule regular backups using your preferred method (e.g., nightly
cron jobs).

[para] Notice, that NaviServer provides cron-like service by
using [uri ../../naviserver/files/ns_schedule.html "ns_schedule"] to
run jobs periodically or at certain times in the background. This can
ease maintenance since everything can be done in the same environment.


[subsection {Back Up the Access Log}]

The access log, per default located in [const logs/access.log], should be
backed up frequently.  Since NaviServer automatically deletes older
logs beyond the configured [emph MaxBackup] limit, manual backups are
required to retain a complete log history.

It is recommended to use timestamp based filenames for logfile rolling (using. e.g.. the
day in the filename; see
[uri ../../nslog/files/ns_accesslog.html "ns_accesslog"]). This
has the advantage, that the filenames are stable, such that on a
system-wide backup, the old logfilenames are stable and do not required
backups, whenever the log files is rolled.


[subsection {Back Up the Server Log}]

Regular backups are recommended to preserve this critical information,
since the file often reveals intrusion attempts, or provides
information, when a certain behavior started, etc.

Although the server log generally grows slowly on small sites, verbose
logging (e.g., during debugging) can cause rapid expansion, especially
when the tracffic is high.  For keeping storage requirement low, use
a timestamp based filenames for logfile rolling (see 
[uri ../../naviserver/files/ns_log.html ns_log]).


[subsection {Back Up the Tcl Scripts Directory}]

Back up the Tcl scripts directories, which include both virtual
server-specific scripts (typically in the [const /tcl] subdirectory) and
global scripts (in [const /modules/tcl]). Also, ensure that any external
files referenced by these scripts are included in your backup
strategy.


[subsection "Back Up the [const bin] Directory"]

The [const /bin] directory contains the NaviServer binary and any
dynamically loadable modules.  If you maintain custom modules, back up
both the binaries and their source code to avoid lengthy
recompilations after a failure.


[section {Directory Structure}]

The following table outlines the primary directories created during
NaviServer installation, the types of files they contain, and the
configuration parameters that affect them.

[list_begin definitions]
[def [const /certificates]]

  Default directory for storing certificates in PEM format.

[def [const /conf]]

  Directory containing NaviServer configuration files. Although this
  is the conventional location, configuration files can reside
  anywhere if the nsd process is provided with an absolute path.

[para] Typical Files:
[example_begin]
 .tcl files (e.g., nsd-config.tcl sample-config.tcl openacs-config.tcl}
[example_end]


[def [const /bin]]

  Directory containing the NaviServer binary, supplementary binaries,
  and dynamically loadable C modules.

[para] Typical files:
[example_begin]
 nsd, tclsh, critcl, nsproxy-helper, .so files, etc.
[example_end]

[def [const /include]]

  Directory containing header files needed for compiling additional C modules.

[para] Typical files:
[example_begin]
 .h files
[example_end]

[def [const /invalid-certificates]]

  Default directory for storing certificates that fail validation,
  populated by [cmd ns_http].
  
  For details, see 
  [uri ./admin-config.html#subsection13 "HTTPS Client Certificate Management"].


[def [const /lib]]

  Directory containing libraries used to build custom components and
  support extra installed modules.
  
[para] Typical files:
[example_begin]
 libnsd.so,
 libnsdb.so,
 libnsthread.so,
 libnsproxy.so,
 ...
[example_end]

[def [const /logs]]

 Default directory containing log files and the server PID file.

[para] Typical files:
[example_begin]
 access.log,
 server.log,
 nsd.pid
[example_end]


[def [const /modules]]

  Contains directories for modules that operate across servers (e.g.,
  "tcl", "nsperm").
   
 [def [const /modules/nsperm]]

  Directory containing user, group, and permission files used by the
  nsperm module for authentication and access control.  

[para] Typical files:
[example_begin]
 passwd, group, hosts.allow, hosts.deny, perms
[example_end]


[def [const /modules/tcl]]

  Default directory for the serverâ€™s private Tcl script library.
  
[para] Typical files:
[example_begin]
 .tcl files
[example_end]


[def [const /pages]]

  Default directory where pages and images are stored. Users
  typically organize content into subdirectories.
   
[para] Typical files:
[example_begin]
 .htm, .html, .shtml, .adp, .png, .css, ...
[example_end]


[def [const /tcl]]

 Default directory for the shared Tcl script library, including
 examples and module-specific scripts.  Top-level files in this
 directory are loaded during startup.

[para] Typical files:
[example_begin]
 .tcl files
[example_end]

[list_end]


[section {Security Guide}]

This section provides guidelines to secure your NaviServer
installation and protect sensitive data from unauthorized
access. Follow these recommendations to minimize vulnerabilities and
safeguard your system.

[subsection {General Passwords}]

 The default management user is [const nsadmin] with a predefined
 password. NaviServer does not include a built-in, advanced password
 management system. In production, it is common to integrate
 NaviServer with external systems (e.g., PAM, Azure, OpenACS) for
 robust password management.

[para]

 Alternatively, the [term nsperm] module provides a basic password
 management solution suitable for small to medium deployments. If
 nsperm is enabled without customization, it uses a default password
 and warns you at startup to change the [const nsadmin] password.

[para]

 You can change the default password using the Tcl command
 [cmd ns_permpasswd] or by editing the [const /modules/nsperm/passwd] file
 directly. For example, the default entry is:
 
[example_begin]
 nsadmin:CUdnvgBYocLSI:::::
[example_end]

[para]
 Replace the password hash (e.g., [const CUdnvgBYocLSI]) with a new hash
 generated using [cmd ns_crypt]:
 
[example_begin]
 nsd -c
 % ns_crypt MyNewPassword xx
 xxhR1Y2vt4OOY
[example_end]

 Alternatively, generate the hash using a command-line tool such as
 Perl:

[example_begin]
 $ perl -le 'print crypt("MyNewPassword","xx");'
 xxhR1Y2vt4OOY
[example_end]

For more details, see [uri ../../nsperm/files/nsperm.html#section4 "Defining Users"].


[subsection {Advanced Password Hashes}]

 Traditional Unix systems use the "crypt" algorithm to encrypt
 passwords using a salt. However, with the increasing power of GPUs,
 these hashes are vulnerable to cracking. Therefore, NaviServer
 supports stronger password hash algorithms such as Argon2, PBKDF2
 (SCRAM), and Scrypt. For more information, refer to
 [uri ../../naviserver/files/ns_crypto.html "ns_crypto"]. These
 advanced hashes are, for example, employed in OpenACS for local
 accounts that require enhanced security.


[subsection {Permission Settings}]

 Effective permission management is critical for securing your
 server. Authentication is only the first step; comprehensive
 permission settings ensure that users have appropriate access
 rights. Systems like OpenACS employ dynamic, role-based permission
 management for files and directories. If you use the [term nsperm]
 module, you can implement file-level security in ADP pages and set
 appropriate permission records as follows:


[list_begin enum]
[enum] Maintain identical permission records for both GET and POST requests.
[enum] Remove permission records for network publishing operations (PUT, DELETE, MKDIR, BROWSE) for all users except nsadmin.
[enum] Note that a permission record for a directory typically applies recursively to all its subdirectories.
[list_end]

 Define permission entries in the [const /modules/nsperm/perms] file;
 the default file includes comments explaining the format.

[para]

 For more details on setting permissions via the nsperm module, see
 the [uri ../../nsperm/files/nsperm.html#section6 "Permissions"]
 section.



[subsection {Security Recommendations}]

To further enhance security, consider the following recommendations:

[list_begin itemized]
[item] Keep NaviServer up to date - use the latest released version.

[item] Consider running NaviServer containerized or within a chroot
       environment.

[item] For HTTP client requests ([term ns_http], [term ns_connchan]),
       do not disable peer certificate validation; ensure that the
       trusted root certificates (e.g., [term CAfile]
       [const ca-bundle.crt]) are current.

[item] Regularly review your system log for entries especially with severity
       [const Security] and any unusual activity.

[item] Enable logging for HTTP client and SMTP requests (via the
       [term nssmtpd] module) when these services are in use.

[item] When using the [term nsperm] module, ensure that a secure
       password is set.

[item] When using the [term nscp] module, restrict access to the
       control port to localhost only (see
       [uri ../../nscp/files/nscp.html "NaviServer Control Port Guide"]).

[item] When using the [term nsstats] module, particularly with
       OpenACS, restrict access to secured administration paths or configure
       nsperm accordingly.

[item] Limit the installed modules and packages to those essential for
       your NaviServer deployment.

[item] Monitor resource usage (requests, threads, memory, locks, etc.)
       using the [term nsstats] module or external tools (e.g., Munin)
       to detect bottlenecks and ensure availability.

[item] For high security web sites, do no reveal the server
       implementation and the version information. You might
       deactivate this information per server in the
       configuration file:

[example_begin]
 ns_section ns/server/$server {
   ...
   #
   # Configuration of HTTP responses
   #
   ns_param noticedetail false		  ;# include server signature in ns_returnnotice commands (errors, redirects, ...)
   ns_param noticeadp    returnnotice.adp ;# ADP file for ns_returnnotice commands (errors, redirects, ...)
   ns_param stealthmode  true             ;# omit "Server:" header field in responses
 }
[example_end]

[item] Scan you site regularly with
       [uri https://owasp.org/www-community/Vulnerability_Scanning_Tools "Vulnerability Scanning Tools"].

[list_end]


[subsection {Setup chroot Environment}]

In case you are deciding to stetup a chroot jail, this section
provides basic instructions for setting up NaviServer in a
chroot environment (sometimes called a chroot jail).

[para]

 Running NaviServer in a chroot environment confines the server to a
 specified directory, making all absolute file paths relative to the
 new root. Although chroot does not secure file content, it
 effectively limits access to sensitive files (e.g., passwords,
 configuration files).

[para]

 Because a chroot jail must be self-contained, you need to copy all
 necessary programs, device files, and libraries into the new root
 directory. Example:

[example_begin]
 mkdir $root/dev $root/tmp $root/etc
 chmod 1777 $root/tmp
 $root/dev; /dev/MAKEDEV generic usema
 cp /etc/passwd /etc/resolve.conf $root/etc
[example_end]

 For Debian/Ubuntu platforms, you can use
 [uri https://help.ubuntu.com/community/DebootstrapChroot debootstrap]
 package for setting up the chroot environment.

[para]

 Once the chroot environment is created, you can run NaviServer with
 the [option -r] option:

[example_begin]
 nsd -t nsd.tcl -r $root
[example_end]


[subsection {Tcl Commands and Library}]

 Restrict access to Tcl commands and libraries to minimize potential
 abuse. Although NaviServer runs as a non-privileged user, a
 compromised account might still execute dangerous Tcl
 commands. Consider disabling the following if they are not required
 by your application:

[list_begin itemized]

[item] File system related functions, such as open, read, and puts
[item] The NaviServer ns_sock* Tcl functions
[item] The Tcl socket routines
[item] The exec command
[item] The file command, or at least the delete and rename features
[item] The exit command
[item] Database access (e.g. via [cmd nsdb]).
[list_end]

 In Tcl, you can completely disable (delete) unsafe commands to
 prevent unauthorized execution. But deleting is certainly only
 an option, when these commands are not used by your application.

[see_also admin-install ns_server commandlist]

[keywords nsd nscp nsdb nsperm container chroot security certificate password]

[manpage_end]

