[include version_include.man]
[manpage_begin {admin-config} n [vset version]]
[moddesc {NaviServer Manual}]

[titledesc {NaviServer Configuration Guide}]

[description]

When NaviServer is started, typically a configuration file is provided
containing certain settings for the server. The configuration file
includes network configuration options, log file information, loading
of modules and database drivers and the like. Actually, the
configuration file can contain the definition of multiple servers,
running concurrently or depending on command line arguments also
separately (see [term admin-maintenance]).


[para] The NaviServer configuration file consists of multiple sections
containing global configuration of the instance and sections for each
server and module. The configuration file is actually a Tcl script,
such that at user can set variables, defined procs to avoid repeated
patterns and the like. Tcl variables are typically used to certain
parameters at the beginning of the file, which might be often
changed. This eases the maintenance.

[para] The following sample configuration files might be used as a
starting point for site specific configurations:

[list_begin itemized]
[item] [uri \
	https://raw.githubusercontent.com/naviserver-project/naviserver/main/simple-config.tcl \
	simple-config.tcl]
[item] [uri \
	https://raw.githubusercontent.com/naviserver-project/naviserver/main/nsd-config.tcl \
	nsd-config.tcl]
[item] [uri \
	https://raw.githubusercontent.com/naviserver-project/naviserver/main/openacs-config.tcl \
	openacs-config.tcl]
[list_end]

Several configuration hints and details can be found also in other
places in the manual, such as e.g. in [term admin-tuning] or for
module specific parameters (which might not be necessary in every
installation). Furthermore, the configuration mechanism of NaviServer
is extensible, therefore, modules and applications can as well use the
configuration file with its abstraction to define application specific
parameters. So, a listing of the parameters can never complete. In
this page, we primarily define introductory examples for typical usage
scenarios.

[para]
The main sections of a configuration file are:

[list_begin itemized]

[item] Global configuration values
   [list_begin itemized]
   [item] general parameters (starting with "ns/parameters")
   [item] thread parameters (starting with "ns/threads")
   [item] mimetypes (starting with "ns/mimetypes")
   [item] database drivers (starting with "ns/db")
   [item] global modules (starting with "ns/modules")
   [item] servers (starting with "ns/servers")      
   [list_end]
[para] Examples for global parameters are in the mentioned
sample configuration files and also e.g. in [term tcl-libraries]
and [term admin-tuning].

[item] Server specific parameters (starting with "ns/server/$server")

[item] Module specific parameters (like [term nssock], [term nsssl],
[term nscp], [term nslog], [term nscgi] or [term nsperm].

[list_end]


[section {Server Network Configuration}]

In general, when modifying configuration files, it is always a good
idea to check whether a configuration file is syntactically correct
before starting the server. This can reduce the downtime of a
production server in case of typos. A configuration file named
"nsd-config.tcl" can be checked with the command line option [term -T]
of NaviServer.

[example_begin]
 /usr/local/ns/bin/nsd -t nsd-config.tcl -T
[example_end]

The global parameters contain the basic setup information,
where for example the root of the root of nsd is, where the
server log is to be written, or whether the server runs behind
a proxy server or not.

[example_begin]
 ns_section ns/parameters {
   ns_param home             /var/www/myserver/
   ns_param tcllibrary       tcl
   ns_param serverlog        error.log
   # ...
   ns_param reverseproxymode true
 }
[example_end]

When reverse proxy mode is turned on, the server assumes it is running
behind a reverse proxy server. In this case, commands referring to the
client IP address will return on default the value as provided by the
reverse proxy server (i.e. provided via the x-forwarded-for header
field). This will affect the results of [cmd "ns_conn peeraddr"] and
various introspection commands.

[para] Below, we address some general design considerations when
tailoring your one configuration files.  Check for simple or real-live
setups of larger installations by the provided sample configuration
files.

[para]
One of the core components of the configuration file are the network
drivers: what protocols should be used, on which addresses/ports
should be used, or how to set up virtual servers. The most important
network drivers of NaviServer are [term nssock] (for HTTP connections)
and [term nsssl] (for HTTPS connections).

[para] Several additional network drivers are available via
extra modules, such as e.g. [term nsudp], [term nssmtpd]
(for a full list of modules, see the [uri \
	https://github.com/orgs/naviserver-project/repositories \
	"module repository"]).


[subsection {Single Server, single address, single port}]

In the simplest case, one defines in a configuration file a single
server [emph s1] with a single network driver [emph nssock] used for
plain HTTP connections. In the example below, the server is listening
on port 8000.

[example_begin]
 ns_section ns/servers {
   ns_param s1 "Server Instance 1"
 }
 
 ns_section ns/server/s1/modules {
   ns_param http nssock.so
 }
 
 ns_section ns/server/s1/module/http {
   ns_param address 0.0.0.0
   ns_param port    8000
 }
[example_end]

In this example, the module [emph nssock] is loaded for the
server "s1" under the name "http". We show, in
later examples, how to load a network driver globally, such that one
network driver can be used for multiple servers.

[subsection {Multiple alternative servers in one configuration file}]

It is as well possible to define multiple servers in the same
configuration file (here [emph s1] and [emph s2]). These servers
use the same driver [emph nsock] but with different ports.
In this case, it is sufficient to load the driver once.

[example_begin]
 ns_section ns/servers {
   ns_param s1     "Server Instance 1"
   ns_param s2     "Server Instance 1"
 }
 
 #
 # Server s1
 #
 ns_section ns/server/s1/modules {
   ns_param http nssock.so
 }
 
 ns_section ns/server/s1/module/http {
   ns_param address  0.0.0.0
   ns_param port     8000
 }
 
 #
 # Server s2
 #
 ns_section ns/server/s2/modules {
   ns_param http  nssock.so
 }
 
 ns_section ns/server/s2/module/http {
   ns_param address  0.0.0.0
   ns_param port     8001
 }
[example_end]

When the configuration file above is named e.g. two-server-config.tcl,
the two servers can be started with a command line like:

[example_begin]
 /usr/local/ns/bin/nsd -u nsadmin -t two-server-config.tcl -f
[example_end]

When it is the goal to start only one of these servers, one can use
e.g. the following command:

[example_begin]
/usr/local/ns/bin/nsd -u nsadmin -t two-server-config.tcl -f -server s2
[example_end]

[subsection {Single server listening on multiple IP addresses}]

Often, a server has the requirement to listen on multiple addresses,
such as on one (or many) IPv4 and one (or many) IPv6 addresses.
This can be addressed by simply providing the list of values as
a parameter value.

[example_begin]
 ns_section ns/servers {
   ns_param s1 "Server Instance 1"
 }
 
 ns_section ns/server/s1/modules {
   ns_param http nssock.so
 }
 
 ns_section ns/server/s1/module/http {
   ns_param address "137.208.116.31 2001:628:404:74::31"
   ns_param port    8000
 }
[example_end]

[subsection {Single server listening on multiple ports}]

Similarly, we can define a single server, listening on multiple
ports. In this case, one can load multiple instances of the driver,
where each of the driver listens on a different port.

[example_begin]
 #
 # Server s1, using listening on two ports
 #
 ns_section ns/server/s1/modules {
   ns_param http nssock.so
 }
 
 ns_section ns/server/s1/module/http {
   ns_param address   0.0.0.0
   ns_param port      "8000 8001"
 }
[example_end]

[para] When multiple IP addresses and multiple ports are specified, the
server will be listening for every specified address on every
specified port. In the following example, it will listen on four
different combinations of addresses and ports.

[example_begin]
 ns_section ns/server/s1/module/http {
   ns_param address "137.208.116.31 2001:628:404:74::31"
   ns_param port    "8000 8001"
 }
[example_end]

[subsection {Single server registering multiple drivers}]

In the last two examples, a single server is listening on different
ports and or IP addresses, but the configuration of the driver was
otherwise identical. In case, different driver parameters are needed,
it is possible to load the same driver multiple times for the same
server with different driver names.

In the following example, we name the different instances of the
network driver [emph http1] and [emph http1].

[example_begin]
 #
 # Server s1, using two drivers for listening on two ports on two
 # different addresses.
 #
 ns_section ns/server/s1/modules {
   ns_param http1  nssock.so
   ns_param http2  nssock.so
 }
 
 ns_section ns/server/s1/module/http1 {
   ns_param address   0.0.0.0
   ns_param port      8000
 }
 
 ns_section ns/server/s1/module/http2 {
   ns_param address   127.0.0.1
   ns_param port      8001
 }
[example_end]

It would be as well possible to register multiple addresses for every
network driver instance (here "http1" and "http2"). In general, by
loading a network driver multiple times, all the of parameters of the
driver modules (here [term nssock]) can be modified per driver
instance.


[subsection {Virtual servers}]

By using virtual servers, multiple different server configurations can
be used while using only a single IP address/port combination. The
main different between a virtual server and the case of defining
multiple alternative servers above is that the servers are available
concurrently. The server determines by the "Host:" header field
provided by the client to which server the request should be
routed. Using such virtual servers is a common technique, where
e.g. for the same IP address, multiple DNS names are
registered. According to HTTP/1.1, clients have to send the hostname
in the host header field to the server, such that the server can
behave differently depending on the contents of this field.

[para] NaviServer can define multiple virtual servers, where each of
the servers has a separate setup (e.g., different number of threads defined,
different page directories), separate blueprints (e.g., loading
of different modules), uses different network drivers, etc. (see
Figure 1).

[para][image blueprint3 "NaviServer Blueprint"]
[para]Figure 1: NaviServer Blueprint (per server)

[para] When NaviServer is started, it reads first the configuration
file, which contains the definition of all servers, and then, it
creates and configures the virtual servers based on this
information. This is also the reason, why certain (server-specific)
commands cannot be contained (and executed) in the configuration file
(e.g., registering URL handlers, callbacks, etc.), but can be loaded
from the module files (see also [uri tcl-libraries.html]).
Additionally, it is possible to specify server specific commands
in the section [const ns/server/SERVERNAME/tcl] with the parameter
[const initcmds] (see also [uri tcl-libraries.html]).

[para] Note that it is also possible to define virtual servers with a
single NaviServer server definition, but this will be covered later.

[para] In the following example, we define two separate servers "s1"
and "s2", which should act as virtual web servers. This means, we want
to define one network driver, which listens on a single port, but
which should direct requests to one of the two potentially differently
configured servers based on the content of the [term host] header
field.

[para] Assume for the IP address of the server the DNS names
[term foo.com], [term bar.com] and [term baz.com] are registered. We define
server "s1" and "s2" such that "s1" should receive requests from
[term foo.com], and "s2" should receive requests from [term bar.com] and
[term baz.com]. Servers "s1" and "s2" have different [term pagedir]
definitions.

[para] For defining virtual servers, the network driver has to be
loaded globally (i.e., as module [const ns/module/http]).  For
requests with missing/invalid host header fields, we have to define a
[term defaultserver] to handle such requests in the global definition.

In the section [const ns/module/http/servers] we define the mapping
between the hostnames and the defined servers.

[example_begin]
 #
 # Define two servers s1 and d2 as virtual servers
 #
 ns_section ns/servers {
   ns_param s1  "Virtual Server s1"
   ns_param s2  "Virtual Server s2 "
 }
 ns_section ns/server/s1/fastpath {
   ns_param pagedir /var/www/s1
 }
 ns_section ns/server/s2/fastpath {
   ns_param pagedir /var/www/s2
 }
 
 #
 # Define a global nssock driver named "http",
 # directing requests to the virtual servers
 # based on the "Host:" header field.
 #
 # It is necessary to define a "defaultserver"
 # for requests without a "Host:" header field.
 #
 ns_section ns/modules {
   ns_param http nssock.so
 }
 ns_section ns/module/http {
   ns_param port          8000
   ns_param defaultserver s1
 }
 
 #
 # Define the mapping between the DNS names and the servers.
 #
 ns_section ns/module/http/servers {
   #
   # Domain names for s1
   #
   ns_param s1 foo.com

   #
   # Domain names for s2
   #
   ns_param s2 bar.com
   ns_param s2 baz.com
 }
[example_end]

Note that one can define multiple DNS names also for a single
server. With the definition above, "s1" serves [term foo.com] and
"s2" serves [term bar.com] and [term baz.com]. Since "s1" is the
default server, requests with unregistered hostnames will also be
directed to it.


[subsection {Virtual servers with HTTPS}]

In general, the logic of the definition of servers and network drivers
is the same for HTTP (driver [term nssock]) and
HTTPS (driver [term nsssl]), except that the latter has some
additional configuration parameters, such as
e.g. the certificate, or a special configuration of the ciphers,
etc.

[para] In order to define virtual servers with HTTPS, one can
essentially use the definition of the previous section, and load as
well the [term nsssl] driver globally with the name "https",
and configure it accordingly.

[example_begin]
 #
 # Define a global nsssl driver named https
 #
 ns_section ns/modules {
   ns_param https nsssl.so
 }
 
 ns_section ns/module/https {
   ns_param port          8433
   ns_param defaultserver s1
   ns_param certificate   /usr/local/ns/modules/https/server.pem
 }
 
 ns_section ns/module/https/servers {
   ns_param s1 foo.com
   ns_param s2 bar.com
   ns_param s2 baz.com
 } 
[example_end]

However, this case requires that all accepted hostnames are listed in
the certificate. Such certificates are called multi-domain SAN
certificates.

[para] However, there might be cases, where a server listening on a
single address has to provide different certificates for
e.g. "foo.com" and "bar.com". For virtual hosting, this is a
chicken-egg problem: the right certificate is needed at the time the
connection is opened, but  the virtual server can be only detected
while reading the request header.

[para]
This is a well-known problem, for which the SNI TLS extension was invented
(a hostname that can be used for identifying the certificate is passed
during the TLS handshake as well).

[subsection {Virtual servers with HTTPS and SNI}]

In order to configure SNI (Server Name Indication) for HTTPS, one can
simply add additional certificates for the server needed.  In the
following example the default certificate is defined on the level of
the global driver ([const server.pem]), whereas the certificate for the
server "foo.com" (which will be served by "s1") is defined for the
server "s1" separately ([const foo.com.pem]).

[example_begin]
 #
 # Define a global nsssl driver named "https"
 #
 ns_section ns/modules {
   ns_param https nsssl.so
 }
 ns_section ns/module/https {
   ns_param port          8433
   ns_param defaultserver s1
   ns_param certificate   /usr/local/ns/modules/https/server.pem
 }
 ns_section ns/module/https/servers {
   ns_param s1 foo.com
   ns_param s2 bar.com
   ns_param s2 baz.com
 }
 
 #
 # Define a server-specific certificate to enable SNI.
 # Furthermore, activate for server "s1" also OCSP stapling.
 # 
 ns_section ns/server/s1/module/https {
   ns_param certificate   /usr/local/ns/modules/https/foo.com.pem
   ns_param OCSPstapling  on
 }
[example_end]

OCSP (abbreviation of Online Certificate Status Protocol, RFC 2560 and
RFC 6066) is a protocol that checks the validity status of a
certificate. The term "OCSP stapling" refers to the use of
digitally-signed time-stamped OCSP responses in the web server for
performance reasons. In the example above, OCSP stapling is defined
for server "s1".


[subsection {Single virtual server with mass virtual hosting (HTTP)}]

The virtual servers defined in the last sections have the disadvantage
that these require to know the server upfront, to include the server
definition in the configuration file. Therefore, adding another
virtual server requires a restart which is quick, but still, will
interrupt services. In case, the virtual hosts are very similar, it
is possible to define a single virtual server hosting multiple
domains, serving e.g. from different page directories.

[para] The following example defines server "s1" serving only for
HTTP connections over port 8000. The new part is the registration of a
callback via [cmd ns_serverrootproc], which determines the root
directory for serving pages based on the "host" header field. The
definition assumes a directory structure like the following, where
"foo.com" has, e.g., a different [const index.html] file.

[example_begin]
 /var/www/
 ├── default
 │   └── index.html
 ├── foo.com
 │   └── index.html
 ...
[example_end]

When the content of the host header field is found in the filesystem
under [const /var/www], it is used as the pageroot for this request.

[example_begin]
 #
 # Define server "s1"
 #  - listening on all IP addresses,
 #  - port 8000,
 #  - serve pages from /var/www/
 #
 ns_section ns/servers {
   ns_param s1        "Sample Server"
 }
 ns_section ns/server/s1/modules {
   ns_param http      nssock.so
 }
 ns_section ns/server/s1/module/http {
   ns_param address   0.0.0.0
   ns_param port      8000
 }
 ns_section ns/server/s1/fastpath {
   ns_param pagedir   ""
   ns_param serverdir /var/www
 }
 
 ns_section ns/server/s1/tcl {
   ns_param initcmds {
     #
     # Register callback for accessing the root directory:
     #
     ns_serverrootproc {
       set rootDir [lb]ns_server serverdir[rb]
       set dir default
       if {[lb]ns_conn isconnected[rb]} {
         set host [lb]ns_conn host ""[rb]
         if {$host ne ""} {
           #
           # A "host" header field was provided in the request,
           # build the name of the root folder.
           #
           if {[lb]::file isdirectory $rootDir/$host[rb]} {
             #
             # The folder exists in the filesystem, accept it.
             #
             set dir $host
           } else {
             ns_log debug "... $rootDir/$host does not exist, fallback to $dir"
           }
         }
       }
       set rootDir $rootDir/$dir
       ns_log debug "... setting rootdir '$rootDir'"
       return $rootDir
     }
   }
 }
[example_end]

[para] With this approach additional domains can be added at runtime
of NaviServer by adding new directories for them.

[subsection {Single virtual server with mass virtual hosting using
HTTPS and SNI}]

While the previous section works for mass virtual hosting with plain
HTTP, the usage of HTTPS requires certificates, where multi-domain SAN
certificates can't be used, since mass hosting is supposed to work
without server restart. One cannot anticipate the domain names, which
are added.

[para] Starting with NaviServer 5, it is possible to specify a
directory containing individual certificates for virtual hosts with
the parameter [term vhostcertificates] in the [term nsssl]
module definition. When NaviServer receives a request with an SNI hostname, it
will search in this directory at runtime for a certificate file with
the name based on the SNI hostname, where ".pem" was added

[example_begin]
 set serverroot /var/www
 set address 0.0.0.0
 set httpsport 443
 
 ns_section ns/server/s1/module/https {
   ns_param address            $address
   ns_param port               $httpsport
   ns_param certificate        $serverroot/default.pem
   ns_param vhostcertificates  $serverroot
 }
[example_end]

Note that in this setup only a single server configuration is needed
(in the example above, the server "s1"). Together with the definition
of the [cmd ns_serverrootproc], it will provide mass virtual hosting over
HTTPS. Below is a minimal setup showing the directory structure for
serving [const dotlrn.net] via this mechanism. Note the certificates
[const dotlrn.net.pem], [const example.com.pem], and [const default.pem]
at the top level directory and their respective subdirectories from
where the websites are served. Any request with a different host than
[const example.com] or [const dotlrn.net] will be
served from the [const default] directory with the [const default.pem]
certificate.


[example_begin]
 /var/www/
 ├── default
 │   └── index.html
 ├── example.com.pem
 ├── example.com
 │   └── index.html
 ├── dotlrn.net.pem
 ├── dotlrn.net
 │   ├── index.html
 │   └── test
 │       └── file
 └── default.pem
[example_end]

[subsection {Redirecting from HTTP to HTTPS}]

[para] It is a common requirement to redirect incoming traffic from
HTTP to HTTPS. When a user has connected once via HTTPS, it is
recommended to use HSTS ([uri \
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/strict-transport-security \
        "HTTP strict-transport-security"])
to cause the browser to stay on the secure connection. This is
recommended to avoid certain man-in-the-middle attacks.

[para] One simple approach to do this is to define a server
configuration listening on the HTTP port that redirects requests to
the HTTPS port. In the following example, this server configuration is
called "redirector". It accepts requests for HTTP on port 80, and
redirects all [const GET] requests to the same server to HTTPS (port
443).  This approach can be used for all described virtual host
configurations.

[example_begin]
 #
 # Simple redirecting server
 #
 ns_section ns/servers {
   ns_param    redirector      "Redirecting Server"
 }
 ns_section ns/server/redirector/modules {
   ns_param    http            nssock.so
 }
 ns_section ns/server/redirector/module/http {
   ns_param    address         0.0.0.0
   ns_param    port            80
 }

 ns_section ns/server/redirector/tcl {
   ns_param initcmds {
     #
     # Register an HTTP redirect for every GET request.
     #
     ns_register_proc GET /* {
       set host [lb]ns_conn host localhost[rb]
       ns_returnmoved https://$host:443[lb]ns_conn target[rb]
     }
   }
 }
[example_end]

[para] For certain sites, it is desired that HTTP request to some
paths should be excluded from the HTTPS redirection.
E.g., Let's Encrypt requires requests over plain HTTP to the directory
[const /.well-known] for certificate management requests (see
[uri https://datatracker.ietf.org/doc/html/rfc8615 "RFC 8615"] and
[uri https://letsencrypt.org/docs/challenge-types/]).


[para] In order to exclude this directory from the general redirection
register the [const /.well-known] target via [cmd ns_register_fastpath]:

[example_begin]
 ns_section ns/server/redirector/tcl {
   ns_param initcmds {
     #
     # Register an HTTP redirect for every GET request.
     #
     ns_register_proc GET /* {
       set host [lb]ns_conn host localhost[rb]
       ns_returnmoved https://$host:443[lb]ns_conn target[rb]
     }
     #
     # Let requests for /.well-known get through. Remember to
     # define page root, logging etc. for this server configuration.
     #
     ns_register_fastpath GET /.well-known
   }
 }
[example_end]

[subsection {Adding extra header fields}]

For security reasons, it is a common requirement to provide additional
header fields to the responses of a server. For scripted pages, such
additional header fields can be added depending on the needs of these
pages (e.g., by providing page specific CSP policies). However, there
are as well requirements for adding response header fields for all
requests. The following response header fields are often recommended:

[example_begin]
 x-frame-options            "SAMEORIGIN"
 x-content-type-options     "nosniff"
 x-xss-protection           "1; mode=block"
 referrer-policy            "strict-origin"
[example_end]

or for HTTPS requests

[example_begin]
  strict-transport-security "max-age=31536000; includeSubDomains"
[example_end]

or, e.g., CSP rules on static pages to address the security threads of
SVG files.

[para] In the NaviServer configuration file, one can specify extra
response header files for drivers and/or for servers, as the following
example shows. The specified header files are merged together. In
case, the same header field is provided at the level of the driver and
the server, the more specific (i.e., the server-specific) value is
used.

[example_begin]
 ns_section ns/servers {
   ns_param s1  "Server s1"
 }
 ns_section ns/modules {
   ns_param http  nssock.so
   ns_param https nsssl.so
 }
 ns_section ns/module/http {
   ns_param address localhost
   ns_param port    8081
   #
   # Driver-specific extra response header fields for HTTP requests
   #
   ns_param extraheaders {
     X-driver-extra http
     X-extra driver-http
   }
 }
 ns_section ns/module/https {
   ns_param address localhost
   ns_param port    8441
   ns_param certificate  /var/www/default.pem
   #
   # Driver-specific extra response header fields for HTTPS requests
   #
   ns_param extraheaders {
     X-driver-extra https
     X-extra driver-https
   }
 }
 ns_section ns/server/s1/fastpath {ns_param pagedir /var/www/s1}
 ns_section ns/server/s1/adp      {ns_param map "/*.adp"}
 
 #
 # Server-specific extra response header fields for all requests to
 # this server.
 #
 ns_section ns/server/s1 {
   ns_param extraheaders {
     X-server-extra s1
     X-extra server-s1
   }
 }
[example_end]

When the configuration above is used, all requests via HTTPS
will be served with the following extra response header fields.

[example_begin]
  X-driver-extra https
  X-server-extra s1
  X-extra        server-s1
[example_end]

[para]


[para] More to come here...

[section {Basic Templating Configuration}]

In certain situations, NaviServer returns dynamic content, which is
not user generated. Such situations are, e.g., error messages,
directorly listings, or other situations, where a developer choses
to use [cmd ns_returnnotice].

[para] The output can be configured via the ADP template
[const SERVERHOME/conf/returnnotice.adp] which receives the variables
[const title], [const notice], and [const noticedetail]. For custom
styling, other templates can be configured via the configuration
parameter [const noticeadp] in the [const server] section in the
configuration file (here, for the server configuration [emph s1]).

[example_begin]
 ns_section ns/server/s1 {
   # ...
   ns_param noticeadp    returnnotice.adp ;# ADP file for ns_returnnotice
   #ns_param noticedetail false	          ;# return detail information in server reply

   # ...
 }
[example_end]

 When the configured value for name [const noticeadp]
 is not absolute, it is assumed to be located in
 the directory [const SERVERHOME/conf/].
 When the parameter is set to an empty string,
 the old-style hard-coded template is used.

[para] When the custom template leads to an error, a hardcoded basic
 template is used.

[para] The configuration parameter [const noticedetail] can be used
 to control, whether the detailed server version information should be
 included in these server replies (revealing this kind of information
 is often not wanted for security reasons).


[section {Templating depending on error status codes}]

In addition to the basic templating configuration, on can provide
tailored error messages depending on the HTTP status codes.

[example_begin]
 #---------------------------------------------------------------------
 # Special HTTP pages
 #---------------------------------------------------------------------
 ns_section ns/server/s1/redirects {
   ns_param   404 /shared/404
   ns_param   403 /shared/403
   ns_param   503 /shared/503
   ns_param   500 /shared/500
 }
[example_end]


[keywords module nssock nsssl \
	performance tuning configuration \
	SO_REUSEPORT TCP TCP_FASTOPEN \
	"connection thread pools" \
	driver prebind pagedir reverseproxy \
        certificate TLS HTTPS OCSP SNI initcmds letsencrypt redirect \
        ADP templates]
[see_also tcl-libraries tcl-overview]
[manpage_end]

