[include version_include.man]
[manpage_begin {tcl-lib-nstrace} n [vset version]]
[moddesc {NaviServer Manual}]

[titledesc {Managing Tcl interpreter initialization}]

[description]

This file implements set of commands and utilities to manage Tcl interpreter
initialization for NaviServer. What all this stuff does is simple: synthesize
a Tcl script used to initialize new Tcl interpreters.

[para]

There are basically two strategies:

[list_begin itemized]

[item] A Run an introspective script against an initialized startup interpreter
         and collect definitions of some "known" things: loaded packages, created 
         Tcl procs, namespaces and namespaced variables. Then stuff all this data
         in a (potentially large) script and run this script against virgin Tcl
         interp. This script is obtained by the [lb]nstrace::statescript[rb] command (see below).

[item] B Register traces on selected Tcl commands and get state they create in a set of
         shared variables (the epoch). Then start bootstrapping the interp. This will
         trigger trace callbacks and they will start filling the epoch. After the
         bootstrapping is done, synthesize a script containing minimal fixed state
         (variables, modules) and a definition of [lb]unknown[rb] command which will
         on-demand load procedure definitions out of the epoch state. This script
         is obtained by the [lb]nstrace::tracescript[rb] command (see below).
[list_end]

Which one of the above 2 strategies is currently used by the server, is controlled by
the [emph lazyloader] parameter of the Tcl library, as defined in the server configuration
file. The A Strategy is selected by setting the parameter to false. The B Strategy is
selected by setting the parameter to true.

[para]

In order to influence script generation, users can add their own tracing implementations.
Tracers and other supporting callbacks for the following Tcl commands are provided per default:

[example_begin]
 load, namespace, variable, proc, rename
[example_end]

For the information of how to add new tracers please look into the source code of already provided callbacks.

[para]

[section {Summary of commands}]

[list_begin definitions]

[def {nstrace::enabletrace   activates registered Tcl command traces}]

[def {nstrace::disabletrace  terminates tracing of Tcl commands}]
[def {nstrace::tracescript   returns a script for initializing interps}]

[def {nstrace::enablestate   activates generation of the state script}]
[def {nstrace::disablestate  terminates generation of the state script}]
[def {nstrace::statescript   returns a script for initializing interps}]

[def {nstrace::isactive      returns true if tracing Tcl commands is on}]
[def {nstrace::config        setup some configuration options}]

[def {nstrace::excludensp    skip serializing the given namespace}]
[def {nstrace::namespaces    returns list of namespaces for the given parent}]

[def {nstrace::addtrace      registers custom tracer callback}]
[def {nstrace::addscript     registers custom script generator}]
[def {nstrace::addresolver   registers custom command resolver}]

[def {nstrace::enablecode    returns signal about start of tracing}]
[def {nstrace::disablecode   returns signal about stop of tracing}]

[def {nstrace::addentry      adds one entry into the named trace store}]
[def {nstrace::getentry      returns the entry value from the named store}]
[def {nstrace::delentry      removes the entry from the named store}]
[def {nstrace::getentries    returns all entries from the named store}]

[list_end]

[para]

[section Limitations]

[list_begin enum]

[enum] [lb]namespace forget[rb] is still not implemented
[enum] [lb]namespace origin cmd[rb] breaks if cmd is not already defined
[enum] [lb]info procs[rb] does not return list of all cached procedures 

[list_end]

[see_also nsd]
[keywords NaviServer nstrace]
[manpage_end]
