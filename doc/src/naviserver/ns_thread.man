[include version_include.man]
[manpage_begin ns_thread n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Operate on threads}]

[description]

The [cmd ns_thread] command provides mechanisms to create and
manipulate threads, facilitating concurrent programming within
NaviServer.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd  "ns_thread create"] \
	[opt [option "-detached"]] \
	[opt [option "-name [arg value]"]] \
	[opt [option "--"]] \
	[arg script]]


Creates a new thread and executes the provided [arg script]. The optional
[option -detached] flag specifies that the thread runs detached, meaning it
cannot be joined or waited for. If [option "-name"] is specified,
the thread is named in the format [term {-tcl-$name:$nr-}], where [term {$nr}] is a
unique counter.

[list_begin definitions]
[def "Joinable threads (default):"] Threads created without
[option -detached] are joinable, allowing the main program to wait for their
completion using [cmd "ns_thread wait"]. These threads must be joined to
ensure resources are properly freed.

[def "Detached threads:"] Threads created with [option -detached] run
independently and do not need to be joined. This command returns an
empty result for detached threads.

[list_end]


[call [cmd  "ns_thread handle"]]

 Returns the handle for the current thread.
 The handle is used as argument [arg threadid] in [cmd "ns_thread wait"].

[call [cmd  "ns_thread id"]]

 Returns the current thread's ID as a hex value. This ID matches the
 third element in the sub-list returned from [cmd "ns_info threads"].


[call [cmd  "ns_thread name"] [opt [arg name]]]

 Returns the name of the current thread. If the optional [arg name]
 argument is provided, sets the current thread's name to the specified
 value.

[call [cmd  "ns_thread stackinfo"]]

 Returns the maximum available size of the C stack and the currently
 free size of the C stack for the current thread in form of a Tcl dict.
 Example result: [term "max 2048000 free 2024408"].


[call [cmd  "ns_thread wait"] [arg threadid]]

 Waits for the thread identified by [arg threadid] to complete. If the
 thread is still running, the caller blocks until the thread
 finishes. The command returns the result of the script executed by
 the joined thread.

 [para] Note: Waiting on an invalid threadid or a threadid that has
 already been joined will cause the server to abort with a fatal
 error.

[call [cmd  "ns_thread yield"]]

 Causes the current thread to yield its CPU time, allowing other
 threads to execute.

[list_end]

[section EXAMPLES]

Example 1: Creating and Waiting for a Thread
[example_begin]
 set threadHandle [lb]ns_thread create {
   ns_log notice "Thread is executing"
   return "Finished processing"
 }[rb]
 set result [lb]ns_thread wait $threadHandle[rb]
 ns_log notice "Main thread received result: $result"
[example_end]

Example 2: Detached Thread
[example_begin]
 ns_thread create -detached {
   ns_log notice "Detached thread running independently"
 }
[example_end]

Example 3: Setting and Retrieving Thread Name
[example_begin]
 ns_thread name "myCustomThread"
 ns_log notice "Thread name: [lb]ns_thread name[rb]"
[example_end]


[see_also ns_critsec ns_cond ns_sema ns_mutex ns_rwlock ns_thread ]
[keywords "server built-in" concurrency threading synchronization "thread management" multithreading]

[manpage_end]

