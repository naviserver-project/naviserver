[include version_include.man]
[manpage_begin ns_crypto n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Low level cryptographic functions based on the OpenSSL crypto library}]

[description]

These functions perform low-level cryptographic functions based on the
OpenSSL crypto library. These commands are only implemented when
NaviServer was compiled with OpenSSL support. The level of support
depends on the version of OpenSSL. Versions earlier than OpenSSL 1.0
are not supported.

[para]
For some higher level
functions (e.g. performing e.g. digest or HMAC operations of huge
amounts of data) see e.g.[cmd ns_md] and [cmd ns_hmac].

[para]
Note: some common options are described in a separate section below.

[section {COMMANDS}]

[list_begin definitions]


[call [cmd "ns_crypto::aead::encrypt string"] \
     [opt [option -binary]] \
     [opt [option "-aad [arg aad]"]] \
     [opt [option "-cipher [arg cipher]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-iv [arg iv]"]] \
     [opt [option "-key [arg key]"]] \
     [arg input]]

[para] encrypt data following the Authenticated Encryption with
Associated Data (AEAD) scheme, which provides confidentiality,
integrity, and authenticity. Currently, only GCM mode (Galois/Counter
Mode) is supported. For details about AEAD in GCM mode, see
e.g. https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf

[para]
AEAD has the following properties:

[list_begin definitions]
[def Secrecy] Nobody will be able to get any information about the
     encrypted plaintext, except the length.
[def Authenticity] Without the key it is impossible to change the
     plaintext underlying the ciphertext undetected.
[def Symmetric] Encrypting the message and decrypting the ciphertext
     is done with the same key.
[def Randomization] The encryption is randomized. Two messages with
     the same plaintext will not yield the same ciphertext. This prevents
     attackers from knowing which ciphertext corresponds to a given
     plaintext.
[list_end]

[para] The function returns a dict consisting of [term bytes] and the
authentication [term tag] used for decryption.

[para] The option [option "-aad"] can be used to specify
Additional Authenticated Data (AAD),which is data handled by
encryption, which is sent in clear text. The encryption still provides
authenticity for AAD. AAD can be used e.g. for addresses, ports,
sequence numbers, protocol version numbers.

[para] The option [option "-cipher"] can be used to
specify the used cipher such as e.g. [term aes-128-gcm] (default) or
[term aes-256-gcm]. Possible values are defined by OpenSSL.

[para] The option [option "-iv"] specifies the
initialization vector (IV) for encryption. IV is essentially a nonce
value, a value that is unique within the specified context (see the
NIST publication for details).

[para] The option [option "-key"] specifies the key for the
encryption.

[para] The argument [arg input] is the data to be encrypted.

[para] When the option [option -binary] is specified, it applies to
[option -key], [option -aad], [option -iv], [arg input],

[example_begin]
 % ns_crypto::aead::encrypt string -cipher aes-128-gcm -iv 123456789 -key secret "hello world"
 bytes fa260f97eae35e3e3df0b7 tag 93654f78fd189b559c091acb410a0040
[example_end]

[call [cmd "ns_crypto::aead::decrypt string"] \
     [opt [option -binary]] \
     [opt [option "-aad [arg aad]"]] \
     [opt [option "-cipher [arg cipher]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-iv [arg iv]"]] \
     [opt [option "-key [arg key]"]] \
     [opt [option "-tag [arg tag]"]] \
     [arg input]]

This function implements the inverse function of
[cmd "ns_crypto::aead::encrypt string"]. Note that the resulting
[term tag] of the encryption result is used as an input for decryption.
The result is a byte string of the decrypted input (no dict).

[para] When the option [option -binary] is specified, it applies to
[option -key], [option -aad], [option -iv], [option -tag], [arg input],

[example_begin]
 % set d [lb]ns_crypto::aead::encrypt string -cipher aes-128-gcm -iv 123456789 \
    -key secret -encoding binary \
    "hello world"[rb]
 % ns_crypto::aead::decrypt string -cipher aes-128-gcm -iv 123456789 \
    -key secret -tag [lb]dict get $d tag[rb] \
    -encoding binary [lb]dict get $d bytes[rb]
[example_end]


[call [cmd "ns_crypto::eckey generate"] \
     [opt [option "-name [arg name]"]] \
     [option "-pem [arg pem]"] \
     ]

Generate an EC pemfile without the need of an external command.
If no [option -name] is provided (name of the eliptic curve),
[term prime256v1] is assumed. An other popular candidate is
[term secp384r1]. The [option "-pem"] denotes the name
of the output file, which is in PEM format.

[para]
This function requires OpenSSL compiled with EC support enabled.

[example_begin]
 % ns_crypto::eckey generate -name prime256v1 -pem /tmp/priv.key.pem
[example_end]


[call [cmd "ns_crypto::eckey import"] \
     [opt [option -binary]] \
     [opt [option "-string [arg string]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     ]

[para] When the option [option -binary] is specified, it applies to
[option -string].

[para] This function requires OpenSSL compiled with EC support enabled.

[call [cmd "ns_crypto::eckey priv"] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-pem [arg pem]"]] \
     [opt [option "-passphrase [arg passphrase]"]] \
     ]

Obtain the private key in various encodings from an elliptic curve
PEM file. When the .pem-file is secured by a passphrase, this has
to be provided via [option "-passphrase"].

[para] This function requires OpenSSL compiled with EC support
enabled.


[call [cmd "ns_crypto::eckey sharedsecret"] \
     [opt [option "-binary"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-passphrase [arg passphrase]"]] \
     [opt [option "-pem [arg pem]"]] \
     [arg pubkey]]

Generate a shared secret based on the private key from the .pem file
and the provided public key. When the .pem file is secured by a
passphrase, this has to be provided via [option "-passphrase"].

[para] When the option [option -binary] is specified, it applies to
[arg pubkey].

[para] This function requires OpenSSL 1.1 or newer, compiled with EC
support enabled.


[call [cmd "ns_crypto::eckey pub"] \
     [opt [option "-pem [arg pem]"]] \
     [opt [option "-passphrase [arg passphrase]"]] \
     [opt [option "-encoding [arg encoding]"]] \
    ]

Obtain the public key in various encodings from an elliptic curves PEM
file. When the .pem file is secured by a passphrase, this has to be
provided via [option "-passphrase"].

[para] This function requires OpenSSL compiled with EC support enabled.


[call [cmd "ns_crypto::hmac string"] \
     [opt [option -binary]] \
     [opt [option "-digest [arg digest]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [arg key] \
     [arg message]]

Return a keyed-hash message authentication code (HMAC) for the
specified [arg key] and [arg message] using the specified message
digest algorithm and return it in the specified encoding. An HMAC is
a message authentication code of a key (secret) with a message. It may
be used to simultaneously verify both the data integrity and the
authentication of a message. For details of HMAC, consult RFC 4231.

[para]
When the option [option -binary] is specified, it applies to
[arg key] and [arg message].

[example_begin]
 % ns_hmac string -digest sha256 "Jefe" "what do ya want for nothing?"
 5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843
[example_end]

[para] This low-level function operates just on an input string (which has to
be in memory). In order to compute HMACs on large data, use
[cmd ns_hmac].


[call [cmd "ns_crypto::md string"] \
     [opt [option "-digest [arg digest]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-passphrase [arg passphrase]"]] \
     [opt [option "-sign [arg pemfile]"]] \
     [opt [option "-signature [arg signatureString]"]] \
     [opt [option "-verify [arg pemfile]"]] \
     [opt [option -binary]] \
     [arg message]]

[para] Return a message digest for the provided [arg message] and
return it in the specified encoding. Optionally, this function can
return a signature based on the provided private key, or it can
verify such a signature.

[para]
When the option [option -binary] is specified, it applies to
[arg message].

[example_begin]
 % ns_crypto::md string -digest sha256 "what do ya want for nothing?"
 b381e7fec653fc3ab9b178272366b8ac87fed8d31cb25ed1d0e1f3318644c89c
[example_end]

[para] This low-level function operates just on an input string (which
has to be in memory). In order to compute digests on large data (such
as from files), use [cmd ns_md].

[para] The [cmd "ns_crypto::md string"] interface can be as well used
for digital signing and verification of the signature, when the
respective keys are passed in as PEM files. When the PEM file is secured
by a passphrase, the option [option "-passphrase [arg ...]"] has
to be used to decipher the key.

[para] The option [option "-sign [arg pemfile]"] is used to sign
the given message.

[para] The options [option "-verify [arg pemfile]"] and
[option "-signature [arg signatureString]"] can be used to
verify a signature using the private key from provided PEM file.
The [arg signatureString] is required to be a binary string,
therefore, produced with the output option [option "-encoding binary"]
in the example below:

[example_begin]
 % set sig [lb]::ns_crypto::md string \
 	     -digest sha1 \
 	     -encoding binary \
 	     -sign /usr/local/src/naviserver/myprivate.pem \
 	     "abcdefghijklmnopqrstuxvwxyz\n"[rb]
 
 % set vfy [lb]::ns_crypto::md string \
 	     -digest sha1 \
 	     -verify /usr/local/src/naviserver/myprivate.pem \
 	     -signature $sig \
 	     "abcdefghijklmnopqrstuxvwxyz\n"[rb]
 1
[example_end]

[para] The PEM files provided to [option "-sign"] and
[option "-verify"] are private keys that can have
the following key types: CMAC, DSA, ECDSA, HMAC and RSA.



[call [cmd "ns_crypto::md hkdf"] \
     [opt [option -binary]] \
     [opt [option "-digest [arg digest]"]] \
     [opt [option "-salt [arg salt]"]] \
     [opt [option "-secret [arg secret]"]] \
     [opt [option "-info [arg info]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [arg length]]

Derive keys based on message digests.
See: RFC 5869: HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
https://tools.ietf.org/html/rfc5869

[para]
When the option [option -binary] is specified, it applies to
[arg message].

[para]
This function requires OpenSSL 1.1.0.


[call [cmd "ns_crypto::md vapidsign"] \
     [opt [option "-digest [arg digest]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [opt [option "-passphrase [arg passphrase]"]] \
     [opt [option "-pem [arg pem]"]] \
     [opt [option -binary]] \
     [arg message]]

Sign a message according to the Voluntary Application Server
Identification (VAPID) for Web Push
https://tools.ietf.org/id/draft-ietf-webpush-vapid-03.html

[para] Essentially, this is a special form of a signed message
digest based on elliptic curve cryptography.
See also: Generic Event Delivery Using HTTP Push
https://tools.ietf.org/html/rfc8030

[para] The signing key is taken from the provided .pem file.
When the .pem file is secured by a passphrase, this has to be
provided via [option "-passphrase"].

[para]
When the option [option -binary] is specified, it applies to
[arg message].

[para]
This function requires OpenSSL compiled with EC support enabled.


[call [cmd "ns_crypto::randombytes"] \
     [opt [option "-encoding [arg encoding]"]] \
     [arg nrbytes]]

Return the specified number of random bytes in the specified encoding
(default hex).

[example_begin]
 % ns_crypto::randombytes 20
 3191eb4360a3dc9b5ef667641b264d43aa1019aa
[example_end]


[call [cmd "ns_crypto::scrypt"] \
     [opt [option -binary]] \
     [opt [option "-secret [arg secret]"]] \
     [opt [option "-salt [arg salt]"]] \
     [opt [option "-n [arg n]"]] \
     [opt [option "-n [arg r]"]] \
     [opt [option "-n [arg p]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [arg nrbytes]]

Compute a password hash based on the scrypt Password-Based Key
Derivation Function (RFC 7914) and return the specified number of
random bytes in the specified encoding (default hex).

[para]
The scrypt function is a modern replacement for crypt and bcrypt and
derives more secret keys from a secret string.  It is based on memory-hard
functions, which offer added protection against attacks using custom hardware
and GPU arrays. The function requires the compilation of NaviServer against
OpenSSL 3.0 or newer.

[para]
The scrypt function is as well used in many cryptocurrencies as a
proof-of-work algorithm.

[para] Colin Percival. 2009. Stronger key derivation via
sequential memory-hard functions. In BSDCan 09: The Technical BSD
Conference.

[para]
When the option [option -binary] is specified, it applies to
[option -salt] and [option -secret].

[example_begin]
 % ::ns_crypto::scrypt -secret "password" -salt NaCl -n 1024 -r 8 -p 16
 fdbabe1c9d3472007856e7190d01e9fe7c6ad7cbc8237830e77376634b373162
 2eaf30d92e22a3886ff109279d9830dac727afb94a83ee6d8360cbdfa2cc0640
 
 % time {::ns_crypto::scrypt -secret "password" -salt NaCl -n 1024 -r 8 -p 16}
  42011 microseconds per iteration
[example_end]


[call [cmd "ns_crypto::pbkdf2_hmac"] \
     [opt [option -binary]] \
     [opt [option "-digest [arg digest]"]] \
     [opt [option "-dklen [arg dklen]"]] \
     [opt [option "-iterations [arg iterations]"]] \
     [opt [option "-salt [arg salt]"]] \
     [opt [option "-secret [arg secret]"]] \
     [opt [option "-encoding [arg encoding]"]] \
     [arg nrbytes]]

Compute a password hash based on PBKDF2 (Password-Based
Key Derivation Function 2, RFC 2898). This function is used to reduce
vulnerabilities of brute-force attacks against password hashes and is
used e.g. in SCRAM (Salted Challenge Response Authentication
Mechanism). It can be used e.g. for SCRAM-sha1 and SCRAM-sha-256.
The hash function of SCRAM is PBKDF2 (RFC2898) with HMAC as the
pseudorandom function (PRF) and with dkLen == output length of
HMAC == output length of the digest function.

[para]
The function has less requirements on the version of
OpenSSL than [cmd "ns_crypto::scrypt"].

[para]
When the option [option -binary] is specified, it applies to
[option -salt] and [option -secret].

[para]
The option [option -dklen] specifies the length of the output key and
is by default the same as the output length of the used digest.

[para]
The option [option -iterations] specifies the number of iterations
(repeated HMAC operations) and defaults to 4096. RFC 7677 recommends
15K iterations.

[example_begin]
 % ::ns_crypto::pbkdf2_hmac -secret "password" -iterations 4096 -salt "salt" -digest sha1
 4b007901b765489abead49d926f721d065a429c1
 
 % time {::ns_crypto::pbkdf2_hmac -secret "pass\0word" -iterations 15000 -salt "sa\0lt" -dklen 16}
 16027 microseconds per iteration
[example_end]


[list_end]
[section OPTIONS]
[list_begin options]

[opt_def -digest [arg digest]]

[para] Digest algorithm for the checksum computation. The available
algorithms are implemented in OpenSSL. The current versions of OpenSSL
supports the following message digest algorithms: "blake2b512
blake2s256 md4 md5 md5-sha1 mdc2 ripemd160 sha1 sha224 sha256 sha3-224
sha3-256 sha3-384 sha3-512 sha384 sha512 sha512-224 sha512-256
shake128 shake256 sm3 whirlpool".  The default value is "sha256"

[opt_def -encoding [arg encoding]]

[para] The option [option "-encoding [arg encoding]"] specifies the
output encoding used for the resulting values of the dict.
Possible encodings are [term hex], [term base64url],
[term base64], or [term binary]. Default is [term hex].

[opt_def -binary]

[para]
When the option [option -binary] is used, the mentioned input
arguments are treated as binary. The Tcl byte array value
of the provided input argument is used and no UTF-8 interpretation
is performed. When the type of the Tcl value is clearly a binary type
(pure/proper byte array) then it is not necessary to use
[option -binary] explicitly.


[list_end]

[see_also nsd ns_md ns_hmac]
[keywords crypto HMAC HKDF AEAD ecdsa random]

[manpage_end]
