[include version_include.man]
[manpage_begin ns_totp n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Returns a decimal-coded time-based one-time password (TOTP)}]

[description] The function returns a time-based one time password
(TOTP) as described in RFC-6238. The function uses the HOTP function
of RFC-4226 but adds the possibility to restrict the validity of the
password to a time window.

[para]
RFC-6238 defines TOTP as:
[example_begin]
 TOTP = HOTP(K, T), where T is an integer
 
 K: key
 T: time slice (moving factor for one time passwd)
[example_end]     

The implemented function ns_totp is a generalization by allowing to
specify the message digest algorithm, the number of characters of
the returned truncated value, a used_id and a time.

[para] The listed command is available in installations when
NaviServer is compiled with OpenSSL support and where
the nsf package is installed.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_totp"] \
	[opt [option "-digest [arg value]"]] \
	[opt [option "-digits [arg integer]"]] \
	[opt [option "-interval [arg integer]"]] \
	[opt [option "-user_id [arg integer]"]] \
	[opt [option "-key [arg value]"]] \
	[opt [option "-time [arg time]"]] \
	]

[list_end]

[section OPTIONS]
[list_begin options]

[opt_def -digest [arg digest]]

 Specifies the message digest algorithm used for checksum computation.
 The available algorithms are provided by OpenSSL. Typical choices
 include [const sha1], [const sha256], and [const sha512].  The
 default is [const sha256].

[opt_def -digits [arg digits]]

 Specifies the number of digits in the generated one-time password
 (OTP). The default value, as recommended in the RFC, is [const 8].

[opt_def -digits [arg interval]]

 Specifies the validity period of the OTP in seconds (time step size).
 The default value is [const 30].

[opt_def -digits [arg user_id]]

 Specifies the user identifier for deriving a per-user secret.  The
 secret can be provided explicitly with [arg -key], or indirectly via
 [arg -user_id] in combination with a configured server secret
 ([term serversecret]). For testing, use [arg -key]; for production, use
 [arg -user_id] to ensure each user has a personalized secret, seeded
 via configuration (see configuration section).

[opt_def -key [arg key]]

 Specifies the secret key used for generating the OTP (the "K" in the
 RFC formula). This is usually a decoded Base32 string.  If [arg -key]
 is not provided, [arg -user_id] together with [term serversecret]
 must be used.

[opt_def -time [arg time]]

 Specifies the time value (epoch seconds) used as the base for the OTP
 computation. If omitted, the current system time is used.

[list_end]

[section EXAMPLES]

 Minimal example:
[example_begin]
 % ns_totp -key "tweedie123"
 33888450
[example_end]


[para] A common application for TOTP is integration with authenticator
 apps such as Google Authenticator, which expect a specially formatted URL:
 
 [para] [const otpauth://TYPE/LABEL?PARAMETERS][para]

 where TYPE is either [const hotp] or [const totp].
 This URL is typically encoded in a QR code. Most authenticator apps can scan
 such codes directly, or provide means to enter the parameters manually.

[para]
The URL encodes several parameters relevant for TOTP generation:
[list_begin itemized]
[item] [const secret]: the Base32-encoded shared secret (mandatory)
[item] [const period]: validity interval in seconds, default [const 30]
[item] [const digits]: number of digits in the OTP, default [const 6]
[item] [const algorithm]: hash algorithm, default [const SHA1]
[list_end]

Among these, the only mandatory parameter is the [const secret].
When using [cmd ns_totp], it is usually necessary to extract at least
[const secret] and [const digits] from the URL, and to provide
[const -digest] explicitly, since the defaults of [cmd ns_totp]
([const sha256] and [const 8] digits) differ from those used by many
authenticator apps.

[example_begin]
 # Decoded authenticator URL
 % set url otpauth://totp/IDENT?secret=XSECRETSECRETSECRETSECRETSECRETX&period=30&digits=6&issuer=WU%20Wien
 
 # Extract parameters from URL
 % set p [lb]ns_set array [lb]ns_parsequery [lb]dict get [lb]ns_parseurl $url[rb] query[rb][rb][rb]
 secret XSECRETSECRETSECRETSECRETSECRETX period 30 digits 6 issuer {WU Wien}
 
 # Generate TOTP
 % package require base32
 % ns_totp -digest sha1 -digits [lb]dict get $p digits[rb] -key [lb]base32::decode [lb]dict get $p secret[rb][rb]
 259664
[example_end]



[section CONFIGURATION]

[example_begin]
 ns_section "ns/server/server1" {
   # ...
   ns_param serversecret "swordfish"
   # ...
 }
[example_end]


[see_also nsd ns_hmac ns_hotp ns_md ns_sha1 ns_crypt ns_rand]
[keywords TOTP encoding crypto nsf]

[manpage_end]
