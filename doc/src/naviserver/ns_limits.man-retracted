[include version_include.man]
[include version_include.man]

[manpage_begin ns_limits n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {Connection request resource limits}]

[description]

There are 4 limits which may be set to protect the server: the maximum number
of running connections, the maximum number of waiting connections, max number
of bytes the server will read, and the response timeout.

[para]
The four limits are assembled into a bundle and the bundle is registered
for one or more URLs.

[para]
A [term default] limits bundle is created at server startup and applies to all
URLs which do not have a more specific limit registered. The configuration
options can be adjusted for the [term default] limits and any additional
limits created at run-time.


[section COMMANDS]
[list_begin definitions]


[call [cmd ns_limits_set] \
     [opt [option "-maxrun    [arg n]"]] \
     [opt [option "-maxwait   [arg n]"]] \
     [opt [option "-maxupload [arg n]"]] \
     [opt [option "-timeout   [arg t]"]] \
     [opt --] \
     [arg limit]]

Set the configuration options for a named limits bundle. If the limit does not
exist it will be created. Default values are used for unspecified options.

[para]
Limits bundles exist in a process-wide namespace. The single limit [term X] may
be registered for more than one virtual server. This makes sense, as the
resources being controlled are a limit of the machine the NaviServer is running
on (or some subset of) and affects all virtual servers.

[list_begin options]

[opt_def -maxrun [arg n]]
The maximum number of connections which can be running simultaneously for all
URLs bound to this limit. Default: [term 100].

[opt_def -maxwait [arg n]]
The maximum number of connections which can be simultaneously waiting to run
because a thread is not available. Default: [term 100].

[opt_def -maxupload [arg bytes]]
The maximum size, in bytes, which the server will accept for POST, PUT etc.
requests. Default: [term 10240000].

[opt_def -timeout [arg t]]
The number of seconds within which a request should run to completion.
Default: [term 100].

[list_end]


[call [cmd ns_limits_get] [arg limit]]

Get the current configuration options and accumulated runtime statistics for
the named limits bundle. The result is a list in Tcl array-get format which
can be used, for example, to initialise a hash table.

[list_begin definitions]

[def nrunning]
The number of connections currently running with a URL which is mapped to
this limit bundle.

[def nwaiting]
The number of active connections waiting to run because either there is no
connection thread available or the [opt maxrun] limit has been reached.

[def ntimeout]
Number of connections closed due to timeout.

[def ndropped]
Number of connections dropped due to...

[def noverflow]
Number of connections dropped due to ...

[def maxrun]
The current [option maxrun] configuration option, which may be adjusted by a call
to [cmd ns_limits_set] with the [option -maxrun] option.

[def maxwait]
The current [option maxwait] configuration option, which may be adjusted by a call
to [cmd ns_limits_set] with the [option -maxwait] option.

[def maxupload]
The current [option maxupload] configuration option, which may be adjusted by a call
to [cmd ns_limits_set] with the [option -maxupload] option.

[def timeout]
The current [option timeout] configuration option, which may be adjusted by a call
to [cmd ns_limits_set] with the [option -timeout] option.


[list_end]


[call [cmd ns_limits_register] \
     [opt [option "-noinherit [arg bool]"]] \
     [opt [option "-server    [arg s]"]] \
     [opt --] \
     [arg limit] \
     [arg method] \
     [arg url] ]

Register the named limits for the given URL.

[list_begin options]

[opt_def -noinherit [arg boolean]]
If specified, a request URL such as /foo/bar will not match a limit registered
on /foo. The default is false -- URL inheritance applies. The mechanism is the
same as [cmd ns_register_proc].

[opt_def -server [arg server]]
The virtual server to use. Defaults to the server the command is run within if
not specified. Limits are server global, but must be registered per-virtual
server. This is mainly useful for startup scripts such as the main init.tcl
bootstrap, which does not run within the context of a virtual server.

[list_end]


[call [cmd ns_limits_list] [opt [arg pattern]]]

List the names of all limit structures, or only those whose name matches the
given glob pattern. The limit names can be passed to [cmd ns_limits_get] and
[cmd ns_limits_register].


[list_end]



[section CONFIGURATION]

The following configuration options are available to control limits at server
startup in addition to the ns_limits commands which can be run once the the
server has started:

[list_begin definitions]

[def ns/limits]
Global limit names and descriptions:

[example_begin]
ns_section "ns/limits"
ns_param   default   "Default connections"
ns_param   slow      "Slow connections"
[example_end]

[def "ns/limit/\$limitname"]
Global limit configurations:

[example_begin]
ns_section "ns/limit/default"
ns_param   maxrun    100
ns_param   maxwait   100
ns_param   maxupload 10240000
ns_param   timeout   60

ns_section "ns/limit/slow"
ns_param   maxrun    10
ns_param   maxwait   0
[example_end]

[def "ns/server/server1/limits"]
Mapping virtual server URLs to global limits:

[example_begin]
ns_section "ns/server/server1/limits"
ns_param   default   {GET /*}
ns_param   slow      {GET /download}
ns_param   slow      {GET /*.pdf}
[example_end]


[list_end]


[section EXAMPLES]

The following example shows how to prevent large file downloads (which may
take some time to complete) from using up all available connection slots,
preventing other pages from being served.

[para]
The large files are located in the [term /download] directory. We also want to
control large PDF files which are located throughout the URL hierarchy using
the same limit.

[para]
With this configuration there can be at most 10 simultaneous downloads of PDF
files or files in the [term /download] directory, in total, at any one time.
Reuquests for other URLs will have the [term default] limit applied.

[example_begin]
[cmd ns_limits_set] -maxrun 10 -maxwait 0 -- slow
[cmd ns_limits_register] slow GET /download
[cmd ns_limits_register] slow GET /*.pdf
[example_end]


The following example proc can be used to log statistics on failed requests
periodically:

[example_begin]
proc log_limits {} {
    foreach limit [lb][cmd ns_limits_list][rb] {
        array set l [lb][cmd ns_limits_get] $limit[rb]
        ns_log notice "limit[lb]$limit[rb]: " \
            "timeouts: $l(ntimeout) drops: $l(ndropped) overflows: $l(noverflow)"
    }
}

ns_schedule_proc 3600 log_limits
[example_end]


[see_also ns_server]
[keywords resource limit upload timeout configuration]
[manpage_end]
