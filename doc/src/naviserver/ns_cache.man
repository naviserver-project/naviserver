[include version_include.man]

[manpage_begin ns_cache n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {Cache manipulation}]

[description]
The cache commands store key-value data in memory for quick access, like
[cmd nsv]. Unlike [cmd nsv], a limit is placed on the amount of memory used for
each cache, and additional limits can be placed on the expire time of cache
entries, timeouts waiting for updates, etc.

[para]
The cache commands try to be efficient. For example, if two threads are
simultaneously accessing the same entry in a cache, and the cache entry does not
exist or has expired, then the first thread will evaluate its script to
generate the new value.  The second thread will recognize this and wait for the
first thread to finish, and then return the value computed by the first thread.

[para]
A cache will tend to grow to its maximum specified size.  Unused entries will
move towards the end of the Least Recently Used list and be deleted to make room
for new entries. Similarly, expired entries will remain in the cache and only be
deleted when they reach the end of the LRU list, or are accessed and it is
noticed that they have expired.

[section {OPTIONS}]

The following options are used for several commands below.

[list_begin options]

[opt_def -timeout [arg t]]
The time to wait for some other thread to compute the cache value.
The value [arg t] can be specified in the form
[arg secs[opt :microsecs]], or [arg secs.fraction],
or as a number with a time unit.

[opt_def -expires [arg t]]
A time in the future when the cache entry expires. The expired entry will be
deleted only when retrieved, e.g. via [cmd ns_cache_eval].

[para]
The value [arg t] can be specified in the form
[arg secs[opt :microsecs]], or [arg secs.fraction],
or as a number with a time unit.
Small values of [arg t] are treated as offsets, large values as absolute times.

[list_end]


[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_cache_configure] \
     [arg name] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-maxentry [arg s]"]] \
     [opt [option "-maxsize [arg s]"]] ]

Query or change the parameters of a previously created cache.  If none
of the options are used, the current settings are returned in form of
an attribute value list.  [option -maxentry] and [option -maxsize] can
be specified in memory units (kB, MB, GB, KiB, MiB, GiB).

[call [cmd ns_cache_create] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-maxentry [arg s]"]] \
     [opt [option --]] \
     [arg name] \
     [arg size]  ]

Create a new Tcl cache identified by [arg name] with maximum size
[arg size]. The size determines the number of entries that can be kept in
the cache. The size of a single entry is the size of the key plus the
size of the value and the internal overhead per cache entry (about 126
bytes on a 64-bit machine).  Optionally, a [option -timeout], an
[option -expires] time and the maximum size of the cache entry value of a
single entry (parameter [option -maxentry]) can be specified.
The values for [arg size] and [option -maxentry] can be specified in
memory units (kB, MB, GB, KiB, MiB, GiB).

[para] The function returns 1 when the cache is newly created. When
the cache exists already, the function return 0 and leaves the
existing cache unmodified.

[call [cmd ns_cache_exists] \
     [arg name]]

Check for the existence of a cache and return 0 (failure) or 1 (success).


[call [cmd ns_cache_names] ]

Return the list of all caches for the current virtual server.


[call [cmd ns_cache_keys] \
        [opt [option "-exact"]] \
        [opt [option --]] \
        [arg name] \
        [opt [arg pattern]] ]

Return a list of all keys in the named cache. If [arg pattern] is
given then each key is matched against the globbing pattern, and only
those which match are included in the list. When the option 
[option "-exact"] is used, [arg pattern] is interpreted
literally,  either a key with a literally exact match or empty is returned.


[call [cmd ns_cache_eval] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-force [arg bool]"]] \
     [opt [option --]] \
     [arg name] \
     [arg key] \
     [arg script] \
     [opt [arg args]] ]

Return the data identified by [arg key] from the named cache. If the key does
not exist then [arg script] is executed, its value is returned and inserted
into the cache.

[para]
The [arg script] is also executed if a cached value exists but has expired.

[para]
If the [option -force] option is set then any existing cached entry is removed
whether it has expired or not, and the [arg script] is run to regenerate it.


[call [cmd ns_cache_get] \
	[arg name] \
        [arg key] \
        [opt [arg varName]] ]

Get the cached value for the provided key from the cache.
If the optional variable name is not provided, it returns 
the associated value on success or it raises an error,
if the key does not exist. If the optional variable name is
provided it returns 1 or 0 on success / failure and sets
the provided variable with the associated value (similar to 
nsv_get).

[call [cmd ns_cache_incr] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option --]] \
     [arg name] \
     [arg key] \
     [opt [arg incr]] ]

Increment the integer value in the cache by 1, or by [arg incr] if specified,
and return it.



[call [cmd ns_cache_append] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option --]] \
     [arg name] \
     [arg key] \
     [arg args] ]

Append the given [arg args] to the value in the cache and return the new
value. The [arg args] and the cache value are treated as simple strings.

[para]
If the cache value does not already exist it is created.



[call [cmd ns_cache_lappend] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option --]] \
     [arg name] \
     [arg key] \
     [arg args] ]

Append the given [arg args] to the value in the cache and return the new
value. The cache value is as a Tcl list and the [arg args] are appended to
maintain its well-formed-list format.

[para]
If the cache value does not already exist it is created.



[call [cmd ns_cache_flush] \
        [opt [option "-glob"]] \
        [opt [option --]] \
        [arg name] \
        [opt [arg args]] ]

Flush the entries in a cache and return the number of flushed entries.
If the optional [arg args] are given these are used as the keys in the
cache to be flushed. If the [option -glob] option is given then the
keys are treated as globbing patterns and only the entries with
matching keys are flushed.

[call [cmd ns_cache_stats] \
        [opt [option "-contents"]] \
        [opt [option "-reset"]] \
        [opt [option --]] \
        [arg name] ]

Return the accumulated statistics for the given cache [arg name] in dict
format since the cache was created or was last reset.

[para]
If the [option -reset] option is given then the statistics will be reset
to zero after the command returns.

[para] If the [option -contents] option is given then a list of all
entries is returned containing the key, size, hits and expire time for
each entry in the cache. The time is in [cmd ns_time] timespec format.

The cache statistics track the following items:

[list_begin definitions]

[def maxsize]
The maximum size in bytes this cache can grow to, as specified by the
[option -size] option to [cmd ns_cache_create].

[def size]
The current size of the cache, in bytes.

[def entries]
The current number of entries the cache contains.

[def flushed]
Number of entries which were explicitly flushed by the [cmd ns_cache_flush]
command.

[def hits]
Number of times cache was queried and entry was present and valid.

[def missed]
Number of times cache was queried and entry was not present or valid.

[def hitrate]
The successful hit rate expressed as a percentage of total hits. Higher is better.

[def expired]
Number of times an entry was found to be present but expired when requested and
so not returned.

[def pruned]
Number of times an entry reached the end of the LRU list and was removed to make
way for a new entry.

[list_end]


[call [cmd ns_cache_transaction_begin]]

Begin a cache transaction. A cache transaction provides in essence the
ability to rollback the added/updated values, while providing cache
isolations to other transactions. The cached values from incomplete
cache transactions are just visible from the current thread, but not
from other threads. Cache transactions effect always all caches.

[para] Typically, cache transactions are used in accordance with
database transactions.

[call [cmd ns_cache_transaction_commit] \
        [opt [option "-all"]]]

Successfully terminate a cache transaction. All added values are made
visible to other threads. The option [option "-all"] can be used to
commit all nested transactions currently open in this thread.

[call [cmd ns_cache_transaction_rollback] \
        [opt [option "-all"]]]

Terminate a cache transaction and undo changes in all caches since
the matching [cmd ns_cache_transaction_begin]. 
The option [option "-all"] can be used to
rollback all nested transactions currently open in this thread.



[call [cmd ns_fastpath_cache_stats] \
        [opt [option "-contents"]] \
        [opt [option "-reset"]] \
        [opt [option --]] \
        [arg name] ]

Return the accumulated statistics for fastpath cache in array-get
format since the cache was created or was last reset. For details, see
[cmd ns_cache_stats] above.

[list_end]


[section "Cache Transactions"]

Background: when ns_cache_* commands are used within a database
transaction (e.g. in OpenACS), it might occur, that partial results of
the transaction are cached before the transaction is committed.  When
the transaction is rolled back, invalid values might be kept in the
stack leading to erroneous and hard to debug behavior.  Furthermore,
information about changes might leak into other concurrent threads via
the cache, even before the transaction is committed.

[para] The cache transaction semantics is implemented via the three
commands:

[list_begin itemized]

[item] [cmd ns_cache_transaction_begin]
[item] [cmd ns_cache_transaction_commit]
[item] [cmd ns_cache_transaction_rollback]
[list_end]

When no ns_cache_transaction* commands are used, the behavior is
exactly as before, the caches are not transactions aware. When cache
transactions are used, which are initiated by a
[cmd ns_cache_transaction_begin] call and ended via
[cmd ns_cache_transaction_commit] or
[cmd ns_cache_transaction_rollback],
the ns_cache commands provide in essence the following
functionalities:

[list_begin enumerated]

[enum] The ability to rollback of the values since the matching
ns_cache_transaction_begin
	
[enum] Isolation of behavior: cached values from incomplete cache
transactions are just visible from the current thread, but not from
other threads.
	
[enum] Nesting: transactions can be nested (up to a compile time
constant, per default: 16)
	
[enum]	
Introspection: the statistics about cache commits and rollbacks are
included in the cache statistics.
[list_end]
Note that the cache transactions span over all defined caches.

[section EXAMPLES]

In the following example our goal is to serve a web page within 5 seconds. The
web page requires two sets of data: the user's name and email address, and a
personalized advert, both of which are stored in a database.

[para]
The data doesn't change often so a cache is used to speed up access. Even so,
the server may become so busy that database queries take longer than our target
response time of 5 seconds so we specify a [option -timeout] to both calls
to the [cmd ns_cache_eval] command.

[para]
In this case, a time 5 seconds into the future is constructed once and passed to
both cache calls. The second call will use the remainder of the time once the
first completes.


[example_begin]
 set timeout [lb]ns_time incr [lb]ns_time get[rb] 5[rb]
 
 if {[lb]catch {
    set user [lb][cmd ns_cache_eval] [option -timeout] $timeout -- users $userid {
        db_query {
            select name, email
            from users
            where userid = :userid
        }
    }[rb]
    set ad [lb][cmd ns_cache_eval] [option -timeout] $timeout [option -expires] 120 -- ads $userid {
        db_query {
            select advert from
            personalized_adverts
            where userid = :userid
        }
    }[rb]
 } errmsg[rb]} {
    ns_returnunavailable "Sorry, our web server is too busy."
 }
 
 ns_return 200 text/html [lb]example_personalized_page $user $ad[rb]
[example_end]


[see_also ns_memoize nsv ns_time ns_urlspace ns_time]
[keywords "server built-in" "global built-in" cache fastpath]

[manpage_end]
