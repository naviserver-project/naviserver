[include version_include.man]
[manpage_begin ns_hmac n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Returns a string containing a keyed-hash
message authentication code (HMAC)}]

[description] These functions return a keyed-hash message authentication
code (HMAC) for the specified key and message, using the specified
message digest algorithm. An HMAC is a message authentication code of
a key (secret) with a message. It may be used to simultaneously verify
both the data integrity and the authentication of a message. For
details of HMAC, consult RFC 4231.

[para] The provided commands provide a one-step interface and an
incremental interface, where the latter one can be used to incrementally
compute a HMAC e.g. by reading data from a file. This is especially important
for computing a HMAC on content which is too large to be kept in memory.

[para] The listed commands are available in installations when
NaviServer is compiled with OpenSSL support and where the NSF package
is installed.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_hmac string"] \
	[opt [option "-digest [arg string]"]] \
	[opt [option "-encoding [arg string]"]] \
	[arg key] \
	[arg message]]

Returns the HMAC based on the provided secret [arg key] and the string
[arg message].

[call [cmd "ns_hmac file"] \
    [opt [option "-digest [arg string]"]] \
    [opt [option "-encoding [arg string]"]] \
    [arg key] [arg "filename ..."] \
]

Returns the HMAC from the provided secret [arg key], the file
[arg filename] and the optional provided additional filenames in
[arg args].  The files are read incrementally to keep storage requirements
for large files low. The resulting HMAC is calculated cumulatively.

[call [cmd "ns_hmac new"] \
    [opt [option "-digest [arg string]"]] \
    [option "-key [arg string]"] \
]

Creates and returns a new HMAC object for incremental operations.
The option [option "-digest"] defaults to "sha256"
the option [option "-key"] has to be always specified.


[call [arg \$hmac_object] [cmd "add"] [arg data]]

Adds [arg data] incrementally to the HMAC object, which was created
previously with [cmd "ns_hmac new"].

[call [arg \$hmac_object] \
	[cmd "get"] \
	[opt [option "-encoding [arg encoding]"]] \
]

Returns the current HMAC value from the HMAC object,
to which data was added previously with the method [cmd "add"].

[call [arg \$hmac_object] [cmd "destroy"]]

Deletes the HMAC object (used for incremental operations).

[list_end]

[section OPTIONS]
[list_begin options]

[opt_def -digest [arg digest]]

Digest algorithm for the checksum computation. The available
algorithms are implemented in OpenSSL. The current versions of OpenSSL
supports the following message digest algorithms: "blake2b512
blake2s256 md4 md5 md5-sha1 mdc2 ripemd160 sha1 sha224 sha256 sha3-224
sha3-256 sha3-384 sha3-512 sha384 sha512 sha512-224 sha512-256
shake128 shake256 sm3 whirlpool". The default value is "sha256"

[opt_def -encoding [arg encoding]]

The option [option "-encoding [arg encoding]"] specifies the
output encoding used for the resulting values of the dict.
Possible encodings are [term hex], [term base64url],
[term base64], or [term binary]. Default is [term hex].
[list_end]

[example_begin]
  nscp 2> ns_hmac string -digest sha256 "Jefe" "what do ya want for nothing?"
  5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843
[example_end]


[section {LOW LEVEL COMMANDS}]

While the command [cmd "ns_hmac"] provides a high-level, object oriented
interface mostly based on the MD objects, the lower level
implementation provides more options for certain specialized operations.

[list_begin definitions]

[call [cmd "ns_crypto::hmac add"] \
    [opt [option "-binary"]] \
    [opt --] \
    [arg "ctx"] \
    [arg message] \
]

[call [cmd "ns_crypto::hmac free"] \
    [arg "ctx"] \
]

[call [cmd "ns_crypto::hmac get"] \
    [opt [option "-encoding hex|base64url|base64|binary"]] \
    [arg "ctx"] \
]

[call [cmd "ns_crypto::hmac new"] \
    [opt [option "-binary"]] \
    [opt --] \
    [arg "digest"] \
    [arg "key"] \
]

[call [cmd "ns_crypto::hmac string"] \
    [opt [option "-binary"]] \
    [opt [option "-digest [arg string]"]] \
    [opt [option "-encoding hex|base64url|base64|binary"]] \
    [arg "key"] \
    [arg "message"] \
]

[list_end]

Example for an HMAC based on [term sha384] with key [term Jefe]:
[example_begin]
 % ns_crypto::hmac string -digest sha384 "Jefe" "what do ya want for nothing?"
 af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649
[example_end]


[see_also nsd ns_hotp ns_totp ns_md ns_md5 ns_sha1 ns_sha ns_crypt ns_crypto ns_rand]
[keywords encoding crypto HMAC nsf]

[manpage_end]

