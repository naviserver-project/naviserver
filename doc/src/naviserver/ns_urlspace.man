[include version_include.man]
[manpage_begin ns_urlspace n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Assign Application Data to URLs}]

[description]

 The command [cmd ns_urlspace] allows you to assign, query, list, or
 delete data in the trie data structure representing the URL space. It
 supports filters and inheritance, enabling you to assign data to
 specific URL patterns (e.g., all ".adp" pages) or to assign data to a
 higher-level node, which can be inherited by all nodes below it.


[para]

 The values assigned to the URL space are shared among all threads of
 a server. This using this command is somewhat similar to the use of
 [cmd nsv] but differs in its inheritance and filtering capabilities.

[para]
 
 This command allows you, for example, to implement access control
 (similar to the [uri ../../nsperm/files/nsperm.html "nsperm module"])
 at the Tcl level. Other applications include blacklisting certain
 parts of the URL tree from statistics, or assigning different master
 templates to different parts of the URL tree.

[para]

 The [cmd "ns_urlspace"] command provides scripting access to
 functionality that has been part of NaviServer for a long time. For
 example, the mapping of requests to connection thread pools is
 performed using the same mechanism. In this case, the mapping of URLs
 to pools can be performed via the command [cmd ns_server], or it can
 be provided via configuration variables in the pool section (see,
 e.g., [uri ../../manual/files/admin-tuning.html "Tuning NaviServer"]).


[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_urlspace set"] \
        [opt [option "-constraints [arg constraints]"]] \
	[opt [option "-id [arg integer]"]] \
	[opt [option "-key [arg value]"]] \
	[opt [option "-noinherit"]] \
	[arg URL] \
	[arg data] \
]

 Assigns a [arg value] to a node in the URL space specified by
 [arg URL]. By default, the value is inherited by all sub-nodes, unless the
 option [option "-noinherit"] is specified.

[para]
 The [arg URL] can include glob-style patterns (e.g., "/*.adp") to match multiple URLs.

[para]
 The option [option -constraints] allows you to
 specify additional context constraints for the assignment (see
 [sectref {Context Constraints}]).

[example_begin]
 # Assign values to URL patterns
 ns_urlspace set /*.adp             A
 ns_urlspace set /*.html            H
 ns_urlspace set /internal/space/*  I
 
 # Assign a value with a context constraints
 ns_urlspace set -constraints {"user-agent" "*bot*"} /*.adp C
[example_end]


[call [cmd "ns_urlspace get"] \
	[opt [option "-context [arg setId]"]] \
	[opt [option "-exact"]] \
	[opt [option "-id [arg integer]"]] \
	[opt [option "-key [arg value]"]] \
	[opt [option "-noinherit"]] \
	[arg URL] \
]

 Retrieves a value from the URL space for a specified [arg URL]. By
 default, the returned value might be inherited from a parent node in
 the trie structure.

 [para] When the option [option "-exact"] is used, inheritance is
 deactivated, and only values directly assigned to the [arg URL] are
 returned. When the option [option "-noinherit"] is specified, only
 values set with the [option "-noinherit"] flag are considered.

 [para] The option [option "-context"] allows you to specify context
 constraints for the retrieval (see [sectref {Context Constraints}]).
 If this option is not specified, the server tries to
 use the current connection context, if available. This requires that
 a connection is open and the socket is connected. Otherwise, no
 context is provided.

[example_begin]
 # Retrieve mappings without context
 ns_urlspace get /test.adp
 # Returns: A
 
 ns_urlspace get /internal/space/documents/info.html
 # Returns: I
 
 # Retrieve mapping with context
 set context [lb]ns_set create "user-agent" "googlebot"[rb]
 ns_urlspace get -context $context /test.adp
 # Returns: C
[example_end]


[call [cmd  "ns_urlspace list"] \
	[opt [option "-id [arg integer]"]] \
]

 Lists the values assigned to the URL space, which is either the
 default URL space or the one specified by [option "-id"]. The command returns a
 list of lists, where each item contains the following elements:

 [list_begin itemized]
    [item] [const key] - The key associated with the assignment.
    [item] [const path] - The URL pattern (e.g., "/internal/space").
    [item] [const "filter pattern"] - Any constraints applied (e.g., "*.adp").
    [item] [const inherit] or [const noinherit] - Whether inheritance is enabled.
    [item] [opt contextfilter] - The optional contextfilter
    [item] [const data] - The assigned value.
 [list_end]

[example_begin]
 ns_urlspace list
 Returns: {. / *.html inherit H} {. / *.adp inherit A} {. / *.adp inherit {user-agent *bot*} C} {. /internal/space * inherit I}
[example_end]


[call [cmd "ns_urlspace unset"] \
	[opt [option "-allconstraints"]] \
	[opt [option "-id [arg integer]"]] \
	[opt [option "-key [arg value]"]] \
	[opt [option "-noinherit"]] \
	[opt [option "-recurse"]] \
	[arg URL] \
]

 Unset a value for a [arg URL] for the given or default key. This
 command undoes the effects of [cmd "ns_urlspace set"].

[para] The option [option "-allconstraints"] implies that all context
 filters are deleted. When the option [option "-noinherit"] is used,
 only the values set with [option "-noinherit"] are deleted, and vice
 versa.

[para] The option [option "-recurse"] performs the operation
 recursively on all sub-nodes under the specified [arg URL]. Unless
 [option "-recurse"] is specified, the command returns 1 on success or
 0 on failure.


[call [cmd "ns_urlspace new"] ]

 Allocates a new URL space ID. When the number of compile-time
 configured URL spaces runs out, a Tcl exception is raised.

[example_begin]
 # Allocate a new URL space
 set newId [lb]ns_urlspace new[rb]
 
 # Use the new URL space ID
 ns_urlspace set -id $newId /*.php P
[example_end]

[list_end]

[section "COMMON OPTIONS"]
[list_begin options]


[opt_def -id [arg integer]]

  Specifies the ID of the URL space. Multiple different URL spaces can
  be used, which can be allocated with the command
  [cmd "ns_urlspace new"]. The maximum number of available URL spaces is a compile-time
  constant of NaviServer. When no ID is specified, NaviServer
  automatically allocates a default ID on first usage.

[opt_def -key [arg value]]
 
  Every URL assignment can have a key, which is logically part of the
  URL space. Using this key, you could, for example, assign different
  values to a URL for different HTTP methods like [term GET] or
  [term POST]. The key can be used for other purposes as well. If no key is
  specified, it defaults to the constant "[const .]" (dot character).

[list_end]

[section EXAMPLES]


[example_begin]
 # Define mappings in the default URL space
 
 # Map all .adp files to "A"
 ns_urlspace set /*.adp A
 
 # Map all .html files to "H"
 ns_urlspace set /*.html H
 
 # Map a specific internal area to "I"
 ns_urlspace set /internal/space/* I
 
 # Query mappings
 ns_urlspace get /test.adp
 # Returns: A
 
 ns_urlspace get /foo/bar/test.adp
 # Returns: A
 
 ns_urlspace get /foo/baz/info.html
 # Returns: H
 
 ns_urlspace get /foo/baz/info.text
 # Returns: (no value assigned)
 
 ns_urlspace get /internal/space/documents/info.html
 # Returns: I
[example_end]



[section "Context Constraints"]

 In addition to the glob-based URL space matching, NaviServer supports
 so-called [emph "context constraints"]. These constraints allow you to include additional
 (context) information such as the current IP addresses or current
 header fields in the URL space lookup. They’re applied after the
 constraint-less URL match and
 participate in the usual "most specific wins" resolution (i.e., if
 there are multiple definitions for the same method and URL pattern
 pair, having different context constraints, the most definition is taken).

[para] With context constraints, you can say "I want /foo.adp to map to
 X only when this request comes from a Googlebot, and to Y
 otherwise."  Or "serve internal pages only to clients in our
 corporate subnet."


[para] When you attach a context constraints in a connection-pool mapping,
 or via [cmd ns_register_proc], [cmd ns_register_filter] etc., the
 live socket’s headers and peer address are used automatically when
 deciding, which proc/filter/etc. is to be used. When you specify the
 context constraints in a [cmd "ns_urlspace set"] command, you can pass
 directly a context to a [cmd "ns_urlspace set"] command, by providing
 an "ns_set" whose keys are header names (e.g. "user-agent") or the
 special key "x-ns-ip" (pseudo header field) for IP/mask filters.

[para] Context constraints may be [emph conjunctive]: if you supply
 multiple key/value pairs, all must match.  Conjunctions are
 specified as a flat list.

[para] Example:

[example_begin]
 # Base mapping when no context matches:
 % ns_urlspace set /*.adp DefaultHandler
 
 # When *either* user-agent contains "bot":
 % ns_urlspace set -constraints {user-agent *bot*} /*.adp BotHandler
 
 # When *both* UA="bot" *and* IP in 10.0.0.0/8:
 % ns_urlspace set -constraints {user-agent *bot* x-ns-ip 10.0.0.0/8} \
                   /*.adp BotInternalHandler
 
 # Try without context:
 % ns_urlspace get /test.adp
 DefaultHandler
 
 # Try with only user-agent googlebot:
 % set ctx1 [lb]ns_set create user-agent googlebot[rb]
 % ns_urlspace get -context $ctx1 /test.adp
 BotHandler
 
 # Try with UA=googlebot *and* internal IP:
 % set ctx2 [lb]ns_set create user-agent googlebot x-ns-ip 10.0.12.5[rb]
 % ns_urlspace get -context $ctx2 /test.adp
 BotInternalHandler
[example_end]

See also the [cmd ns_server] configuration examples for defining
connection pools that use context constraints to route "*bot*" traffic
into a dedicated pool.

[para] Context constraints can be as well set for the following commands
[cmd ns_register_adp],
[cmd ns_register_cgi],
[cmd ns_register_fastpath],
[cmd ns_register_filter], and
[cmd ns_register_proc].


[section {NOTES}]

[para] The URL patterns used in [cmd ns_urlspace] commands support
 glob-style patterns, allowing for flexible matching. Be cautious when
 defining patterns to ensure they match the intended URLs.

[para] The URL space is stored in a trie data structure for efficient
 matching.

[para] When using context constraints, ensure that the context constraints of
 the [cmd "ns_urlspace set"] command and the [cmd ns_set] (or request
 headers) accurately represent the request conditions you want to
 match. For security reasons, you should not rely solely on untrusted
 request header fields.

[see_also nsv ns_server ns_set]
[keywords "server built-in" trie urlspace shared variables \
  "data structure" "context constraints"]

[manpage_end]

