[include version_include.man]
[manpage_begin ns_mutex n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Operate on mutexes}]

[description]

This command provides a mechanism to manipulate mutexes.

[section {COMMANDS}]


[list_begin definitions]


[call [cmd "ns_mutex create"] [opt [arg name]]]

Initializes a new mutual exclusion (mutex) lock and returns a handle to it. 
If [arg name] is provided the mutex name will be set to this value. The
command returns a mutex ID which used as argument for the commands operating
on this mutex.


[call [cmd "ns_mutex destroy"] [arg mutexid]]

Destroys the mutex [arg mutexid] and frees any resources it was
using. NOTE: The mutex must be unlocked, or else the behavior is
undefined and will likely crash the server.

Actually, in the current implementation, this operation is a
no-op, the mutex object will live until the server shuts down.

[call [cmd "ns_mutex lock"] [arg mutexid]]

Acquires the specified mutual exclusion lock.
If [arg mutexid] does not exist, it is auto-created (not recommended).


[call [cmd "ns_mutex eval"] [arg mutexid] [arg script]]

A convenience function to lock the specified mutex, run the 
[arg script] and unlock the mutex finally. The result and error condition of
the [arg script] are returned by the command.

If [arg mutexid] does not exist, it is auto-created (not recommended).


[call [cmd "ns_mutex trylock"] [arg mutexid]]

Tries to acquire the specified mutual exclusion lock. If the mutex is locked
successfully, return value of 0 is returned. Non-zero return value indicates that the mutex is
already locked by someone else.

If [arg mutexid] does not exist, it is auto-created (not recommended).


[call [cmd "ns_mutex unlock"] [arg mutexid]]

Unlocks the specified mutual exclusion lock.
The lock object [arg mutexid] must pre-exist.

[list_end]


[section EXAMPLES]

At startup (for example, in your init.tcl procedure), create a mutex
named "foo" and remember it in a shared variable.

[example_begin]
 nsv_set mutex foo [lb][cmd "ns_mutex create"][rb]
[example_end]

Later (for example, in a request procedure), you might use this mutex
to lock the access to the file:

[example_begin]
 set mutex [lb]nsv_get mutex foo[rb]
 try {
    [cmd "ns_mutex lock"] $mutex
     ... access file foo ...
 } finally {
    [cmd "ns_mutex unlock"] $mutex
 }
[example_end]

Note: The [term try] ... [term finally] in the snipped above is important so the lock
isn't held if Tcl unwinds due to an error accessing the file.

[para] Alternatively, one can use the following shorter version, where the
[cmd eval] subcommand takes care of locking/unlocking of the mutex
without the need for the [cmd try] command.

[example_begin]
 [cmd "ns_mutex eval"] $mutex {
    ... access file foo ...
 }
[example_end]

At shutdown (for example, in your shutdown procedure registered with
[cmd ns_atshutdown]), one can destroy the mutex (not strictly necessary).

[example_begin]
 [cmd "ns_mutex destroy"] [lb]nsv_get mutex foo[rb]
 nsv_unset mutex foo
[example_end]

[see_also ns_atsignal ns_cond ns_critsec ns_rwlock ns_sema ns_thread ]
[keywords "server built-in" mutex threading synchronization concurrency]

[manpage_end]


