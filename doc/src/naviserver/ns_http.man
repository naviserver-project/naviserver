[include version_include.man]
[manpage_begin ns_http n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {HTTP client functionality}]

[description]

The command [cmd ns_http] provides HTTP and HTTPS client
functionality. It can be used to create, dispatch, wait on and/or
cancel requests and process replies from web servers, where NaviServer
acts as a web client. This is important, for example, to use web
services and REST interfaces.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_http cancel"] [arg id]]

Cancels queued HTTP/HTTPS request indntified by the [arg id] (of the
request).  The command returns an empty result. The purpose of this
command is to terminate runaway requests or requests that
have been timed out.  Even completed requests can be cancelled if
nobody is interested in the request result.

[list_begin arguments]
[arg_def "" id]
ID of the HTTP request to cancel.
[list_end]

[call [cmd "ns_http cleanup"]]

Cancels all pending HTTP/HTTPS requests issued in the current
interpreter. At this point, any Tcl channels that have been
optionally assigned to a task, will be automatically closed.


[call [cmd "ns_http keepalives"]]

 Returns the number and slot (socket) usages for active or recent ns_http
 requests. The following example shows, how the socket opened to google.com
 is kept still for about 2 seconds. The slots for the sockets are allocated
 dynamically depending on the system load
  
[example_begin]
 % ns_http run  -keepalive 2s https://google.com/
 % ns_http keepalives
  {slot 0 state waiting expire 1.999983 peer google.com:443 sock 82} {slot 1 state free}
[example_end]

 The returned information is useful for monitoring and debugging busy HTTP client operations.


[call [cmd "ns_http list"] [opt [arg id]]]

Lists running ns_http requests. When [arg id] was specified, returns a
single list in form of: [term "id url status"].  If [arg id] was not
specified, returns a list of lists is return, where the elements have
the described format. The value of the status can be one
of [term done], [term running], or  [term error].

[list_begin arguments]
[arg_def "" id]
Optional ID of the HTTP request to list.
[list_end]




[call [cmd "ns_http queue"] \
    [opt [option "-binary"]] \
    [opt [option "-body [arg value]"]] \
    [opt [option "-body_chan [arg value]"]] \
    [opt [option "-body_file [arg value]"]] \
    [opt [option "-body_size [arg integer]"]] \
    [opt [option "-cafile [arg value]"]] \
    [opt [option "-capath [arg value]"]] \
    [opt [option "-cert [arg value]"]] \
    [opt [option "-done_callback [arg value]"]] \
    [opt [option "-expire [arg time]"]] \
    [opt [option "-headers [arg setId]"]] \
    [opt [option "-hostname [arg value ]"]] \
    [opt [option "-insecure"]] \
    [opt [option "-keep_host_header"]] \
    [opt [option "-keepalive [arg time]"]] \
    [opt [option "-method [arg value]"]] \
    [opt [option "-outputchan [arg value]"]] \
    [opt [option "-outputfile [arg value]"]] \
    [opt [option "-partialresults"]] \
    [opt [option "-proxy [arg value]"]] \
    [opt [option "-raw"]] \
    [opt [option "-response_data_callback [arg value]"]] \
    [opt [option "-response_header_callback [arg value]"]] \
    [opt [option "-spoolsize [arg memory-size]"]] \
    [opt [option "-timeout [arg time]"]] \
    [opt [option "-unix_socket [arg value]"]] \
    [arg url] \
    ]


[para]
Opens a connection to the web server denoted in the [arg url] and
returns (unless a [option -done_callback] is
specified) an [arg id], which might be used later in [cmd "ns_http wait"]
or [cmd "ns_http cancel"] to refer to this request. The command supports
both HTTP and HTTPS URIs.  The request is run in the default task queue
in a dedicated per-queue thread.

[para] The description of the available options is in the section [sectref {OPTIONS}] below.

[call [cmd "ns_http run"] \
    [opt [option "-binary"]] \
    [opt [option "-body [arg value]"]] \
    [opt [option "-body_chan [arg value]"]] \
    [opt [option "-body_file [arg value]"]] \
    [opt [option "-body_size [arg integer]"]] \
    [opt [option "-cafile [arg value]"]] \
    [opt [option "-capath [arg value]"]] \
    [opt [option "-cert [arg value]"]] \
    [opt [option "-done_callback [arg value]"]] \
    [opt [option "-expire [arg time]"]] \
    [opt [option "-headers [arg setId]"]] \
    [opt [option "-hostname [arg value ]"]] \
    [opt [option "-insecure"]] \
    [opt [option "-keep_host_header"]] \
    [opt [option "-keepalive [arg time]"]] \
    [opt [option "-method [arg value]"]] \
    [opt [option "-outputchan [arg value]"]] \
    [opt [option "-outputfile [arg value]"]] \
    [opt [option "-partialresults"]] \
    [opt [option "-proxy [arg value]"]] \
    [opt [option "-raw"]] \
    [opt [option "-response_data_callback [arg value]"]] \
    [opt [option "-response_header_callback [arg value]"]] \
    [opt [option "-spoolsize [arg memory-size]"]] \
    [opt [option "-timeout [arg time]"]] \
    [opt [option "-unix_socket [arg value]"]] \
    [arg url] \
    ]

[para]
Sends an HTTP or HTTPS request and waits for the result.  The command [cmd "ns_http run"]
is similar to [cmd "ns_http queue"] followed by [cmd "ns_http wait"].
The HTTP request is run in the same thread as the caller.

[para] The description of the available options is in the section
[sectref {OPTIONS}] below.
The result value is described in [sectref {RETURN VALUE}].


[call [cmd "ns_http stats"] [opt [arg id]]]

Returns statistics from the currently running request in the form of
a list of Tcl dictionaries.  If the optional [arg id] was specified, just
one dictionary containing details about the requested task will be
returned, or empty if the task cannot be found. Otherwise, a list of
dictionaries will be returned.
The returned dictionary contains the following keys:
[term task], [term url], [term requestlength], [term replylength],
[term sent], [term received], [term sendbodysize], [term replybodysize],
[term replysize].
The [term task] returns the ID of the HTTP task.
The [term url] returns the URL for the given task.
The [term requestlength] returns the length of the complete HTTP request,
including header line, all the headers plus the optional request body.
The [term replylength] returns the value of the content-length as
returned by the remote. This can be zero if the length of returned data
is not known in advance.
The member [term sent] returns the number of bytes sent to the remote. This includes
the header line, all the headers plus optional request body.
The member [term received] contains the number of bytes received from the remote. This
includes the status line, all the headers plus the optional reply body.
The member [term sendbodysize] returns the number of bytes of the request body sent
to the remote so far.
The member [term replybodysize] returns the number of bytes of the reply body received
from the remote so far.
The member [term replysize] returns the number of bytes of the body received from the
remote so far. The difference to the [term replybodysize] is that this element
tracks the number of body bytes prior to the optional deflate step for compressed contents,
whereas the member [term replybodysize] tracks the number of body bytes of the
deflated contents.  For uncompressed reply content, both [term replysize]
and [term replybodysize] will have the same value.

[list_begin arguments]
[arg_def "" id]
Optional ID of the HTTP request to get statistics for.
[list_end]

[call [cmd "ns_http taskthreads"] \
    [opt [option "-timeout [arg time]"]] \
    [arg id] \
  ]

Returns a list of Tcl dictionaries containing information about the state of the
ns_http task threads. Every dict in this list contains the keys
[term name], [term running], and [term requests], where the
[term name] is the name of the task thread, [term running] is the
number of currently running ns_http tasks, and [term requests]
is the total number of requests processed so far by this task thread.

[para] In the example below, there are two task queues defined.
[example_begin]
 % ns_http taskthreads
 {name tclhttp.0 running 42 requests 21925} {name tclhttp.1 running 37 requests 25739}
[example_end]

The total number of task threads can be tailored via the configuration
parameter [term nshttptaskthreads] as shown below.

[call [cmd "ns_http wait"] \
    [opt [option "-timeout [arg time]"]] \
    [arg id] \
  ]

[para]
Waits for the queued command specified by the [term id] returned from
[cmd "ns_http queue"] to complete.


The specified [option -timeout] specified the maximum duration of
the request to complete. The time can be specified
in any supported [cmd ns_time] format.

[para]
On success, [cmd "ns_http wait"] returns the same dictionary as the
[cmd "ns_http run"]. On error, leaves a descriptive error message
in the interpreter result. On timeout, sets the Tcl [variable ::errorCode]
variable to NS_TIMEOUT in addition to leaving the error message.

The result value is described in [sectref {RETURN VALUE}].


[list_begin arguments]
[arg_def "" id]
ID of the HTTP request to wait for.
[list_end]

[list_end]

[section OPTIONS]

[list_begin options]

[opt_def -binary]
transmit the content in binary form (as a Tcl byte-array) no matter
what the content-type specifies.

[opt_def -body [arg body]]
transmit the content of the passed string as the request body.
This option is mutually exclusive with [option -body_file] and [option -body_chan].
The implementation will try to guess the "content-type" of the body by checking
the type of the passed [option body].

[opt_def -body_chan [arg value]]
transmit the content with the specified Tcl channel, which must be opened for
reading, as the request body. The channel must be in blocking mode and
should be seekable (unless the [option -body_size] is specified).
This option is mutually exclusive with [option -body] and [option -body_file].
Caller should put "content-type" header in passed [option -headers] set
since the implementation cannot guess the correct value. If none found,
the "application/octet-stream" will be assumed.
For [cmd "ns_http queue"] command, the [option -body_chan] channel will be
dissociated from the current interpreter/thread and the ownership will be
transferred to the thread that runs the request. Upon [cmd "ns_http wait"]
the channel is tossed back to the running interpreter and can be manipulated.
It is the caller's responsibility to close the channel when not needed any more.
The implementation will not do that (see [cmd "ns_http cleanup"] for exception).

[opt_def -body_file [arg value]]
transmit the file with the specified filename as the request body.
This option is mutually exclusive with [option -body] and [option -body_chan].
The implementation will try to guess the "content-type" of the body by checking
the extension of the passed-in [option fn].

[opt_def -body_size [arg integer]]
specifies the expected size of the data which will be sent as the HTTP
request body in bytes. This option must be used when sending body data via Tcl
channels, which are not capable of seeking. It is optional if sending
body data from memory or from a named file.

[opt_def -cafile [arg value]]
specifies for HTTPS requests a PEM file containing certificates to
validate the peer server (unless the option [option -insecure] is used). All
certificates in this file are trusted.  Typically, the file
has the name [term ca-bundle.crt] and contains the top-level certificates.
When the specified filename is not on an absolute location, the file is
assumed to be in the home directory of NaviServer. The default value
is [term ca-bundle.crt], but can be altered in the [sectref {CONFIGURATION}] file.
For more details, see
[uri https://docs.openssl.org/master/man3/SSL_CTX_load_verify_locations/ "SSL_CTX_load_verify_locations"]
from the OpenSSL documentation.

[opt_def -capath [arg value]]
specifies for HTTPS requests a directory containing trusted certificates
to validate the peer server (unless the option
[option -insecure] is used).
Each file in this directory must be in PEM format and must contain
exactly one certificate. When the specified directory is not an
absolute path, it is assumed to be in the home directory of NaviServer.
The default value is [term certificates], but can be altered in the [sectref {CONFIGURATION}] file.
For more details, see
[uri https://docs.openssl.org/master/man3/SSL_CTX_load_verify_locations/ "SSL_CTX_load_verify_locations"]
from the OpenSSL documentation.

[opt_def -cert [arg value]]
used for HTTPS URIs to use the specified client certificate. The
certificates must be in PEM format and must be sorted starting with
the subject's certificate (actual client or server certificate),
followed by intermediate CA certificates if applicable, and ending at
the highest level (root) CA.

[opt_def -connecttimeout [arg time]]
time to wait for connection setup and socket readable/writable state.
The time can be specified in any supported [cmd ns_time] format. When a
domain name is resolved against several IP addresses, the provided
timeout span is used for every IP address. When
[option -connecttimeout] is not specified, the value of
[option -timeout] is used.

[opt_def -done_callback [arg value]] this callback will be executed as
Tcl script when the request is completed.  The provided [arg call] is
appended with two arguments, a flag indicating a Tcl error and a data
argument. When the flag has the value of 0, the call was successful,
and the same dict as returned by [cmd "ns_http run"] is provided as
data. When the flag is 1, something went wrong. When the call was
started with the option [option -partialresults], the data argument is
as well the result dict. Otherwise, an error message is provided as
dict.  When [option -done_callback] is used, [cmd "ns_http queue"]
returns empty and the user has no further control (wait, cancel) on
the task.

[opt_def -expire [arg time]]
time to wait for the whole request to complete. Upon expiry of this timer,
request processing is unconditionally stopped, regardless of whether the
connection or some data to read/write is still pending. The time can be
specified in any supported [cmd ns_time] format.

[opt_def -headers [arg setId]]
headers is the ns_set ID containing the additional headers to include
in the request.

[opt_def -hostname [arg value]]
used for HTTPS URIs to specify the hostname for the server
certificate. This option has to be used, when the host supports
virtual hosting, is configured with multiple certificates and supports
the SNI (Server Name Indication) extension of TLS.

[opt_def -insecure]
used for HTTPS URIs to specify that the server certificate should NOT be
verified. By default, the identity of the peer server is checked
for all HTTPS requests. If the verification process fails, the TLS/SSL handshake is
terminated with an alert message containing the reason for
the verification failure.
The default for this parameter can be specified in the [sectref {CONFIGURATION}] file.

[opt_def -keep_host_header]
allows the Host: header field for the request to be passed in via
the [option -headers] argument, otherwise it is overwritten.

[opt_def -keepalive [arg time]] when specified, set the keep-alive timeout
of the connection to the specified duration. The time can be
specified in any supported [cmd ns_time] format.

[opt_def -method [arg value]]
Standard HTTP/HTTPS request method such as GET, POST, HEAD, PUT etc.

[opt_def -outputchan [arg value]]
receive the response content into the specified Tcl or [cmd ns_connchan]
channel. When a Tcl channel is used, it must be opened for writing
and mist be in blocking mode.
The option [option -outputchan] is mutually exclusive with [option -outputfile].
For [cmd "ns_http queue"] command, the [option -outputchan] channel will be
dissociated from the current interpreter/thread and the ownership will be
transferred to the thread that runs the request. Upon [cmd "ns_http wait"]
the channel is tossed back to the running interpreter and can be manipulated.
It is the caller responsibility to close the channel when not needed any more.
The implementation will not do that (see [cmd "ns_http cleanup"] for exception).

[opt_def -outputfile [arg value]]
receive the response content into the specified filename.
This option is mutually exclusive with [option -outputchan].

[opt_def -partialresults] When specified, return also partial
results. Additionally, no exception is raised and the error is
returned in the dict member [term error].  This option is useful to
inspect partial results also when e.g. the server terminates the
connection unexpectedly.

[opt_def -proxy [arg value]]
Controls whether to handle HTTP/HTTPS requests over an intermediate proxy.
The argument must be a valid Tcl dictionary with (at least) the following
keys: [term host], [term port]. Optionally, a [term tunnel] boolean key
may be specified.
The [term host] must hold the hostname or IP address of the proxy
server. The [term port] is the TCP port of the proxy server. If [term host]
is omitted, no other keys from the dictionary are evaluated and the proxy
connection is suppressed; the request is handled as if the option was
not specified.  If, however, [term host] is specified, it will require
the presence of the [term port], otherwise an error is thrown.
The optional [term tunnel] controls when to use the HTTP-tunnel facility.
Without it, or if set to false, the HTTP connections are handled over
the caching-proxy and HTTPS connections over the HTTP-tunnel.
With the [term tunnel] set to true, the HTTP-tunneling is used for both
HTTP and HTTPS connections.
Currently, no proxy authentication is supported. This will be added later.

[opt_def -raw]
delivers the content as-is (unmodified), regardless of the content
encoding. This option is useful for tunneling modes.


[opt_def -response_data_callback]

Specifies a Tcl callback to be invoked whenever a block of response
data is received during an HTTP client request. The callback adds a
single argument to the provided command, which is a Tcl dictionary
containing the following keys:

[list_begin itemized]
[item] [const headers]: ns_set containing the response header fields.
[item] [const data]: received data block (part of the response).
[item] [const outputchan]: (optional) — the name of the output channel, if provided.
[list_end]

The callback's return value is interpreted as follows:

[list_begin itemized]
    [item] Returning ``TCL_OK`` continues normal processing of the
    received data, respecting the output options.
    [item] Returning ``TCL_BREAK`` (e.g., via [const "return -code break"]) cancels further processing of the response data.
[list_end]

This callback facilitates streaming response processing, allowing
applications to process incremental results - such as those produced by
generative AI services - immediately as they become available.

[example_begin]
 proc my_response_data_callback {x d} {
   dict with d {
     # Log messages containing the length of the received data chunks
     ns_log notice received [lb]string length $data[rb] bytes
   }
 }
 
 # Example invocation
 ns_http run -response_data_callback ::my_response_data_callback https://orf.at
[example_end]

[opt_def -response_header_callback [arg value]]

Specifies a Tcl callback to be invoked when the response headers from the target of the
[cmd ns_http] request are received. The argument is a Tcl command,
which is called with an additional argument containing response
data in form of a Tcl dictionary, containing the following keys:

[list_begin itemized]
[item] [const status]: The received HTTP response status code of the response.
[item] [const phrase]: The HTTP response status phrase.
[item] [const headers]: ns_set containing the response header fields.
[item] [const outputchan]: (optional) The output channel name, if specified.
[list_end]

For example, in a reverse proxy configuration, an [cmd ns_connchan]
channel can be specified at the start of the request to a backend
server via [option -outputchan], and when the response header fields from
the backend server are received, these can be modified and sent via
connchan back to the client.

[example_begin]
 proc my_response_header_callback {d} {
   dict with d {
     set response "HTTP/1.1 $status $phrase\r\n"
     foreach {key value} [lb]ns_set array $headers[rb] {
        append response "$key: $value\r\n"
     }
     append response \r\n
     ns_connchan write $outputchan $response
   }
 }
[example_end]

[opt_def -spoolsize [arg memory-size]]
In case the result is larger than the given value, it will be spooled to a
temporary file, a named file (see [option -outputfile]) or the Tcl
channel (see [option -outputchan]).
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB).

[opt_def -timeout [arg time]]
time to wait for socket interactions (read/write). The value is used
as well as a default value for [option -connecttimeout].
The time can be specified in any supported [cmd ns_time] format. When a
domain name is resolved against several IP addresses, the provided
timeout span is used for every IP address. The default timeout is 5s.

[opt_def -unix_socket [arg value]]
When specified, this parameter should contain the Unix Domain Socket
(UDS) to connect to. For example, when a web server is listening on a Unix domain socket
named [const "/tmp/http.socket"], ns_http can be used as the
following, where the URL is still used for determining the host:
request header field.

[example_begin]
 % ns_http run -unix_socket /tmp/http.socket http://foo.org/
[example_end]


[list_end]

[section {RETURN VALUE}]

The commands [cmd "ns_http run"] and [cmd "ns_http wait"] return
a dictionary containing the following elements:

[list_begin itemized]
[item] [const status]: The received HTTP response status code of the response.
[item] [const time]: The elapsed request time in [cmd ns_time] format.
[item] [const headers]: ns_set containing the response header fields.

[item] [const body]:       (optional) The received body of the response in form of a string.
[item] [const body_chan]:  (optional) The input channel name for the body, if specified.
[item] [const error]:      (optional) Error message.
[item] [const file]:       (optional) The received body of the response in form of a file.
[item] [const https]:      (optional) TLS negotiation results for HTTPS requests
[item] [const outputchan]: (optional) The output channel name, if specified.
[list_end]

The first three members are always returned, the other elements are
conditional.  When none of the output options were used, the result is
received either in memory (member [const body]) or in a spool file
(member [const file]). This decision depends on the value of
[option -spoolsize]. Both members are missing in the result dictionary, when
[const outputchan] was used.


[section EXAMPLES]

First, a minimal example to retrieve a page with the HTTP GET method:
[example_begin]
 % http run http://www.google.com
 status 200 time 0:174146 headers d0 body { ... }
[example_end]

Here is the same example, using separate [cmd "ns_http queue"] and [cmd "ns_http wait"] commands.
[example_begin]
 % ns_http queue http://www.google.com
 http0
 
 % ns_http wait http0
 status 200 time 0:177653 headers d0 body { ... }
[example_end]


[para]
The second example is a code snippet making a request via HTTPS
(note that HTTPS is supported only when NaviServer was compiled
with OpenSSL support).

[example_begin]
 % set result [lb]ns_http run https://www.google.com[rb]
 % dict get $result status
 302
[example_end]

If the returned data is too large to be retained in memory,
you can use the [option -spoolsize] to control when the
content should be spooled to file. The spooled filename
is contained in the resulting dict under the key [term file].

[example_begin]
 % set result [lb]ns_http run -spoolsize 1kB https://www.google.com[rb]
 % dict get $result file
 /tmp/http.83Rfc5
[example_end]

For connecting to a server with virtual hosting that provides
multiple certificates via SNI (Server Name Indication) the
option [option -hostname] is required.

[para]

The third example is a code snippet making a POST requests via
HTTPS and provides url-encoded POST data. The example sets a
larger timeout on the request, provides requests headers and
returns reply-headers.

[example_begin]
 ##################################################
 # Construct POST data using
 # query variable "q" with value "NaviServer"
 ##################################################
 set post_data [lb]join [lb]lmap {key value} {
     q NaviServer
 } {
   set _ "[lb]ns_urlencode $key[rb]=[lb]ns_urlencode $value[rb]"
 }[rb] &[rb]
 
 ##################################################
 # Submit POST request with provided "content-type"
 # to the "httpbin.org" site using HTTPS
 ##################################################
 set requestHeaders [lb]ns_set create headers "content-type" "application/x-www-form-urlencoded"[rb]
 
 set r [lb]ns_http run -method POST \
   -headers $requestHeaders \
   -timeout 10.0 \
   -body $post_data \
   https://httpbin.org/anything[rb]
 
 ##################################################
 # Output results from the result dict "r"
 ##################################################
 ns_log notice "status [lb]dict get $r status[rb]"
 ns_log notice "reply [lb]dict get $r [rb]"
 ns_log notice "headers [lb]dict get $r headers[rb]"
[example_end]

The fourth example is a code snippet that sets a larger timeout on the
request, provides an ns_set for the reply headers, and spools
results to a file if the result is larger than 1000 bytes.

[example_begin]
 set requestHeaders [lb]ns_set create headers Host localhost[rb]
 
 set h [lb]ns_http queue -timeout 10.0 http://www.google.com[rb]
 ns_http wait -result R -headers $requestHeaders -status S -spoolsize 1kB -file F $h
 
 if {[lb]info exists F[rb]} {
   ns_log notice "Spooled [lb]file size $F[rb] bytes to $F"
   file delete -- $F
 } else {
   ns_log notice "Got [lb]string length $R[rb] bytes"
 }
[example_end]

The next example is for downloading a file from the web into a named file
or passed Tcl channel. Note the [option -spoolsize] of zero,
which will redirect all received data into the file/channel.
Without the [option -spoolsize] set, all the data would be
otherwise stored in memory.

[example_begin]
 % ns_http run -outputfile /tmp/reply.html -spoolsize 0 http://www.google.com
 status 302 time 0:132577 headers d2 file /tmp/reply.html
[example_end]

[example_begin]
 % set chan [lb]open /tmp/file.dat w[rb]
 % ns_http run -outputchan $chan -spoolsize 0 http://www.google.com
 status 302 time 0:132577 headers d2 outputchan file22
 
 % close $chan
[example_end]


[section CONFIGURATION]

The behavior of [cmd ns_http] can be influenced by optional settings
in the NaviServer configuration file. The behavior can be tailored
partially globally (for all servers) and per server
definition. Globally, the number of threads ns_http threads can be
configured. These threads are used, when the request is started with
[cmd "ns_http queue"] or [option "-done_callback"] are used.

[example_begin]
 #---------------------------------------------------------------------
 # Global NaviServer parameters
 #---------------------------------------------------------------------
 ns_section ns/parameters {
    # ...
    # Configure the number of task threads for HTTP client requests
    # via ns_http. Per task thread, a separate queue is defined. For
    # common (Internet) usage, the default value of 1 is fully
    # sufficient.  For high-speed file uploads/downloads (10/100G
    # networks, fast I/O) the performance might be increased by
    # defining multiple task threads.
    #
    #ns_param    nshttptaskthreads  2     ;# default: 1
    # ...
 }
[example_end]

On the per-server configuration level, one can specify the default
keep-alive timeout for outgoing HTTP requests, security default for
peer server certificate validation, and the logging behavior. When
logging is activated, the log file will contain information similar to
the access.log of NaviServer (see [cmd nslog] module), but for HTTP
client requests.



[example_begin]
 #---------------------------------------------------------------------
 # HTTP client (ns_http, ns_connchan) configuration
 #---------------------------------------------------------------------
 ns_section ns/server/$server/httpclient {
   #
   # Set default keep-alive timeout for outgoing ns_http requests
   #
   ns_param    keepalive       5s       ;# default: 0s
 
   #
   # Security configuration:
   # See: [uri ../../manual/files//admin-config.html#subsection13 "HTTP client security configuration"]
   # ...
 
   #
   # Configure logging options for outgoing ns_http requests
   #
   ns_param     logging          on       ;# default: off
   ns_param     logfile          httpclient.log ;# default: [lb]ns_info home[rb]/logs/httpclient.log
   ns_param     logrollfmt       %Y-%m-%d ;# format appended to log filename
   #ns_param    logmaxbackup     100      ;# 10, max number of backup log files
   #ns_param    logroll          true     ;# true, should server log files automatically
   #ns_param    logrollonsignal  true     ;# false, perform roll on a sighup
   #ns_param    logrollhour      0        ;# 0, specify at which hour to roll
 }
[example_end]


[see_also ns_httptime ns_connchan ns_time ns_set ns_urlencode nslog]
[keywords "global built-in" HTTP-client HTTP HTTPS nssock \
        logging spooling SNI configuration nslog TLS certificate PEM]

[manpage_end]
