[include version_include.man]
[manpage_begin ns_sockselect n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Determine processable channels}]

[description]
[cmd ns_sockselect] uses a select() call to determine which channels are readable, writable,
or have exceptional conditions. [cmd ns_sockselect] returns a list of
three lists channels, readable, writable, exception channels.

The [option -timeout] option specifies the length of time to wait in seconds for ns_sockselect
to return before timing out.

The arguments [arg rfds], [arg wfds], [arg efds] are lists of channels
for readable, writable, and exception channels.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_sockselect] \
        [opt [option "-timeout [arg time]"]] \
        [arg rfds] [arg wfds] [arg efds]]

[list_end]

[section EXAMPLES]

[example_begin]
 # Start nonblocking connect()'s to www01 through
 # www09.foo.com and remember the read channelId which
 # corresponds to each write channelId.
 
 for {set n 1} {$n < 10} {incr n} {
   set host [lb]format "www%2d.foo.com" $n[rb]
   set fds [lb]ns_sockopen -nonblock $host 80[rb]
   set r [lb]lindex $fds [rb]
   set w [lb]lindex $fds 1[rb]
   set w2r($w) $r
   lappend wfds $w
 }
 
 # All connect()'s are in progress, use select to wait for one or
 # more to become writable in the next two seconds which means 
 # they may have connected.  We're not interested in readable or
 # exception sockets so the corresponding lists are empty
 # (i.e., {}).
 
 set sel [lb]ns_sockselect -timeout 2 {} $wfds {}[rb]
 
 # Select returned - get the sockets ready to write to.
 
 set wfds [lb]lindex $sel 1[rb]
 
 # Use ns_sockcheck to see if the sockets actually connected and
 # didn't become writable because the connect() failed (e.g., no
 # Web server was running on port 80 on the corresponding machine).
 # Note that the wfds list may be empty, meaning all sockets timed
 # out on connect.
 
 set ok ""
 
 foreach w $wfds {
   if [lb]ns_sockcheck $w[rb] {
     # Socket is connected - send a GET HTTP request.
     lappend ok $w
     puts $w "GET /index.htm HTTP/1.0\r\n\r"
 
     # The flush is important, otherwise the remote
     # server may never see the data.
     flush $w
   }
 }
 
 # Get the read ids for each socket which we sent the GET request to.
 
 foreach w $ok {
   lappend rfds $w2r($w)
 }
 
 # Use select again to wait for the read sockets to have data
 # available in response to the GET request.
 
 set sel [lb]ns_sockselect -timeout 2 $rfds {} {}[rb]
 set rfds [lb]lindex $sel 0[rb]
 
 # Read the pages which came back.
 
 foreach r $rfds {
   if [lb]ns_sockcheck $r[rb] {
     set page($r) [lb]read $r[rb]
   }  
 }
 
 # Close all the sockets
 
 foreach w [lb]array names w2r[rb] {
   close $w
   close $w2r($w)
 }
[example_end]


[see_also nsd]
[keywords "global built-in" NaviServer socket]
[manpage_end]



