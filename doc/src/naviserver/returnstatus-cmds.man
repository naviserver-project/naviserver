[include version_include.man]

[manpage_begin returnstatus-cmds n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {Return a complete HTTP status message}]

[description]

These commands sends a complete response to the client using a variety of
different HTTP status codes. On contrary to the lower level commands
like [cmd ns_respond] or [cmd ns_return] these commands are designed to ease consistent
behavior in common success, redirect or error situations.

Like with all response commands, all queued headers, such as those set by
[cmd ns_setcookie] (see [cmd ns_cookie]) or via [cmd "ns_conn outputheaders"] and
[cmd "ns_set put"], are added to the default headers and sent in the response.

[para]
These commands return 0 (zero) if the response was successfully
sent to the client and 1 if the write to the connection failed.
They will raise an error if no connection is available, e.g., when they are called from
a background thread without connection, or when a response has already been sent.


[para]
After these command finish the connection is returned to the driver thread to be
closed or monitored for keep-alive. The calling connection thread can then
continue to execute code, e.g., to cleanup resources or for logging.

[para]
Custom error pages may be specified in the server configuration file to
override the default HTML message which is returned, for those commands which
return one.

[para]
NOTE: A script calling one of the response sending commands does not end at
the time these commands are invoked.  When used in an ADP page,
[cmd ns_adp_abort] or [cmd ns_adp_return] should be called to end script
processing after e.g. [cmd ns_returnredirect]. Some frameworks
based on NaviServer have custom commands for this purpose. OpenACS
uses [term ad_script_abort].


[section COMMANDS]
[list_begin definitions]


[call [cmd ns_returnok] ]

Sends a response with status code [term 200], [term OK] to the
client with an empty body. Use [cmd ns_returnnotice],
[cmd ns_response], or [cmd ns_return] to send results with
this status code to the client.


[call [cmd ns_returnmoved] \
        [arg location] ]

Sends a response with status code [term 301], [term Moved] to the
client.  The response header field [term Location] is supplied with
the value the provided [arg location].  The [arg location] can be a
relative or absolute URI.  When [cmd ns_locationproc] is configured,
its result will be used.

[para]
Use this response to signal that the resource was permanently moved to
a new location. For temporary redirects, use [cmd ns_returnredirect].


[call [cmd ns_returnredirect] \
        [arg location] ]

Sends a response with status code [term 302], [term Found] to the
client. The response header field [term Location]
is supplied with the value the provided [arg location].
The [arg location]  can be a relative or absolute URI.
When [cmd ns_locationproc] is configured, its result will be used.

[para]
Use this response to signal that the resource has temporarily moved to a new location. For
permanent redirects, use [cmd ns_returnmoved].


[call [cmd ns_returnbadrequest] \
        [arg reason] ]

Sends a response with status code [term 400], [term "Bad Request"] using the
given [arg reason] in the HTML message.

[para]
Use this response to signal that the client sent a malformed request and should
not try again without modifications.



[call [cmd ns_returnunauthorized]]

Issues a [const "401 Unauthorized"] response to the client.
[list_begin itemized]
[item] If a [const WWW-Authenticate] header is already present in the
  connection’s output headers ([const "ns_conn outputheaders"]), it is left
  intact.

[item] Otherwise, the command adds a header of the form
[const {WWW-Authenticate: Basic realm="<REALM>"}]

where [const <REALM>] is selected in this order:
[list_begin itemized]
  [item] the connection’s local‐storage value under key [const auth:realm], if set
  [item] otherwise the configured [const realm] parameter from the server section.
[list_end]

[para]
Use [cmd ns_returnunauthorized] whenever you need to challenge a
client for HTTP Basic authentication. Most browsers will, upon receipt
of a 401 with a [const WWW-Authenticate] header, pop up a login dialog
prompting the user to enter their [term username] and [term password].


[call [cmd ns_returnforbidden] ]

Sends a response with status code [term 403], [term Forbidden].

[para]
Use this response to signal that the authentication information the client
supplied are insufficient to grant them access to the requested URL.


[call [cmd ns_returnnotfound] ]

Sends a response with status code [term 404], [term "Not Found"].

[para]
Use this response to signal that the content the client requested could not be
located given the URL that was requested.



[call [cmd ns_returnunavailable] ]

Sends a response with status code [term 503], [term "Unavailable"].

[para]
Use this response to signal that the server is too busy to deliver the requested
resource or is undergoing maintenance.



[call [cmd ns_returnerror] \
        [arg status] \
        [arg message] ]

Sends a response with the given [arg status] code and the error [arg message]
wrapped in HTML.

[para]
Use this command to return an HTTP status response to the client which is not
covered by the above commands, or to customize the HTML message.



[call [cmd ns_returnnotice] \
        [arg status] \
        [arg title] \
        [arg message] ]

Sends a response with the given [arg status] code and an HTML message with the
given [arg title] and [arg message].

[para]
Use this command to return an arbitrary response to the client. Some HTTP
responses are expected not to return body content. Check RFC 2616 for details.

[para]
NB: You should be careful what you put in the [arg title] and [arg message].
It may be tempting to use data which the client has sent you such as a form
variable, but it may not be what you expect.

[list_end]


[section CONFIGURATION]

The body of the response which is returned for a variety of status codes can be
customized by registering a new resource which should be returned in its place.
The new resource may be a static, Tcl or ADP page, or a registered procedure
or ADP. These redirects are used for providing customized (templated)
error pages.

[example_begin]
 [cmd ns_section] "ns/server/server1/redirects" {
   [cmd ns_param]   404    /notfound.adp
   [cmd ns_param]   503    /busy.html
 }
[example_end]

[para]
The realm used for HTTP Basic authentication is set server-wide:

[example_begin]
 [cmd ns_section] "ns/server" {
   [cmd ns_param]   realm  "Example"
 }
[example_end]



[section EXAMPLES]

Use a custom error message to notify users when the hamsters which turn the
wheels that run the server are on lunch break:

[example_begin]
 ns_register_proc GET /service {
 
   set hour [lb]clock format [lb]clock seconds[rb] -format %H[rb]
 
   if {$hour >= 12 && $hour <= 13} {
      ns_returnerror 503 "Gone for lunch. Back at 2pm."
      return
   }
 
   [cmd ns_returnok]
 }
[example_end]


[see_also ns_return ns_internalredirect ns_conn ns_cookie ns_locationproc]
[keywords "server built-in" return redirect response status configuration nssock]

[manpage_end]
