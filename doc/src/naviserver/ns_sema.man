[include version_include.man]
[manpage_begin ns_sema n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Operate on semaphore-like objects}]

[description]

This command provides a mechanism to manipulate semaphore-like objects
but are not inter-process capable like true semaphores.  They are actually
implemented with a mutex and a counter.  The allowed options (which may be abbreviated) are:


[section {COMMANDS}]

[list_begin definitions]

[call [cmd  "ns_sema create"] [opt [arg count]]]

Initializes a new semaphore object. The [arg count] argument specifies
the initial value of the semaphore's counter. If [arg count] is not
provided, the counter is initialized to zero. The command returns a
handle for the semaphore object to be use by the other commands.


[call [cmd  "ns_sema destroy"] [arg handle]]

Destroys the semaphore [arg handle] and frees any resources it was
using. Note: In the current implementation, this command is
effectively a no-op; the semaphore will continue to exist until the
server shuts down.


[call [cmd  "ns_sema release"] [arg handle] [opt [arg count]]]

Releases the semaphore [arg handle] by incrementing the counter by one by default
or by [arg count] otherwise.  The thread will wake any threads blocking on this
semaphore when [arg count] is equal to one.

[para] This is what is commonly referred to as "semaphore up".

[call [cmd  "ns_sema wait"] [arg handle]]

Waits for a semaphore [arg handle] to be greater than zero.  Will block the thread until
this is true.  Decrements the counter by one when the counter is greater than zero.

[para] This is what is commonly referred to as "semaphore down".

[list_end]

[section EXAMPLES]

Using a semaphore to synchronize threads

[example_begin]
 set sema [lb]ns_sema create[rb]
 
 # Start a thread that waits for the semaphore
 ns_thread begin [lb]subst {
    ns_log notice "... thread waits for $sema"
    ns_sema wait $sema
    ns_log notice "... thread proceeds"
 }[rb]
 
 # Release the semaphore in two seconds to allow the waiting thread to proceed
 ns_sleep 2s
 ns_sema release $sema
[example_end]


[see_also ns_cond ns_critsec ns_mutex ns_rwlock ns_thread ]
[keywords "server built-in" semaphore mutex threading synchronization concurrency]


[manpage_end]

