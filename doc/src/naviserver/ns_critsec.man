[include version_include.man]
[manpage_begin ns_critsec n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Operate on critical section objects}]

[description]

The [cmd ns_critsec] command provides a mechanism for creating and
managing critical section objects, which are used for synchronizing
access to shared resources in a multithreaded environment. Critical
sections ensure that only one thread can access a protected code
section at a time, preventing data corruption and ensuring thread
safety.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_critsec create"]]

  Initializes a new critical section object and returns a handle
  ([arg csid]) to it. This handle is used in other [cmd ns_critsec] commands
  to reference the critical section.


[call [cmd "ns_critsec destroy"] [arg csid]]

  Destroys the critical section object identified by [arg csid] and
  frees any resources it was using. NOTE: In the current
  implementation, this command is effectively a no-op; the critical
  section will remain until the server shuts down.


[call [cmd "ns_critsec enter"] [arg csid]]

Enters the critical section [arg csid].  The thread will block if another thread
is already in the critical section.

  Enters the critical section identified by [arg csid]. The actual
  thread will block other threads trying to enter the same critical
  section. If [arg csid] was not created beforehand, it is
  auto-created (not recommended for best practices).

[call [cmd "ns_critsec eval"] [arg csid] [arg script]]

  Evaluates the provided [arg script] inside the critical section
  identified by [arg csid]. This command ensures the script runs with
  exclusive access to the critical section. If [arg csid] was not created
  beforehand, it is auto-created (not recommended for best practices).

[call [cmd "ns_critsec leave"] [arg csid]]

  Leaves the critical section identified by [arg csid]. If a thread has
  entered the critical section multiple times, it must call [arg csid] as
  many times as it entered. When a thread fully exits the critical
  section, a notification is sent to other threads waiting on the same
  critical section.
  
[list_end]

[section EXAMPLES]

  The following example demonstrates the usage of [cmd ns_critsec]
  commands to safely access and modify a shared resource:

[example_begin]
 #
 # Create a critical section and store its handle
 #
 nsv_set . log_critsec [lb]ns_critsec create[rb]
 
 proc log_message {message} {
    set critsec [lb]nsv_get . log_critsec[rb]
    #
    # Enter the critical section to ensure only one thread writes at a time
    #
    ns_critsec enter $critsec
    set timestamp [lb]clock format [lb]clock seconds[rb] -format "%Y-%m-%d %H:%M:%S"[rb]
    set handle [lb]open "shared_log.txt" "a"[rb]
    puts $handle "$timestamp - $message"
    close $handle
    ns_critsec leave $critsec
 }
 
 #
 # Example of multiple threads writing to the log file
 # (assuming, the proc "log_message" was loaded before and is
 # available in all threads)
 #
 ns_thread create -detached { log_message "Thread 1: Starting process" }
 ns_thread create -detached { log_message "Thread 2: Completed task A" }
 ns_thread create -detached { log_message "Thread 3: Encountered an error" }
[example_end]

Explanation:
[list_begin itemized]
[item] The [term log_message] procedure ensures that only one thread at a time writes to the shared log file.
[item] This prevents overlapping or incomplete log entries and ensures log data integrity.
[item] Each thread can safely call [term log_message], and the critical section guarantees exclusive access during the write operation.
[list_end]

[see_also ns_cond ns_sema ns_mutex ns_rwlock ns_thread ]
[keywords "server built-in" threading synchronization concurrency]



[manpage_end]


