[include version_include.man]
[include version_include.man]

[manpage_begin ns_log n [vset version]]
[moddesc   {NaviServer Built-in Commands}]
[titledesc {Global server error log}]

[description]

The running NaviServer process opens a single log file into which all
[emph Notice], [emph Error] etc. messages are logged, whether originating
from the server itself or form Tcl scripts and ADP pages.

[para]
The built-in set of severity levels can be extended. Logging can be
enabled/disabled at run-time per-severity level. Custom filters can be added to
process log messages.




[section COMMANDS]
[list_begin definitions]


[call [cmd ns_log] \
      [arg severity-level] \
      [arg message] \
      [opt [arg "message ..."]] ]

Write a message to the error log file if the given
[arg severity-level] is enabled (see [cmd ns_logctl]).
The [arg message]
arguments are concatenated with connecting spaces. Note that this only
queues messages for the log and does not actually guarantee that the
message is immediately written to the log. The server can be
instructed to queue messages in the cache via [cmd "ns_logctl hold"].

[para]
The following are the predefined values of [arg severity-level].

[list_begin definitions]

[def Notice] Something interesting occurred.  A [term notice] shows
typically a state change, start/end of some jobs, etc.  This level can
be as well used of temporary debugging, but such messages should be
removed after some time.

[def Warning] Something that could mean something bad occurred.  A
[term warning] indicates an unexpected situation, which requires attention
of a developer and a corrective measure in the not-to-distant
future. Usage of deprecated code or code using not following the
engineering guidelines are of such type.

[def Error] Something bad occurred.  An [term error] is a malfunction, that
must be investigated by a developer. An error is an unhandled
exception.  The error.log file should be free of errors.
 
[def Fatal]
Something extremely bad occurred. The server will shut down after
logging this message.

[def Bug]
Something occurred that implies that there is a bug in the code.
This condition could never happen when the code is behaving correctly.

[def Debug]
General debugging.

[def Debug(access)] Mirror access log entries in system log.
[def Debug(cgi)] Debugging for the [cmd nscgi] module.
[def Debug(connchan)] Debugging for [cmd ns_connchan] interactions.
[def Debug(ns:driver)] Debugging for driver (low-level network IO).
[def Debug(nsproxy)] Debugging for [cmd nsproxy] module.
[def Debug(request)] Debugging for request live cycle.
[def Debug(sql)] Debugging for SQL ([cmd nsdb] module).
[def Debug(task)] Debugging for task interface (e.g. [cmd ns_http]).
[def Debug(urlspace)] Debugging for [cmd ns_urlspace] interactions.


[def Dev]
This logging level is typically just activated during development
to introspect the behavior of new code.
Such logging statements are typically removed once development has
reached a stable point.

[list_end]



[call [cmd ns_logctl] \
	  [method count] ]

Returns a count of buffered messages for the current thread. The
message buffering can be turned on subcommand  [method hold].

[call [cmd ns_logctl] \
	  [method flush] ]

[call [cmd ns_logctl] \
	  [method get] ]

Return all buffered log messages, removing them from the buffer without writing them
to the log file.


Write buffered log messages from the current thread to the log file. Do not
disable buffering enabled by [arg hold].

[call [cmd ns_logctl] \
	  [method hold] ]

Buffer log messages originating in the current thread indefinitely. Log messages
are no longer written directly to the server log. Use the subcommand
[method release] to disable buffering.

[call [cmd ns_logctl] \
	  [method peek] ]

Return a copy of any buffered log messages for the current thread.


[call [cmd ns_logctl] \
	  [method release] ]

Write buffered log messages from the current thread to the log file and disable
buffering. Future log messages will not be buffered.

[call [cmd ns_logctl] \
	  [method severities] ]

Return a list of available severity-levels. The result includes the 7 predefined
levels and those created with [cmd ns_logctl] or via C code.

[call [cmd ns_logctl] \
      [method severity] \
      [arg severity-level] \
      [opt "[option -color] [arg color]"] \
      [opt "[option -intensity] [arg intensity]"] \
      [opt [arg bool]] ]

Return true if the given [arg severity-level] is enabled, false if it is
disabled. If [arg bool] is given it enables/disables the given
[arg severity-level] for all future log messages, server-wide.
The options [option -color] and [option -intensity] can be used
to set the coloring when the logfile is colorized. The color can be
[term black], [term red], [term green], [term yellow],
[term blue], [term magenta], [term cyan], [term gray],
or [term default]. Intensity can be [term normal] or [term bright].
The logfile colorization can be controlled by setting
[term logcolorize] in section [term ns/parameters] of the
configuration file.

[para]
If [arg severity-level] does not already exist and more arguments arg given, then the
new severity is created. Future calls to [cmd ns_log] may use new [arg severity-level].

[call [cmd ns_logctl] \
	  [method stats] ]

Return statistics from calls to [cmd ns_log] by severity-level.

[call [cmd ns_logctl] \
	  [method truncate] \
	  [arg count] ]

Discard this thread's buffered messages, leaving [arg count] untouched.

[call [cmd ns_logctl] \
      [method register] \
      [arg script] \
      [opt [arg "script-args ..."]] ]

Register a log filter [arg script] with the given [arg script-args] where
[arg script] should have the signature:
[emph script] [arg severity] [arg timestamp] [arg message] [opt [arg "script-args ..."]].
A [arg handle] will be returned which can be used to unregister the filter script.


[call [cmd ns_logctl] \
      [method unregister] \
      [arg handle] ]

Unregister the previously registered log filter script identified by
[arg handle].



[call [cmd ns_logroll] ]

Roll the server error log. The behavior is independent of the
configuration parameter [emph logroll]. See [cmd ns_rollfile] for
details of log rolling.

[list_end]


[section CONFIGURATION]

The error log is configured globally for the whole server process.

[example_begin]
 [cmd ns_section] ns/parameters
 [cmd ns_param]   ...
[example_end]


The following are valid configuration parameters:

[list_begin definitions]

[def logcolorize]
If true, log entries will be colorized using ANSI color codes
Default: false.

[def logdebug]
If true messages of severity-level [emph Debug] are enabled.
Default: false.

[def logdev]
If true, messages of severity-level [emph Dev] are enabled.
Default: false.

[def logexpanded]
If true, an extra newline is added to each log entry.
Default: false.

[def logmaxbackup]
The number of old error log files to keep around if log rolling is enabled.
Default: 10.

[def lognotice]
If true, messages of severity-level [emph Notice] are enabled.
Default: true.

[def logprefixcolor]
When logcolorize is true, provide a color for the timestamp prefix.
Possible values are:
[term "black red green yellow blue magenta cyan gray default"].
Default: green.

[def logprefixintensity]
When logcolorize is true, provide the intensity for the timestamp prefix.
Possible values are: [term "normal bright"].
Default: normal.

[def logroll]
If true, the log file will be rolled when the server receives a SIGHUP signal.
Default: true.

[def logrollfmt]
When specified, use a timestamp based logroll format based on the
specified time format (e.g. %Y-%m-%d). The timestamp is appended
to the name. When within the granularity two log files are generated
these are numbered.

[def serverlog]
Path to error log file. If the path is not fully qualified it is assumed to be
relative to the server home directory ([lb][cmd ns_info] home[rb]). All the components of
the path must exist. The server will fail to start if the log file cannot be
opened.
Default: logs/nsd.log

[def logsec]
If true, log entries will have seconds timestamps.
Default: true.

[def logthread]
If true, log entries will have thread ids included.
Default: true.

[def logusec]
If true, log entries will have timestamps with microsecond (usec) resolution.
Default: false.

[def logusecdiff]
If true, show time difference since last log entry with microsecond (usec)
resolution. This option is useful for determine latencies with minimal effort.
Default: false.

[list_end]


[section EXAMPLES]

The example below is a snippet taken from sample-config.tcl, which is
included in the NaviServer distribution.

[example_begin]
 ns_section ns/parameters {
   # ...
 
   # Provide name for main server log file:
   ns_param	serverlog       ${homedir}/logs/error.log
 
   #
   # Configuration of serverlog
   #
   # Rolling of logfile:
 
   ns_param	logroll		on
   ns_param	logmaxbackup	100      ;# (default: 10)
   ns_param	logrollfmt	%Y-%m-%d ;# timestamp format appended to serverlog filename when rolled
 
   #
   # Format of log entries:
 
   ns_param	logusec         true     ;# add timestamps in microsecond (usec) resolution (default: false)
   ns_param	logusecdiff     true     ;# add timestamp diffs since in microsecond (usec) resolution (default: false)
   ns_param	logcolorize	true     ;# colorize log file with ANSI colors (default: false)
   ns_param	logprefixcolor	green    ;# black, red, green, yellow, blue, magenta, cyan, gray, default
   ns_param	logprefixintensity normal;# bright or normal
 
   #
   # Severities to be logged (can also be controlled at run time via ns_logctl):
 
   ns_param	logdebug	false    ;# debug messages
   ns_param	logdev		false    ;# development message
   ns_param    lognotice       true     ;# informational messages
 
   # ...
 }
[example_end]

The logging behavior can be tailored at startup or at run time as well
via [cmd ns_logctl] commands, as show below.

[example_begin]
 % [cmd ns_log] notice "Hello World!"
 [lb]21/May/1974:15:30:00[rb][lb]12257.40348b90[rb][lb]-command-[rb] Notice: Hello World!
 
 % [cmd ns_log] notice Hello World!
 [lb]21/May/1974:15:30:01[rb][lb]12257.40348b90[rb][lb]-command-[rb] Notice: Hello World!
[example_end]


Enable debug logging while the server is running.

[example_begin]
 nscp:1> [cmd ns_log] debug testing...
 
 nscp:2> [cmd ns_logctl] severity debug
 0
 nscp:3> [cmd ns_logctl] severity debug -color green true
 1
 nscp:4> [cmd ns_log] debug testing...
 [lb]01/April/1984:11:11:59[rb][lb]12257.40348b90[rb][lb]-nscp:1-[rb] testing...
[example_end]



Report log messages at the end of an ADP page, as well as log them to the error
log file.

[example_begin]
 <h1>An ADP Page</h1>
 
 <%
  [cmd ns_logctl] hold
  # ... do some stuff here ...
 %>
 
 ...
 
 <%
  if {[lb][cmd ns_logctl] count[rb] > 0} {
    [cmd ns_adp_append] "Log messages:"
    [cmd ns_adp_append] "<pre>[lb][cmd ns_logctl] peek[rb]</pre>"
  }
  [cmd ns_logctl] release
 %>
[example_end]



Create a new severity-level.

[example_begin]
 nscp:1> [cmd ns_logctl] severities
 Notice Warning Error Fatal Bug Debug Dev
 
 nscp:2> [cmd ns_log] my:debug "a debug message"
 unknown severity: "my:debug": should be one of: Notice Warning Error Fatal Bug Debug Dev
 
 nscp:3> [cmd ns_logctl] severity my:debug off
 0
 
 nscp:4> [cmd ns_log] my:debug "a debug message"
 
 nscp:5> [cmd ns_logctl] severity my:debug on
 0
 
 nscp:6> [cmd ns_log] my:debug "a debug message"
 [lb]22/Nov/1963:13:25:00[rb][lb]1899.40349b90[rb][lb]-nscp:1-[rb] my:debug: a debug message
[example_end]


[see_also ns_accesslog ns_info ns_rollfile ns_asynclogfile ns_http ns_connchan]
[keywords "global built-in" log path error configuration nscgi nsdb nsproxy]


[manpage_end]
