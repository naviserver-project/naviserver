[include version_include.man]
[manpage_begin   ns_adp_register n [vset version]]
[moddesc  {NaviServer Built-in Commands}]

[titledesc {Creating Custom ADP Tags}]

[description]



 These commands enable the definition of custom ADP tags
 (application-specific, XML-like tags) which are expanded whenever ADP
 content (.adp files or ADP strings processed via [cmd ns_adp_parse])
 is processed. Registering application-specific ADP tags is a means to
 include script-driven, application-specific content in a web page,
 providing an alternative to embedding scripts in ADP pages via the
 [const <%] script [const %>] syntax as described in the
 [uri ../../manual/files/adp-overview.html "ADP Overview"] man page.


[para] Registered tags can either be tags with content -- consisting of
 an opening and a closing tag -- or tags defining empty elements, where
 no closing tag is defined. When both the [arg tag] and the
 [arg endtag] are specified in the registering command, the tags must have
 content; when the [arg endtag] is omitted in the registering command,
 empty elements are defined.


[section COMMANDS]

[list_begin definitions]

[call [cmd ns_adp_registeradp] \
	[arg tag]  \
	[opt [arg endtag]] \
	[arg adpstring]]

 Registers an ADP snippet [arg adpstring] to be included when the
 specified [arg tag] is encountered while parsing the ADP content. The
 [arg tag] argument specifies the tag that will trigger the inclusion
 of the parsed ADP fragment [arg adpstring].

[para] If the optional [arg endtag] argument is specified, the content
 between the opening and closing tags is replaced by the
 [arg adpstring], and the enclosed content is discarded. This behavior
 differs from the other tag registering commands, where the enclosed
 content can be processed or passed to the handler.

[para] Note: Attributes specified in the tag are not accessible when
 using [cmd ns_adp_registeradp]. If you need to access attributes or
 the enclosed content, consider using [cmd ns_adp_registerproc] or
 [cmd ns_adp_registerscript].



[example_begin]
 # Register an ADP snippet to display the current date as tag "printdate"
 ns_adp_registeradp printdate {
      The current date is: <% ns_adp_puts [lb]ns_httptime [lb]ns_time[rb][rb] %>
 }
[example_end]

Usage example in an ADP page:

[example_begin]
 ... header ...
 <p>This is my page.</p>
  <printdate>
 ... footer ...
[example_end]


[call [cmd ns_adp_registerproc] \
	[arg tag] \
	[opt [arg endtag]] \
	[arg proc]]

 Registers a Tcl procedure to be evaluated when the given [arg tag] is
 encountered in ADP content. The procedure [arg proc] will be called
 with a variable number of arguments, one for each attribute value
 provided in the tag. If the [arg endtag] argument is specified, the
 procedure will also receive a final argument containing the content
 enclosed between the tags. No evaluation of the enclosed content is
 performed; it is passed as a single text block.

[para] When the procedure is invoked, its result replaces the tag (and
 the enclosed content, if [arg endtag] is specified) in the output.


[example_begin]
 # Define the tag handler
 proc geturltag {args} {
    # Extract the URL from the last argument
    set url [lb]lindex $args end[rb]
    # Extract any options (attributes)
    set options [lb]lrange $args 0 end-1[rb]
    # Perform an HTTP GET request
    set response [lb]ns_http run {*}$options $url[rb]
    # Return the response body
    dict get $response body
 }
 
 # Register the tag handler with an opening and closing tag
 ns_adp_registerproc geturl /geturl geturltag
[example_end]

Usage example in an ADP page:
[example_begin]
 ... header ...
 <p>This is my page.
 
 <geturl -timeout 3s >https://example.com/hello.html</geturl>
 
 <p>Next paragraph.</p>
 ... footer ...
[example_end]

[para] Note:

 When using this registration command, the attribute values specified
 in the tag are passed as arguments to the Tcl procedure. The
 attribute names are not passed, only their values, and they are
 provided in the order they appear in the tag.

[example_begin]
 proc ::reporttags {args} {
   return $args
 }
 ns_adp_registerproc reporttags  ::reporttags
 
 ns_adp_parse -string {<reporttags CamelCase x=X A=a>}
 # Returns: CamelCase X a
[example_end]


[call [cmd ns_adp_registerscript] \
	[arg tag] \
	[opt [arg endtag]] \
	[arg proc]]

 Registers a Tcl procedure [arg proc] to be evaluated when the given
 [arg tag] is encountered. This command provides access to both the
 attribute names and values, as well as the enclosed content if an
 [arg endtag] is specified.

[para] When the tag is registered with an [arg endtag], the Tcl
 [arg proc] is called with two arguments: first, the enclosed content as a
 string, and second, the [cmd ns_set] with the tag's attributes.
 When registered without an end tag, the proc is called with a single
 argument (the ns_set with the arguments).

[para]
When the tag is parsed, it is replaced by the result of the registered
[arg proc].

[para]

[example_begin]
 # Define the tag handler
 proc onday {string attributes} {
   # Get the 'day' attribute
   set day [lb]ns_set get -nocase $attributes day[rb]
   
   # Check if the current date matches the specified day
   if {[lb]ns_fmttime [lb]ns_time[rb] "%m/%d"[rb] eq $day} {
     return $string
   }
 }
 
 # Register the tag handler with an opening and closing tag #
 ns_adp_registerscript onday /onday onday
[example_end]


Usage example in an ADP page:

[example_begin]
 ... header ...
 <p>This is my page.</p>
 
 <onday day="12/25"><p>Merry Christmas and a Happy New Year</p></onday>
 
 <p>Next paragraph.</p>
 ... footer ...
[example_end]

Note: The major differences between [cmd ns_adp_registerscript] and
[cmd ns_adp_registerproc] are the calling conventions and the passing
of attributes:

[list_begin itemized]
[item] With [cmd ns_adp_registerproc], only the values of the
       attributes are passed to the procedure, without the attribute
       names.

[item] With [cmd ns_adp_registerscript], both attribute names and
       values are available, passed as an [cmd ns_set].

[item] Attributes without a value (no equals sign) inside the tag are
       assigned their name as the value in the [cmd ns_set].
[list_end]

[para] This command is useful when you need to access both attribute
 names and values, or when you need to process the enclosed content.

[example_begin]
 proc ::reporttags {attributes} {
   # Convert the ns_set to a list for display
   ns_set array $attributes
 }
 ns_adp_registerscript reporttags  ::reporttags
 
 ns_adp_parse -string {<reporttags CamelCase x=X A=a>}
 # Returns: CamelCase CamelCase x X A a
[example_end]



[para]
The following is a simple way of handling conditional content in ADPs:



[example_begin]
 # Store content in a global variable
 proc remember {input tagset} {
   set tagname [lb]ns_set get -nocase $tagset name[rb]
   if {$tagname eq ""} {
     set ::_adp_memory($tagname) $input
     return ""
   } else {
     return $input
   }
 }
 
 # Retrieve and parse stored content
 proc recall {name} {
   if {[lb]info exists ::_adp_memory($name)[rb]} {
     set parsecommand [lb]list ns_adp_parse -string[rb]
     lappend parsecommand $::_adp_memory($name)
     ns_adp_puts -nonewline [lb]uplevel $parsecommand[rb]
   } else {
     ns_log Error "[lb]ns_adp_argv 0[rb]: Unable to recall"
   }
 }
[example_end]

If the preceding Tcl has been executed (perhaps during server startup),
then the following ADP fragment displays the results of a
database query in a table, or shows "No rows in
result." if there are no rows:

[example_begin]
 <%
  set rows {}
  set db [lb]ns_db gethandle[rb]
  ns_db exec "select somecolumn from sometable"
  set row [lb]ns_db bindargs $db[rb]
  while {[lb]ns_db getrow $db $row[rb]}  {
      lappend rows [lb]ns_set get $row "somecolumn"[rb]
  }
  ns_db releasehandle $db
 %>
 
 <remember name="has-rows_header"> <table> </remember>
 <remember name="hasrows_rows"> <tr><td><%=$column%></td></tr> </remember>
 <remember name="hasrows_footer"> </table> </remember>
 No rows in result.
 <remember name="norows">
 
 <%
  if {[lb]llength $rows[rb] > 0}  {
    recall "hasrows_header"
    foreach row $rows {
      set column $row
      recall "hasrows_rows"
    }
    recall "hasrows_footer"
  } else {
    recall "norows"
  }
 %>
[example_end]

 In this example, the `remember` procedure stores different parts of
 the output, and the `recall` procedure retrieves and processes them
 conditionally based on whether there are rows from the database
 query.

[list_end]

[see_also ns_register ns_adp ns_adp_include ns_set]
[keywords "server built-in" ADP tag "custom tags"]

[manpage_end]

