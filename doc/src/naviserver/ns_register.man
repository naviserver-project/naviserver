[include version_include.man]
[manpage_begin ns_register n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Register Tcl/ADP handlers}]

[description]
This document describes various command to bind Tcl code and/or
ADP-pages to URL patterns.

[section COMMANDS]

[list_begin definitions]

[call [cmd ns_register_adp] \
     [opt [option -noinherit]] \
     [opt [option "-expires [arg time]"]] \
     [opt [option "-options [arg options]"]] \
     [opt --] \
     [arg method] \
     [arg url] \
     [opt [arg file]] ]

 Requests matching the specified HTTP [arg method] and [arg url] will
 trigger the ADP page request handler. If [arg file] is provided, that
 file is used as the specific ADP page for all matching requests;
 otherwise, the ADP page is determined at request time using
 [cmd ns_url2file].

[para]

 This command functions similarly to [cmd ns_register_tcl] but
 registers an ADP file instead of a Tcl script.

[para]

 Use [cmd ns_unregister_op] to unregister an ADP request (described below).

[call [cmd ns_register_fastpath] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg method] \
	[arg url]]

 Registers the specified [arg url] to be processed by the fast path
 subsystem. All matching requests will be served by the
 corresponding .adp file if it can be resolved. This option is useful
 when no global fast path handler is installed.

[para]

 Note: The [arg method] argument is limited for this command to GET, POST, or HEAD.

[call [cmd ns_register_filter] \
	[opt [option -first]] \
	[opt --] \
	preauth|postauth|trace \
	[arg method] \
	[arg urlpattern] \
	[arg script] \
	[opt [arg "arg ..."]]]

 Registers a Tcl filter script for the specified HTTP method and URL
 pattern. When a request matches the given method and URL (using
 glob-style matching), the registered [arg script] is invoked. The
 script is called with an extra argument indicating the filter
 stage, followed by any additional arguments specified at
 registration. If the [option -first] flag is used, the filter is
 added at the beginning of the filter list; otherwise, it is appended
 to the end.


[para]

 The first positional argument specifies the stage at which the filter is called:
 [list_begin itemized]
    [item] [const preauth] - called before authorization.
    [item] [const postauth] - called after successful authorization.
    [item] [const trace] - called after the HTTP response has been sent and the connection closed.
 [list_end]

[para]

 The filter is executed at the designated stage if the connection's
 method and URL match the provided pattern. For example, the following
 URL patterns are valid:

[example_begin]
 /employees/*.tcl
 /accounts/*/out
[example_end]

[para]


[para]
 A filter procedure returns a value along with a Tcl return code. The
 return code is interpreted as follows:

[list_begin itemized]

[item] TCL_ERROR: When the filter procs raises an error.

[item] TCL_OK: When the script is executed successfully
       and ends with [const {return filter_ok}]

[item] TCL_BREAK: When the script is executed successfully
       and ends with [const {return -code break}] or [const {return filter_break}].

[item] TCL_RETURN: When the script is executed successfully
       and ends with [const {return -code return}] or [const {return filter_return}].

[list_end]

 The behavior of filters depends on their type:

[list_begin definitions]
[def preauth]

  With pre-authorization, the filter is invoked just before
  authorization. If the filter returns:

  [list_begin itemized]
    [item] TCL_OK: The server proceeds to the next pre-authorization
           filter, or if none remain, continues to authorization.

    [item] TCL_BREAK: No further pre-authorization filters are
           processed; the server continues to authorization.

    [item] TCL_RETURN: The server closes the connection without
           further processing of pre-authorization filters or the main
           request handler, but trace functions (e.g., logging) will still
           run.
  [list_end]

[def postauth]

 With post-authorization, the filter is invoked after successful
 authorization. If the filter returns:

  [list_begin itemized]
    [item] TCL_OK: The server proceeds to the next
    post-authorization filter, or if none remain, calls the registered
    request handler.

    [item] TCL_BREAK: No further post-authorization filters are
    processed; the registered request handler is called.

    [item] TCL_RETURN: The server closes the connection, skipping
    further post-authorization filters and the request handler, while
    still running any trace functions. It is assumed that the filter
    has already sent an appropriate response to the client.
  [list_end]


[def trace]

  Trace filters are invoked after the request has been processed, the
  HTTP response sent, and the connection closed. If a trace filter
  returns:

  [list_begin itemized]
    [item] TCL_OK: The server proceeds to the next trace filter.
    [item] TCL_BREAK or TCL_RETURN: No further trace filters are executed.
  [list_end]

[list_end]

 Note: While [cmd ns_register_filter] and [cmd ns_register_proc] both
 register handlers for matching URLs, they differ significantly. With
 [cmd ns_register_proc], the registered URL matches the specified URL
 and all URLs beneath it in the hierarchy; wildcards such as "*" are
 only effective on the final URL component (e.g.,
 `/scripts/*.tcl`). In contrast, filters use standard string-matching
 rules and multiple filters can match and be invoked for a single
 request.


[para]

  Warning: Repeated execution of the same filter registration command
  (e.g., during Tcl reinitialization) will result in duplicate
  registrations and therefore duplicate executions. It is recommended
  to manage registrations using a shared variable to avoid
  duplicates. (Note that repeated executions of [cmd ns_register_proc]
  with the same method/URL pattern will not cause duplicate
  registrations.)

[para]
  Filters can also be shortcut via [cmd ns_shortcut_filter].


[call [cmd ns_register_proc] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg method] \
	[arg url] \
	[arg script] \
	[opt [arg "arg ..."]]]

 Registers a Tcl procedure or script to handle requests matching the
 specified HTTP [arg method] and [arg url]. When a request matches,
 the registered procedure is invoked with the arguments provided at
 registration. If [arg script] is a single Tcl word (without spaces),
 it is interpreted as the name of a Tcl procedure.

[para]

 If the [option -noinherit] flag is used, the request URL must exactly
 match the specified URL. For example, if you register a handler with
 [const /foo/bar] using [option -noinherit], it will only be invoked for a
 request exactly matching [const /foo/bar].

[para]

 Without [option -noinherit], the request URL may match the specified
 URL or any URL below it. For instance, registering [const /foo/bar] without
 [option -noinherit] will match [const /foo/bar], [const foo/bar/hmm], and any
 other URL beneath [const /foo/bar], provided no other procedure is
 registered for a closer match.

[para]

 To enable filename inheritance, include a glob-style wildcard. For
 example, to have [const /foo/bar] match [const /foo/bar.html],
 register the URL as:

[example_begin]
 ns_register_proc /foo/bar* ...
[example_end]

 You can register two procedures for the same HTTP method and URL by
 invoking [cmd ns_register_proc] twice - once with [option -noinherit]
 and once without. Only one procedure will be invoked for a given
 request, depending on whether the URL is an exact match or an
 inherited match. For example:

[example_begin]
 ns_register_proc -noinherit GET /foo/bar A
 ns_register_proc GET /foo/bar B
 ns_register_proc GET /foo/bar/hmm C
[example_end]

 In this scenario, [const A] is called only when the request URL
 is exactly [const /foo/bar];
 [const B] is invoked for URLs under [const /foo/bar] (if no closer match exists);
 and [const C] is called when the request URL is [const /foo/bar/hmm] or beneath.

[para]

 The following example demonstrates how to pass arguments at
 registration time to the registered Tcl command:

[example_begin]
 ns_register_proc GET /noargs noargs
 ns_register_proc GET /onearg onearg 1
 ns_register_proc GET /twoargs twoargs 1 2
 ns_register_proc GET /threeargs threeargs 1 2 3
 
 proc noargs { } {
     ns_returnnotice 200 "testing" "noargs"
  }
 
 proc onearg { x } {
     ns_returnnotice 200 "testing" "onearg gets $x"
 }
 
 proc twoargs { x y } {
     ns_returnnotice 200 "testing" "twoargs gets $x $y "
 }
 
 proc threeargs { x y z } {
     ns_returnnotice 200 "testing" "threeargs gets $x $y $z"
 }
[example_end]




[call [cmd ns_register_proxy] [arg method] [arg protocol] [arg script] [opt [arg "arg ..."]]]

Registers a Tcl script as a handler for the specified method/protocol
combination. By registering this command, NaviServer acts as a plain
HTTP proxy server (also called a “forward proxy”), which handles
outbound traffic on behalf of clients, shielding the client’s identity
or controlling outbound traffic.  This is different from a reverse
proxy server, which is managing traffic towards internal servers (see
[uri ../../revproxy/files/revproxy.html "revproxy"]).

[para]
Example of a trivial HTTP proxy server (Note: there is a much more elaborate
reverse proxy server available as NaviServer module, which might
serve as a model for this forward proxy).

[example_begin]
 ns_register_proxy GET http http_proxy_handler
 
 proc http_proxy_handler { args } {
     #
     # Get the full URL from request line
     #
     if {![lb]regexp {^\S+\s(\S.+)\s\S+$} [lb]ns_conn request[rb] . URL[rb]} {
         ns_log warning "proxy: request line malformed: <[lb]ns_conn request[rb]>"
         ns_return 400 text/plain "invalid proxy request"
     } else {
         #
         # Run the request
         #
         set d [lb]ns_http run $URL[rb]
         set content_type [lb]ns_set get -nocase [lb]dict get $d headers[rb] content-type[rb]
         ns_return [lb][lb]dict get $d status[rb] $content_type [lb]dict get $d body[rb][rb]
     }
 }
[example_end]

[call [cmd ns_register_tcl] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg method] \
	[arg url] \
	[opt [arg file]]]

 Registers a Tcl file to be invoked when a request matches the
 specified HTTP [arg method] and [arg url]. This command is typically
 used for extension-less URLs or for mapping physical files to virtual
 URLs. It works similarly to [cmd ns_register_adp], except that the
 file to be evaluated should be a Tcl script capable of generating a
 response using commands such as [cmd ns_return] or [cmd ns_write].

[para]

 If the [arg file] argument is omitted, the url2file mapping
 is used the determine a filename registered for the URL.

[para]
 Use [cmd ns_unregister_op] to unregister a Tcl request handler.



[call [cmd ns_register_trace] \
       [arg method] \
       [arg urlpattern] \
       [arg script] \
       [opt [arg "arg ..."]]]

 Registers a Tcl script as a trace filter for the specified HTTP
 [arg method] and [arg urlpattern]. Trace filters are executed after the
 main filters and are only invoked for
 successful requests (i.e., no server errors occur). Unlike other
 filters, no reason code is added as the first argument when the trace
 filter is called, and its result is not subject to the special result
 and return code handling applied to other filter types. In all other
 respects (such as handling of URL patterns and duplicate
 registrations), trace filters behave like regular filters.


[call [cmd ns_register_url2file] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg url] \
	[arg script] \
	[opt [arg "arg ..."]]]

[call [cmd ns_register_fasturl2file] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg url] \
	[opt [arg basepath]]]

 These commands are used for runtime resolution of requested URLs to
 corresponding files that will be served to the client. They utilize
 the [cmd ns_url2file] interface to resolve the file associated with
 the current URL. The [cmd ns_register_fasturl2file] command registers
 the default fast url2file procedure for the given [arg url]. The Tcl
 [arg script] provided to [cmd ns_register_url2file] is expected to
 return the full path corresponding to the requested URL.


[call [cmd ns_unregister_op] \
   [opt [option -noinherit]] \
   [opt [option -recurse]] \
   [opt [option "-server [arg server]"]] \
   [opt --] \
   [arg method] \
   [arg url]]

 Unregisters a Tcl or ADP request handler for the specified HTTP
 [arg method] and [arg url] combination. This command removes any Tcl or C
 functions previously registered for this method/URL pair that share
 the same inheritance setting. If the [option -noinherit] flag is
 provided, only the handler registered with [option -noinherit] is
 removed; if omitted, the handler registered without
 [option -noinherit] is unregistered.

 The [option -server] parameter specifies the (virtual) server from
 which the handler should be unregistered. If omitted, the current
 server is assumed.

[call [cmd ns_unregister_url2file] \
        [opt [option -noinherit]] \
        [opt [option -recurse]] \
        [opt [option "-server [arg server]"]] \
        [opt --] \
        [arg url]]

 Unregisters a URL-to-file resolver previously registered with
 [cmd ns_register_url2file]. The [option -noinherit] flag and
 [option -server] parameter function as described before.

[list_end]



[section OPTIONS]
[list_begin options]

[opt_def -cache [arg t]]
Specifies for how long to keep result in the cache, in seconds or absolute time.

[opt_def -expires [arg t]]
Specifies that the result of evaluating the [term ADP] page should be cached
for [arg t] seconds (or a value with a time unit).
If  [arg t] is large, it expresses a time in the
future (expressed as seconds after the [term epoch]).

[opt_def -noinherit]
Specifies that the directory portion of the request URL should match
exactly and not also apply to a URL lower in the hierarchy. This is
the default.

[para]
Different [term ADP] page handlers can be registered for the
same [arg method] and [arg url] if one uses the [opt -noinherit]
option and the other does not.

[example_begin]
 [cmd ns_register_adp]            GET /a x.adp
 [cmd ns_register_adp] -noinherit GET /b y.adp
[example_end]

In the previous example, a.adp will run for the requests /a, /a/b,
/a/b/c and so on. But b.adp will only run when the requested URL is
exactly /b. The request /b/c will result in a 404 Page Not Found error.

[example_begin]
 [cmd ns_register_adp]            GET /a x.adp
 [cmd ns_register_adp] -noinherit GET /a y.adp
[example_end]

In this example, a request for the exact URL /a will run the y.adp page, while
/a/b and /a/b/c will run the x.adp page.  The y.adp page is more specific
than the x.adp page, and hides it for the /a request, which matched it exactly.

[opt_def -options [arg options]]
A list of one or more [term ADP] options that should be added to the default
set which are in effect while the [term ADP] page runs. Options can only be
enabled, not disabled. Valid options are those that [cmd ns_adp_ctl]
accepts, which can be used by [term ADP] code to fine tune the options.

[opt_def -recurse]
if specified, the delete operation will be recursive.
[list_end]


[section ARGUMENTS]
[list_begin arguments]

[arg_def string method]
The HTTP [arg method], such as [term HEAD], [term GET] or [term POST],
which will be compared using exact string equality to the HTTP request.

[example_begin]
 foreach method {HEAD GET POST} {
     [cmd ns_register_adp] $method /foo/bar [file hmm.adp]
 }
[example_end]



[arg_def string url]
The [arg url] pattern to match against the URL in each HTTP request. The last
component of the URL may contain the globbing characters [term *] and [term ?].

[example_begin]
 [cmd ns_register_adp] GET /dynamic/*.htm?
[example_end]

In this example, a URL where the last component matches the pattern *.htm?,
such as /dynamic/foo.htm or /dynamic/a/b/c/bar.html, will be run by the
ADP engine.

[para]
Only the last component of the URL may be a pattern. If this is too restrictive,
try using [cmd ns_register_filter].



[arg_def string [opt file]]
The optional argument [arg file] is either an absolute path to a file in the filesystem,
or a path relative to the page root directory of the virtual server.

[example_begin]
 [cmd ns_register_adp] GET /a [file a.adp]    ; # relative to page root
 [cmd ns_register_adp] GET /b [file b/b.adp]  ; # relative to page root
 [cmd ns_register_adp] GET /c [file /c.adp]   ; # absolute in file-system root
[example_end]

The first and second lines specify a file relative to the page
root directory. The full path is constructed each time the [term ADP] page is
requested using [cmd ns_pagepath], so [cmd ns_serverroot] and
[cmd ns_register_url2file] callbacks will be taken into account.

[para]
In the third example, a specific [term ADP] file in the server's filesystem
is registered for a similarly named URL (and all URLs below
it). There are no calls to [cmd ns_pagepath] or [cmd ns_url2file]
during the request.


[list_end]

[section EXAMPLES]

[para] In the following example, all files with the .adp extension in and below the
/big URL should be served by the [term ADP] handler, with the options
[term stricterror] and [term stream] enabled:

[example_begin]
 foreach method {GET HEAD POST} {
     [cmd ns_register_adp] -options {stream stricterror} -- $method /big/*.adp
 }
[example_end]

[para] In the following example, we return for every GET request
for a .php file in the given path an info message.

[example_begin]
 ns_register_proc GET /foo/bar/*.php {
 	ns_return 200 text/plain "Server refuses to execute PHP scripts here"
  }
[example_end]

[para]
This example shows how to expire all HTML files after an hour:

[example_begin]
 if {![lb]nsv_exists filters installed[rb]} {
   nsv_set filters installed 1
   ns_register_filter postauth GET /*.html ExpireSoon 3600
 }

 proc ExpireSoon {seconds why} {
   ns_set update [lb]ns_conn outputheaders[rb] Expires [lb]ns_httptime [lb]expr {$seconds + [lb]ns_time[rb]}[rb][rb]
 }
[example_end]


[para] The command [cmd ns_server] can be used to list the
currently registered [term filters], [term traces] or [term procs].

[example_begin]
  ns_server filters
  ns_server traces
  ns_server requestprocs
[example_end]


[see_also ns_adp ns_adp_register ns_conn ns_http ns_server ns_shortcut_filter ns_time]
[keywords "server built-in" ADP filter request callback fastpath \
        urlspace proxy handler "forwarding proxy"]
[manpage_end]
