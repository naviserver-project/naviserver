[include version_include.man]
[manpage_begin ns_percentencode n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Encoding and Decoding Percent-Encoded Strings}]

[description]

 This group of commands lets you safely encode and decode strings by
 escaping unsafe characters as percent‑escape sequences (“%xx”) per
 RFC 3986 (or RFC 1738 when in legacy mode). You can choose from
 several encoding schemes (query, path, cookie, oauth1) to control
 which characters remain unescaped and how spaces are handled. Hex
 digits default to lowercase but can be forced uppercase.

[section {COMMANDS}]

[list_begin definitions]

 [call [cmd ns_percentencode] \
     [opt [option "-charset [arg value]"]] \
     [opt [option "-scheme query|path|cookie|oauth1"]] \
     [opt [option "-uppercase"]] \
     [opt --] \
     [arg string]]

 Percent‑encodes a single string.
 All characters not in the selected scheme’s unreserved set are
 replaced by “%” and two hex digits.

 [call [cmd ns_percentdecode] \
     [opt [option "-charset [arg value]"]] \
     [opt [option "-fallbackcharset [arg value]"]] \
     [opt [option "-scheme query|path|cookie|oauth1"]] \
     [opt --] \
     [arg string]]


 Reverses the percent‑encoding in a string.  Under [var query] scheme
 only, “+” is converted back to space.  If decoding to UTF‑8 fails and
 [option -fallbackcharset] is given (and [option -charset] is not), a second
 decode attempt uses the fallback charset instead of raising an exception.

 [call [cmd ns_urlencode] \
     [opt [option "-charset [arg value]"]] \
     [opt [option "-part query|path|cookie|oauth1"]] \
     [opt [option "-uppercase"]] \
     [opt --] \
     [arg "component ..."]]

 Alias for [cmd ns_percentencode], using [option -part] in place of
 [option -scheme].  Accepts multiple components. With the [var query]
 scheme, components are joined by "&", in otherwise by "/".

 [call [cmd ns_urldecode] \
     [opt [option "-charset [arg value]"]] \
     [opt [option "-fallbackcharset [arg value]"]] \
     [opt [option "-part query|path|cookie|oauth1"]] \
     [opt --] \
     [arg "string"]]

 Alias for [cmd ns_percentdecode], using [option -part] in place of
 [option -scheme].

[list_end]


[section {SCHEMES}]

[list_begin itemized]

[item] [var query] (default):

  Encoding scheme for URL query strings and form data
  ([const application/x-www-form-urlencoded]).
  Spaces are encoded as "+".  Unsafe characters from query components
  from RFC 3986 are percent encoded.

  76 characters remain unescapted:

[example_begin]
 ! $ ' ( ) * + - . / 0 1 2 3 4 5 6 7 8 9 : ? @
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _
 a b c d e f g h i j k l m n o p q r s t u v w x y z ~
[example_end]

[item] [var path]:

  Encoding scheme per RFC 3986 for path‐segment rules.
  Spaces are encoded as "%20"; slashes embedded in path segments are
  encoded as "%2F".

  76 characters remain unescapted:

[example_begin]
 ! $ & ' ( ) * + , - . 0 1 2 3 4 5 6 7 8 9 : @
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _
 a b c d e f g h i j k l m n o p q r s t u v w x y z ~
[example_end]


[item] [var cookie]:

 Encode cookie‐value segments per RFC 6265.
 89 characters remain unescaped:

[example_begin]
 ! # $ & ' ( ) * + - . / 0 1 2 3 4 5 6 7 8 9 : < = > ? @
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [lb] [rb] ^ _ `
 a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~
[example_end]

[item] [var oauth1]:

  Encoding scheme for OAuth 1.0 signature base strings (RFC 5849 §3.6).
  Spaces are encoded as "%20"; only unreserved chars per RFC 3986 remain literal.
  66 characters remain unescaped:

[example_begin]
 - . 0 1 2 3 4 5 6 7 8 9
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _
 a b c d e f g h i j k l m n o p q r s t u v w x y z ~
[example_end]

  This scheme is also used for AWS signature encoding..

[list_end]

[section {OPTIONS}]
[list_begin options]

[opt_def -charset value]
Specify the input string’s character set for encoding or decoding.

[opt_def -fallbackcharset value]
On decode, if the result is invalid UTF‑8 and [option -charset] is not
given, retry using this charset instead of raising an exception.

[opt_def -uppercase]
Output hex digits A–F in uppercase ("%2F" instead of "%2f").

[opt_def --]
Marks the end of options; any following arguments (even starting with "-") are treated as data.

[list_end]


[section {EXAMPLES}]


Encode form data as an application/x-www-form-urlencoded POST body
([uri https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4]):

[example_begin]
 set data {
   first_name  John
   second_name Doe
   data        "Hello World"
 }
 
 set post_data {}
 foreach {key value} $data {
     lappend post_data "[lb]ns_urlencode -part query $key[rb]=[lb]ns_urlencode $value[rb]"
 }
 set post_data [lb]join $post_data &[rb]
[example_end]

Encode path segments per W3C URI recommendations
(examples 1 and 2 of
[uri https://www.w3.org/Addressing/URL/4_URI_Recommentations.html "URI Recommendation"]):

[example_begin]
 % set e1 {albert bertram marie-claude}
 % ns_urlencode -part path {*}$e1
 albert/bertram/marie-claude
 
 % set e2 {albert bertram/marie-claude}
 % ns_urlencode -part path {*}$e2
 albert/bertram%2fmarie-claude
[example_end]


By default escapes use lowercase, but you can request uppercase:

[example_begin]
 % ns_percentencode -scheme path -uppercase "a/b c"
 A%2FB%20C
[example_end]

Use the [term cookie] scheme to percent‑encode only those bytes unsafe in cookie segments:

[example_begin]
 % ns_percentencode -scheme cookie "key=value; path=/"
 key%3Dvalue%3B%20path%3D%2F
[example_end]

Construct an OAuth 1.0 signature base string

[example_begin]
 % ns_percentencode -scheme oauth1 -uppercase "Ladies + Gentlemen"
 Ladies%20%2B%20Gentlemen
[example_end]

If your percent‐encoded input isn’t valid UTF‑8, you can retry with a different charset:

[example_begin]
 % ns_percentdecode "%C3%A9t%C3%A9"
 été
 
 % ns_percentdecode "%E9"
 input string '%E9' cannot be converted to UTF-8
 
 % ns_percentdecode -charset iso8859-1 "%E9"
 é
[example_end]

 With the fallback charset, a valid UTF-8 string and a latin-1 string
 can be decoded.

[example_begin]
 % ns_percentdecode -fallbackcharset iso8859-1 "%C3%A9t%C3%A9"
 été
 
 % ns_percentdecode -fallbackcharset iso8859-1 "%E9"
 é
[example_end]


[see_also nsd ns_charsets ns_urlcharset ns_http]
[keywords "global built-in" percent-encoding encoding charset URL]

[manpage_end]

