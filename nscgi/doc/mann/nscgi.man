[include version_include.man]
[manpage_begin {nscgi} n [vset version]]
[moddesc {NaviServer Modules}]
[titledesc {NaviServer CGI Interface Guide}]

[description]

This page describes the configuration of the module [const nscgi],
which can be optionally loaded into NaviServer to run CGI programs.

[section {What is CGI and How Does it Work?}]


[para]
CGI (Common Gateway Interface) is a standard way of running programs
from a Web server. Often, CGI programs are used to generate pages
dynamically or to perform some other action when someone fills out an
HTML form and clicks the submit button. NaviServer provides full
support for CGI v1.1
([uri https://datatracker.ietf.org/doc/html/rfc3875 "RFC 3875"]).


[para]
Basically, CGI works like this: A web client sends a URL that causes
the NaviServer to use CGI to run a program generating the
content. NaviServer passes the input from the client to the program,
runs it, and returns the output from the program back to the
client. CGI acts as a "gateway" between the web server and the program
executed at request time.

[para] The program run by CGI can be any type of executable file on
the server platform. For example, you can use C, C++, Perl, PHP,
Python, Unix shell scripts, Fortran, or any other compiled or
interpreted language.

[para] One can also use plain Tcl scripts with CGI, but be aware that
the NaviServer Tcl API will not be available to these scripts.  To
implement dynamic content with NaviServer, one has the option of using
the embedded Tcl and C interfaces instead of CGI. Typically, the Tcl
and C interfaces provide better performance than CGI (see the
NaviServer Tcl Developer's Guide for information on the Tcl interface
and the NaviServer C Developer's Guide for information on the C
interface).

[para] You may want to use CGI for existing, shareware, or freeware
programs that use the standard CGI input, output, and environment
variables.  Since CGI is a standard interface used by many Web
servers, there are lots of programs and libraries available. This
chapter describes the interface and points you to locations where you
can find more information.

[para] A basic use-case for CGI is an HTML form that receives the form
field values, computes some output, and returns the results as HTML
output.  For example, the form lets people to comment on your Web
pages, and you want the comments emailed to you, and finally, you want
to automatically generate a page and send it back to the web client.

[para] The following steps describe the basic principles:

[list_begin enum]

[enum] The reader fills out your form and clicks the "Submit" button.
     The HTML [const FORM] tag in your page might look like this:

[example_begin]
 <FORM METHOD="POST" ACTION="/cgi-bin/myprog">
[example_end]

    [para] The [const METHOD] controls how the information typed into
    the form is passed to your program. It can be [const GET] or
    [const POST].  The [const ACTION] determines which program should
    be run.

    [para] Other ways for a reader to run a CGI script are by
    providing a direct link to the program without allowing the reader
    to supply any variables through a form by using e.g.
    [const {<A href="/cgi-bin/myprog">...}], or by other means.

[enum] When the server gets a request for a URL that maps to a CGI
     directory or a CGI file extension (as defined in the configuration
     file), it starts a separate process and runs the
     program within that process. The server also sets up a number of
     environment variable within that process. These environment variables
     include some standard CGI variables, and optionally
     any variables you define in the configuration file for this type of
     program.

[enum] The program runs.

[para]
     In this example, the CGI program [const myprog] takes the comments
     from the form as input and sends them to you as email. If the
     form method is [const GET], it gets the input from an environment
     variable. If the form method is [const POST], it gets the input
     from standard input. It also assembles an HTML page and sends it
     to standard output.

[enum] Any information the program passes to standard output is
     automatically sent to the NaviServer when the program finishes running.

[enum] The server adds any header information needed to identify the
     output and sends it back to the reader's browser, which displays the
     output.

[list_end]


[section {Configuring CGI for NaviServer}]


[subsection {Loading the CGI module}]

[para]

In order to use CGI within NaviServer, one has to load the
[const nscgi] module, which is part of every NaviServer installation.  As for
all modules, one has to provide the information for which server
configuration in the configuration file the module should be enabled.
In the following example, we will use the server named [const s1]).
module to that server such it will be loaded at start time.

[example_begin]
 ns_section ns/server/s1/modules {
   ns_param nscgi nscgi.so
 }
[example_end]

When the configuration file contains multiple server definitions, you
will need to configure the CGI interface for each of these, since
these might have different requirements (see
[uri ../../manual/files/admin-config.html "NaviServer Configuration Reference"]
for the configuration of virtual servers and multiple
server definitions).

[para] For the configuration of the server, one has to provide information
for the following tasks:

[subsection {Identify CGI Programs}]

The configuration file has to specify, which request should be treated
as a CGI request. Without this information, the CGI program file would
be treated by the server as a static resource by [const fastpath] and
its content would be sent back to the web client.

[para]
Therefore, a section to the configuration file for the [const nscgi]
module is needed to specify which HTTP methods and paths should be
treated as a CGI requests.
The following example specifies, that every
[const GET] request for a resource named [const *.cgi*] everywhere in
the URL space should be treated as a CGI request.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   ns_param map  "GET /*.cgi"
 }
[example_end]

[para] One could also restrict the path to a certain subdirectory in the URL
space, and/or define multiple HTTP methods and paths.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   ns_param map  "GET /cgi-bin/*.cgi"
   ns_param map  "POST /cgi-bin/*.cgi"
   # ...
 }
[example_end]

[subsection {Identify CGI Programs in the Middle of the Path}]

The CGI specification supports script names not only at the end of the
request URL, but as well CGI script names in the middle of the path.
This is not very common, but allowed by RFC 3875.  When such as
request is issued, the remainder of the path after the script name is
passed to the script via the environment variable
[const PATH_INFO]. This trailing path information is an alternative
to using query variables to pass context information to the CGI script.

[para] Below is an example of a CGI script name (here
[const info.cgi]) in the middle of a request path:

[example_begin]
/cgi-dir/info.cgi/foo/bar?var=value&...
[example_end]

[para] Since the URL space handling of NaviServer supports only
wild cards in the last segment of a URL path, we have to specify
in suchcases the script name without wildcards.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   # ...
   ns_param map  "GET /cgi-dir/info.cgi"
   # ...
 }
[example_end]
With this definition, in the path above, [const info.cgi]
is identified as a CGI script. for the mentioned request path,
the script gets [const /foo/bar] passed via the
environment variable [const PATH_INFO].

[subsection {Specify CGI Script Interpreters}]

Typically, the CGI programs are not named with the extension
[const .cgi], but in the case of CGI scripts,
these are Perl, PHP, Python, ... scripts, using the
language specific file extensions. In this step, we specify, which
interpreter the CGI script should be executed.

[para] For compiled CGI programs, this identification is not much of an
issue (and not necessary). Also, scripted CGI programs might be executed via the
[uri https://en.wikipedia.org/wiki/Shebang_(Unix) shebang]
conventions.
For security and maintenance reasons, web server administrators might want
more control over, which script interpreters in which versions execute
the CGI script.

[para] The specification of the script interprets is performed via
the script extension in a separate section in the configuration file
under [const ns/interps]. This section name is also specified in the
module definition. In the following example, the section is named
[const CGIinterps], containing definitions for Perl and PHP.  When a
CGI script with a specified extension is to be executed (below
[const .pl] and [const .sh]), NaviServer will call the script
via the named executables.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   ns_param map    "GET /cgi/*.php"
   ns_param map    "POST /cgi/*.php"
   ns_param map    "GET /cgi/*.pl"
   # ...
   ns_param Interps CGIinterps
 }
 
 ns_section ns/interps/CGIinterps {
   ns_param .pl    "/opt/local/bin/perl"
   ns_param .php   "/opt/local/bin/php-cgi83"
 }
[example_end]

If no interpreter mapping is provided, the
called script must have executable permissions.

[subsection {Specify Source Locations}]

In some more complex setups, it is desirable to have a separate source
locations for certain CGI applications. The source location is
typically a directory not under the page directory of NaviServer,
and maybe managed via a package manager or a source code repository.

[para] The source-code mapping can be achieved by specifying
additionally the path in the [const map] value.
The following example specifies that requests for Perl scripts stating
with [const /cgi] should be resolved by the specified source location.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   # ...
   ns_param map  "GET /cgi/*.pl /server/perl-scripts"
   # ...
 }
[example_end]

The provided source location is registered via
[cmd ns_register_fasturl2file] such that [const fastpath]
can resource the request path against this source location.


[subsection {Register CGI Handlers from a Script}]

Alternatively to the registration via the configuration file, CGI
handlers can be as well be registered by the command [cmd ns_register_cgi].
Loading the CGI module and specifying the CGI script interpreters have
to be done via the configuration file.

[subsection {Further configuration parameters}]

[list_begin definitions]

[def gethostbyaddr] is a boolean parameter to indicate whether to
resolve the peer IP address to its hostname when setting the
[const REMOTE_HOST] environment variable.  If [const false], the peer IP
address will be used instead.  Caution: turning this option on can
negatively impact performance due to the overhead of having to perform
a DNS look-up on every CGI request. Default: [const off]

[def limit] is an integer parameter to indicate the maximum
number of concurrent CGI requests to execute. [const 0] means
unlimited. Default: [const 0]

[def maxinput] is an integer parameter to indicate the
maximum in bytes to accept in the HTTP request. [const 0] means unlimited.
Mostly useful to limit the size of [const POST]'ed data.
Default: [const 1024000]
      
[def maxwait] is an integer parameter to indicate the amount of time
 to wait in seconds in the queue when the concurrency limit has been
 reached.  Server will respond with a "503 Service Unavailable" error
 on timeout.  If [const limit] is set to [const 0], this setting will
 have no effect. Default: [const 30]

[def systemenvironment] is a boolean parameter to specify, if all
 environment variables of the server process should be passed to the
 CGI program. See below for more information about environment
 variables. Default: [const false]

[def allowstaticresources]

  is a boolean parameter to controls
  whether static resources (e.g. images) can be served directly
  by the [const nscgi] module.

  [para] In general, this option is not needed, since static content
  should be served via [const fastpath], providing all its features
  (caching, compressed output, etc.). The WordPress example on this
  page shows a complex setup, where the static resources are delivered
  from a non-standard location. Notice, that setting this resource
  might be security relevant, since it can lead to deliver unexpectedly
  configuration files etc. Default: [const false]

[list_end]


[subsection {Sample Configuration for WordPress}]

[para] In the following example, we provide the definitions for
running the popular [uri https://wordpress.com/ WordPress] package
under NaviServer via CGI. We assume, the WordPress sources have been
downloaded in the directory [const /var/www/wordpress/]. The
following definition specifies, that for [const GET] and [const POST]
requests in the directory [const /wordpress] with the extension
[const .php], the source files should be taken from the downloaded
folder. We use [const /opt/local/bin/php-cgi83] for executing
the PHP files.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   foreach httpMethod {GET POST} {
     ns_param map  "$httpMethod /wordpress/*.php /var/www/wordpress/"
   }
   ns_param interps php8
 }
 
 ns_section ns/interps/php8 {
   ns_param .php    "/opt/local/bin/php-cgi83"
 }
[example_end]

This definition is not yet complete. WordPress expects for URLs
pointing to a directory that [const index.php] is executed. Make sure
to include this value in the [const fastpath] setup.

[example_begin]
 ns_section ns/server/s1/fastpath {
    # ...
    ns_param directoryfile  "index.adp index.tcl index.html index.htm index.php"
    # ...
 }
[example_end]

[subsection {Sample Configuration for Joomla}]

The setup for [uri https://www.joomla.org/ Joomla]
is very similar to the setup for WordPress. Using this setup,
the Joomla system will be available
on the web server under the URL  [const /joomla].
in the setup, we reuse the CGI interpreter section [const php8] and the
[const directoryfile] from the WordPress setup. The definition assumes
that the Joomla source code is installed on the server
in the directory [const /var/www/joomla].

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   foreach httpMethod {GET POST} {
     ns_param map  "$httpMethod /joomla/*.php /var/www/joomla/"
   }
   ns_param interps php8
 }
[example_end]


[section {Environment Variables passed to CGI programs}]

[para]
CGI programs receive input via environment variables (and standard
input for methods like [const POST] or [const PUT]) and provide output
via standard console output channels. We describe here in detail the
environment variables, which are passed to the CGI programs.


[subsection {Accessing Environment Variables}]

Different languages allow you to access environment variables in
different ways. Here are some examples:

[para]
[emph  {C or C++}]

[example_begin]
 #include <stdlib.h>;
  
 char *browser = getenv("HTTP_USER_AGENT");
[example_end]

[emph {Perl}]

[example_begin]
 $browser = $ENV{'HTTP_USER_AGENT'};
[example_end]


[emph {Bourne shell}]

[example_begin]
 BROWSER=$HTTP_USER_AGENT
[example_end]


[emph {C shell}]

[example_begin]
 set BROWSER = $HTTP_USER_AGENT
[example_end]

[emph {Tcl}]

[example_begin]
 set browser $::env(HTTP_USER_AGENT)
[example_end]


[subsection {Standard Environment Variables}]

These standard environment variables are provided for all CGI programs
by NaviServer. These variables are described in detail in the RFC 3875 in
[uri https://datatracker.ietf.org/doc/html/rfc3875#section-4.1 "Section 4.1"].

[list_begin definitions]

[def AUTH_TYPE:] If the server supports user authentication, and the
script is protected, this is the protocol-specific authentication
method used to validate the user.
A typical value is [const Basic] for Basic authentication.

[def CONTENT_LENGTH:] If the CGI program is run by a form with the
[const POST] method, this variable contains the length of the contents
of standard input in bytes. There is no null or EOF character at the
end of standard input, so in some languages (such as C and Perl) you
should check this variable to find out how many bytes to read from
standard input.

[para]
Example: 442


[def CONTENT_TYPE:] If the CGI program is run by a form with the
[const POST] method, this variable contains the MIME type of the
information sent by the browser. Currently, all browsers should send
the information as [const application/x-www-form-urlencoded].

[def GATEWAY_INTERFACE:] The version number of the CGI specification
this server supports.

[para]
Example: CGI/1.1

[def  HTTP_ACCEPT:]
A comma-separated list of the MIME types the browser will accept, as
specified in the HTTP header the browser sends. Many browsers do not
send complete lists, and the list does not include external viewers
the user has installed. If you want to send browser-specific output,
you may also want to check the browser name, which is specified by the
HTTP_USER_AGENT variable.

[para]
Examples:

[example_begin]
 */*, application/x-navidoc
 */*, image/gif, image/x-xbitmap, image/jpeg
[example_end]

[def HTTP_IF_MODIFIED_SINCE:]
This variable contains a date and time if the browser wants a response
only if the data has been modified since the specified date and time.
The date is in GMT standard time. Many browsers do not send this
information.

[para]
Example: [const "Thursday, 23-Nov-95 17:00:00 GMT"]


[def HTTP_REFERER:]
This variable contains the URL of the page or other location from
which the reader sent the request to run the CGI program. For example,
if the reader runs the program from a form, this variable contains the
URL of that form.


[para]
Example: [const http://www.mydomain.com/mydir/feedback.htm]


[def HTTP_USER_AGENT:]
This variable tells which browser the reader is using to send the
request. Normally, the format is "browser name/version".

[para]
Example: [const "Mozilla/1.2N (Windows; I; 16-bit)"]

[def PATH_INFO:]
This variable contains the path information from the URL after the
name of the CGI program. Commonly, this type of URL is used to pass a
relative directory location to your program. For example, the
following URL runs the listdir program and passes it /misc/mydir as
extra path information:

[para]
[const http://www.mysite.com/cgi-bin/listdir/misc/mydir]


[def PATH_TRANSLATED:]
This variable translates the CGI program to the spource location in
the filesystem.

[para]
Example: [const /var/www/myserver/pages/misc/mydir]


[def QUERY_STRING:]
This variable contains the query information passed by a form or link to the
CGI program.

[def REMOTE_ADDR:]
The IP address of the machine from which or through which the browser
is making the request. This information is always available.


[para]
Example: [const 199.221.53.76]


[def REMOTE_HOST:]
The full domain name of the machine from which or through which the
browser is making the request. If this variable is blank because the
browser did not send the information, use the REMOTE_ADDR variable
instead.

[para]
Example: [const mybox.company.com]


[def REMOTE_USER:]
If the server prompted the reader for a username and password because
the script is protected by the NaviServer's access control, this
variable contains the username the reader provided.

[para]
Example: [const nsadmin]


[def REQUEST_METHOD:]
The method used to send the request to the server. For direct links,
the method is [const GET]. For requests from forms, the method may be
[const GET] or [const POST]. Another method is [const HEAD],
which CGI programs can treat like [const GET] or can provide
header information without page contents.

[def SCRIPT_FILENAME:] This variable contains the absolute pathname of
the currently executing script in the filesystem.

[def SCRIPT_NAME:] This variable might be empty or the part of the
request leading to the CGI program.

[para]
Example: [const /cgi-bin/search]


[def SERVER_NAME:]
The full hostname, domain name alias, or IP address of the server that
ran the CGI program.

[para]
Example: [const www.mysite.com]


[def SERVER_PORT:]
The server port number to which the request was sent. This may be any
number between 1 and 65,535 (that is not already a well-known port).
The default is 80.

[para]
Example: [const 80]


[def SERVER_PROTOCOL:]
The name and version number of the information protocol used to pass
this request from the client to the server.

[para]
Example: [const HTTP/1.0]


[def SERVER_SOFTWARE:]
The name and version number of the server software running the CGI
program.

[para]
Example: [const NaviServer/5.0.0]


[def HTTP_*:]
In addition to the preceding environment variables, the HTTP header
lines received from the client, if any, are placed into the
environment with the prefix [const HTTP_] followed by the header name. Any
spaces in the header name are changed to underscores (_). The server
may exclude any headers it has already processed, such as
content-type, and content-length.

[list_end]


[subsection {Extra Environment Variables}]


[para] One can configure NaviServer to
pass further environment variables some CGI program.

[list_begin enum]

[enum]
In case the CGI program or the CGI script interpreter requires additional
environment variables, one can define this via the module parameter
[const Environment] and a matching section for the detail definitions.

    [list_begin itemized]

    [item] Add a definition for the [const Environment] parameter to your CGI
        configuration section.

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   ns_param map         "GET /cgi /usr/local/cgi"
   ns_param map         "POST /*.cgi"
   ns_param interps     cgi
   ns_param environment cgi
 }
[example_end]

    [item] Then add a section under [const ns/environment] for the chosen
       name (here [const cgi])
       containing the required environment variable definitions.

[example_begin]
 ns_section ns/environment/cgi {
   ns_param FOO BAR     ;# defines environment variable "FOO=BAR"
   ns_param TMP /tmp    ;# defines environment variable "TMP=/tmp"
 }
[example_end]

[list_end]

[enum]

 [const systemenvironment] is a boolean parameter in the
 [const module/nscgi] section in the configuration file to controls
 whether the CGI will inherit the server process's environment
 variables or not.  Enabling this could potentially leak sensitive
 information from the parent's environment if the CGI displays its
 environment variables which is the behavior of some common
 error-handling code. Default: [const false]

[example_begin]
 ns_section ns/server/s1/module/nscgi {
   # ...
   ns_param systemenvironment true
   # ...
 }
[example_end]

[list_end]



[section {Output from CGI Programs}]

[para] To create an HTTP response, the CGI program outputs the header
and content to the standard output. Different languages allow you to
send text to standard output in different ways. Here are some
examples:

[para]
[emph {C or C++}]

[example_begin]
 #include <stdio.h>
 #include <stdlib.h>
 
 printf("content-type: text/html\r\n\r\n");
 printf("<HEAD><TITLE>Hello</TITLE></HEAD>");
 printf("<BODY>You are using %s.</BODY>",
 getenv("HTTP_USER_AGENT") );
[example_end]

[emph Perl]

[example_begin]
 #!/opt/local/bin/perl
 print "content-type: text/plain\r\n\r\n";
 for my $var ( sort keys %ENV ) {
    printf "%s = \"%s\"\r\n", $var, $ENV{$var};
 }
[example_end]


[emph {Bourne shell}]

[example_begin]
 echo content-type: text/html
 echo 
 echo \<HEAD\>\<TITLE\>Hello\</TITLE\>\</HEAD\>
 echo \<BODY\>
 echo You are using $HTTP_USER_AGENT.\</BODY\>
[example_end]


[emph {Tcl}]

[example_begin]
 puts "content-type: text/html"
 puts ""
 puts "<head><title>Hello</title></head>"
 puts "<body>"
 puts "You are using $::env(HTTP_USER_AGENT)."
 puts "</body>"
[example_end]

These are just very small examples. For all popular programming
languages, powerful libraries exist to ease the generation of the HTML
output.



[section {Advice for CGI Programming}]

[list_begin itemized]

[item]  Which language should I use? You can use any language you feel
 comfortable programming in. Of course, programs usually run faster
 in compiled language, so if your program is computationally
 intensive, you might want to use C or another compiled language.
 Most of the available  CGI programs on the Web
 are written in scripting languages such as Perl or PHP.


[item]  How can I prevent CGI programs from causing security problems? A
 CGI program is basically a program that you let anyone else in the
 world run on your system. Someone with bad intentions could cause
 you some problems if you don't follow these rules:

 [list_begin itemized]

 [item]  Keep your CGI programs in a separate CGI directory or give
      them the file extension you specify in the configuration
      file. Don't give outsiders write access to these files and
      directories This should prevent casual users from reading,
      modifying, or adding CGI programs.

 [item]  Don't allow server-parsed HTML to run on your CGI directory
      or on files with extensions mapped as CGI programs.

 [item]  Don't trust the data the browser sends to your program. Parse
      the QUERY_STRING or standard input. If your program is a
      non-compiled script, characters with special meanings in that
      language can cause problems if the browser fails to encode
      them as hexadecimal values.

 [item]  Check for odd filenames and directory paths in the input.
      For example, you should be careful about allow paths
      containing: ., ../, //, or the name of the directory that
      contains your CGI programs.

 [item]  Be careful with statements that construct and execute a
      command line or system call using input from the reader. For
      example, be careful using the eval statement in Perl and the
      Bourne shell. If the reader sends input that begins with a
      semicolon (;), they may be able to get your system to perform
      any command they like. Likewise, if you use calls to popen()
      and system(), make sure you put a backslash (\) before any
      characters with special meaning in the shell that will run.

[list_end]


[item]  How can I debug my CGI programs? Errors that go to the stderr
     location will be available in the NaviServer's server.log file.


[para]
  One simple way to debug CGI programs is to temporarily include
 print statements that send additional diagnostic
 information to the client or to a file. If your program
 is written in C and you have a debugging tool on your
 system, you can call sleep (or use a long loop) at the
 beginning of the program. Then, you can attach to the
 program with the debugger while the program is sleeping.


[para]
  If your programs are not executed, make sure the program file
 allows read and execute access.


[item]  How can I debug my nscgi configuration?
[para]
  For debugging the nsgci configuration, you one can turn on
  logging for the system log via the command:

[example_begin]
 ns_logctl severity Debug(cgi) on
[example_end]

[list_end]

[see_also ns_register_cgi]
[keywords module nscgi CGI fastpath]

[manpage_end]
