=======================================
NaviServer 4.99.23, released 2021-12-29
=======================================

 70 files changed, 1431 insertions(+), 566 deletions(-)

New Features:

 - Improved hash algorithms for improved security

   The new version supports SCRAM (Salted Challenge Response
   Authentication Mechanism), which is one of the newer recommended
   password hash algorithms to replace the classic salted SHA1
   approaches. The classical hash algorithms become easier to attack
   via high-performance hashing hardware (GPUs).  NaviServer supports
   now SCRYPT and SCRAM (when compiled with more recent versions of
   OpenSSL; SCRYPT requires at least OpenSSL 3.0. SCRAM requires OpenSSL 1.1)

   The actual hash function of SCRAM is PBKDF2 [RFC2898] with HMAC as
   the pseudorandom function (PRF) and with dkLen == output length of
   HMAC == output length of the digest function.

   Here is an example of using pbkdf2_hmac for the hash function of
   SCRAM-sha-256. RFC 7677 recommends to use 15K iterations for PBKDF2:

      ::ns_crypto::pbkdf2_hmac \
               -digest sha256 \
               -iterations 15000 \
               -secret $password \
               -salt $salt]

   OpenACS supports already switching to from salted SHA1 to SCAM (or
   SCRYPT) via configuration variable.


 - Better Unicode support, including emojis requiring 4-byte UTF-8 characters.

   Earlier versions of NaviServer and the nsdb* database drivers
   assumed in a few places that Tcl-internal UTF-8 is also valid UTF-8
   for external sources, which is often, but not always true. Now, the
   proper export functions are everywhere called.

   The new code was tested with Emojis up to Unicode 13 (many thanks
   to Wolfgang Winkler)

   This change affects as well the database driver module "nsdbpg".

 - ns_trim enhancements:
   The new option "-prefix ..." can be used to strip a string
   (such as ">> ") from every line starting with it.

 - extended time unit support (added "w" for weeks and "y" for years)

 - Added an experimental global parameter "nocache" to ease to
   experiment with horizontal scaling. As a consequence, "ns_cache
   eval" becomes a dummy operation.

 - Added an experimental command "ns_baseunit"

      ns_baseunit ?-size size? ?-time time?

   Convert from memory units or from time units to its base value
   using the NaviServer internal converters, which are used the same
   way for various commands.  The base unit for a memory size is a
   byte, for a time value a second). This command is necessary to
   provide Tcl-level commands calculating with these units to support
   uniform interfaces (e.g., calculating cache partition sizes base on
   values such as 2MB).

   Either "-size" or "-time" has to be specified.

      % ns_baseunit -size 10KB
      10240

      ns_baseunit -time 2.5h
      9000

 - Added an experimental command "ns_strcoll"

       ns_strcoll ?-locale locale? string1 string2"

   This command compares lexicographically string1 with string2
   according to the current locale collation and returns an integer
   greater than, equal to, or less than 0, depending on whether
   string1 is greater than, equal to, or less than string2. The
   command is necessary in cases, where e.g., the sorting order from
   the database (normally based on local collation) is different from
   default Tcl sorting order to provide a uniform interface with the same
   sorting orders. The name is derived from the baseline POSIX
   function call.

   The command is suitable for usage in the lsort command:

      % set l {Bor Bar Bär}
      % lsort -command ns_strcoll $l
      Bar Bär Bor

      % lsort $l
      Bar Bor Bär

   Note that the output of the command depends on the correct
   installation of locales on the host. Furthermore, the output of the
   command varies depending on the C library's implementation, which
   might differ for some locales/charsets between platforms.

Performance Improvements:

 - Increase scalability on DB operations by reducing DB pool locks

   On high load servers, the total number of locks and busy locks on
   the DB pools might become quite high. The new code caches these
   statistics in the handles (which are per thread, requiring no
   locks) and transfers the aggregated values on handle closes or
   statistics calls.

 - Set default for "concurrentinterpcreate" to "true" for Tcl 8.6 or
   newer. Versions up to at least Tcl 8.5 are known to crash in case
   two threads create interpreters at the same time. These crashes
   were hard to reproduce, but serializing interpreter creation
   helped. Since all our major servers are running for several years
   without problems with this parameter turned on the default is now
   set to "true", when NaviServer is compiled with Tcl 8.6 or newer.


Bug Fixes:
 - Fixed memory leak in "nsv_dict get" operations.


Documentation improvements:
---------------------------

 - Improved the following man pages:

        doc/src/manual/admin-tuning.man
        doc/src/naviserver/commandlist.man
        doc/src/naviserver/ns_adp_include.man
        doc/src/naviserver/ns_baseunit.man
        doc/src/naviserver/ns_cache.man
        doc/src/naviserver/ns_charsets.man
        doc/src/naviserver/ns_choosecharset.man
        doc/src/naviserver/ns_connchan.man
        doc/src/naviserver/ns_cookie.man
        doc/src/naviserver/ns_cookiecharset.man
        doc/src/naviserver/ns_crypto.man
        doc/src/naviserver/ns_encodingforcharset.man
        doc/src/naviserver/ns_encodingfortype.man
        doc/src/naviserver/ns_formfieldcharset.man
        doc/src/naviserver/ns_ictl.man
        doc/src/naviserver/ns_job.man
        doc/src/naviserver/ns_register.man
        doc/src/naviserver/ns_schedule.man
        doc/src/naviserver/ns_setformencoding.man
        doc/src/naviserver/ns_shutdown.man
        doc/src/naviserver/ns_sleep.man
        doc/src/naviserver/ns_sockcallback.man
        doc/src/naviserver/ns_sockopen.man
        doc/src/naviserver/ns_strcoll.man
        doc/src/naviserver/ns_time.man
        doc/src/naviserver/ns_urlcharset.man
        doc/src/naviserver/ns_valid_utf8.man
        doc/src/naviserver/textutil-cmds.man


Configuration Changes:
----------------------

 -  Ease configuration via environment variables

    This feature is useful to manage many NaviServer instances with
    mostly identical configurations without having to provide multiple
    configuration files (e.g. for Docker setups, or clusters).

    The sample configuration for of OpenACS (openacs-config.tcl)
    contains now a Tcl dictionary with default values:

      set defaultConfig {
         hostname   localhost
         ipaddress  127.0.0.1
         httpport   8000
         httpsport  ""
         server     "openacs"
         serverroot /var/www/$server
         logroot    $serverroot/log/
         homedir    /usr/local/ns
         bindir     $homedir/bin
         db_name    $server
         db_user    $server
         db_host    localhost
         db_port    ""
     }

    These configuration values (keys of the dict) can be overridden by
    environment variables prefixed with "oacs_" followed by the
    parameter name. One can change the default port specified in the
    configuration file for plain HTTP connections by e.g., providing it
    via environment variables:

        oacs_httpport=8101 /usr/local/ns/bin/nsd -i -t ....



Code Changes:
-------------
 - Extended regression test

 - Code Cleanup
     . Do not declare reserved C identifiers

 - Improved comments, fixed typos

 - Marked "ns_set_precision" as deprecated, since there is no
   reason why not setting the Tcl variable ::tcl_precision directly.


Changes in NaviServer Modules:
==============================

 8 files changed, 697 insertions(+), 283 deletions(-)


nsdbpg:
-------

 - Extended added support for UTF-8 including emojis (see above)

 - Added "ns_pg pid /handle/" to return the current backend PID
   without SQL parsing.  This command is about 100x faster than using
   "select pg_backend_pid()" and can be used e.g. for deploying
   prepared statements.

 - Some code cleanup and modernization

 - Added minimal documentation of ns_pg* API in README file

 - Bumped version number to 2.6

nsstats:
--------

 - improved handling of fractional seconds
 - added summary line with total savings to cache statistics
   (to estimate consequences of eliminating this cache)
 - improve bread-crums for "mapped" server URLs
 - added user interface for unmapping URLs from connection pools

nsodbc:
-------

 - adjust code with current prototypes
 - fix warnings from static checkers

nsshell:
--------

 - Improved source code documentation
 - Updated PRISM.JS libraries links, to prevent X-Content-Type-Options errors

letsencrypt:
------------

 - Removed obtaining the intermediate cross-signed certificate, since this does not seem
   to be required anymore
 - Improved source code documentation


=======================================
NaviServer 4.99.22, released 2021-08-25
=======================================

 93 files changed, 4216 insertions(+), 1465 deletions(-)

New Features:
-------------

 - Added support for macOS machines with the M1 processor.

 - ns_http improvements:
   . Added proxy handling for [ns_http]
   . Added handling of charsets in ns_http get requests (for non-binary MIME types)

 - Extended default mime-types:
   . Added "jpeg/xl" to the default MIME types (specified in IANA provisional list)

 - Better handling with invalid UTF-8 (also relevant for security reasons)
   . new function "ns_valid_utf8" to check whether a byte-array contains
     a valid UTF-8 byte sequence

   . Check internally the validity of UTF-8 and complain in the system
     log when invalid characters are encountered. Note that Tcl
     transforms sometimes invalid UTF-8 into valid UTF-8 (e.g., URL
     /x%c3.) such that the exact analysis of potential attacks can
     become complex.

   . Proper encoded URLs contain just a subset of 7-bit US ASCII. The
     general problem of handling UTF-8 in request headers is actually
     quite complex and spread over several RFCs. The current HTTP
     specification (RFC 7230) states that "Parsing an HTTP message as
     a stream of Unicode characters, without regard for the specific
     encoding, creates security vulnerabilities due to the varying
     ways that string processing libraries handle invalid multibyte
     character sequences that contain the octet LF (%x0A)." ... older
     RFCs allowed explicitly ISO8859-1.  However, all recent browsers
     code properly encode UTF-8 in the URLs.  So, in theory, a server
     could reject uncoded "binary" data, and assume this data is
     coming from hacking attacks. However, this change just adds a
     warning for these cases.

   . UTF-8 validity checking is performed for URLs in percent-encoded
     and in non-encoded form

 - "ns_parseurl" reform: make URL conformant with RFC 3986

    Previously, the parsing of URLs as performed by "ns_parseurl" was
    more driven by heuristics than by standards. The new version
    parses now URLs according to RFC 3986 (checking as well for valid
    characters in user-defined URL components when the new option
    "-strict" is used). Most internal usages of Ns_HttpParseHost() are
    non-strict to provide good backwards compatibility.  The function
    now parses as well the userinfo in the authority. (authority =
    [userinfo "@"] host [":" port]).

 - Added command: "ns_parsehostport ?-strict? string"

   This command implements a subset of "ns_parseurl" by just trying to
   parse the provided string into "host" and "port" (when
   available). The command handles also the IP literal convention as
   specified in RFC 3986 for parsing IPv6 addresses with ports.

 - Added automated reloading of server certificates when SIGHUP is
   received. While in previous version it was necessary to restart the
   server, when certificates were renewed (e.g., via letsencrypt), the
   new version reloads certificates when it receives a SIGHUP signal.


Bug Fixes:
----------

 - Make sure to nul-terminate IPv4 portion in V4MAPPED addresses.

 - Fixed a potential race condition on peer and proxy IP address,
   where on e.g., pipelined requests the request structure is already
   reused in a new request, while the old connection is used for
   logging. This could result in incorrect peer addresses in the
   access.log

 - More precise execution of scheduled procs

   Background: previously, the scheduling of repeated scheduled procs
   was based on the last finish time. This has the consequence that
   the execution time will drift away more and more from a starting
   time, depending on the runtime of certain jobs. If one has e.g., a
   service that should run every minute, some of these minutes might
   be skipped by the cumulative drift on a long running server. New
   repeated scheduled procs on the original scheduled time rather than
   on last finish time.

 - Fixed Ns_StrTrimRight() to avoid damaging of UTF-8 characters

   Background: Up to now, NaviServer was using "CHARTYPE(space, c)" to
   determine, which characters can be trimmed at the end of a string.
   Unfortunately, there exists characters, which are classified as
   "space", but which can be trailing bytes with different semantics
   in multibyte UTF-8 characters (e.g., 0x85). When these bytes are
   stripped the result are invalid UTF-8 characters.

 - Added support for handling potentially negative time values when
   Ns_GetTime() is non-monotonous

   Background: The time of Ns_GetTime() is determined by
   gettimeofday() is therefore potentially affected by discontinuous
   jumps in the system time (e.g., if the system administrator
   manually changes the system time).

 - nsproxy: Disambiguate the name of the helper command with the name of the module

   NaviServer could get confused between the helper command "nsproxy"
   and the shared object of the module (called nsproxy.so). Since for
   module-loading, the suffix is optional (to support multi-platform
   config files), there as a potential confusion. The helper command
   is now called "nsproxy-helper".

 - Fixed list of charsets as returned by "ns_charsets".

   Previously, "ns_charsets" returned just the mapped charsets (where
   the name of the charset as defined in Tcl and by IANA differs). So
   e.g., "utf8" was not reported back. Now, the full is reported
   back. Additionally, more recent mappings were added.

 - Bugfix for "ns_http connect": Linux sometimes returned error (false positive)

   Sometimes "ns_http run SOMEHOST:PORT" returned under Linux an error
   of the form "can't connect to SOMEHOST port PORT: operation now in
   progress".  This problem could have occurred on connections to hosts
   where the DNS entries have multiple IP addresses associated. This
   error only showed up on the first connection attempt (e.g., after a
   server restart, or on no connections to this host for e.g., a few
   hours), all later attempts with identical parameters worked without
   problems. It turned out that sometimes - while working through the
   associated IP addresses - the call "getsockopt(sock, SOL_SOCKET,
   SO_ERROR, ...)"  retrieved errno 113 <No route to host> from the
   socket, maybe related with routing table lookup.

 - Improved log messages concerning limit of number of open files

 - Improved handling of running out of memory when creating threads
   from Tcl

 - Fixed potential race condition in logging during shutdown

 - Fix potential bug in openssl.m4 (could check for files on a wrong path)


Documentation improvements:
---------------------------

 - Improved the following man pages

        doc/src/manual/admin-config.man
        doc/src/manual/admin-maintenance.man
        doc/src/manual/admin-tuning.man
        doc/src/manual/c-driverdb.man
        doc/src/manual/main-history.man
        doc/src/naviserver/commandlist.man
        doc/src/naviserver/ns_cache.man
        doc/src/naviserver/ns_conn.man
        doc/src/naviserver/ns_crypto.man
        doc/src/naviserver/ns_getcontent.man
        doc/src/naviserver/ns_http.man
        doc/src/naviserver/ns_locationproc.man
        doc/src/naviserver/ns_log.man
        doc/src/naviserver/ns_parseurl.man
        doc/src/naviserver/ns_schedule.man
        doc/src/naviserver/ns_sendmail.man
        doc/src/naviserver/ns_urlspace.man
        doc/src/naviserver/ns_write.man
        nsssl/doc/mann/nsssl.man

 - Added examples for "ns_getcontent" to the manual pages

 - Improved sample configuration files:

   . Added a section for the sample config files how to use the
     letsencrypt NaviServer module
   . Updated cipher configurations as recommended by Mozilla in
     sample configuration files.



Code Changes:
-------------
 - Improved naming of functions
 - OpenSSL: aligned code with current snapshot of OpenSSL 3.0* (3.0.0-beta3-dev)
 - Aligned stubbed functions with Linux prototypes (use "restrict" keyword)

 - Extended regression test
    . Improved setup in tests for testing with private keys
    . Added testing for application/json with UTF-8 charset vis ns_http
    . Fixed handling of ns_hostbyaddr under macOS
    . Added 90 additional tests

 - Code Cleanup
    . Improved security by reducing usage of "ns_mktemp":
      use on the Tcl level "file tempfile ..." (introduced in Tcl 8.6)
      instead of "ns_mktemp" whenever possible.
    . Do not require to have tcllib package "try" installed when using
      Tcl 8.6 or newer
    . Use also in test cases reentrant version of localtime()
    . Reduced (harmless) data races
    . Fixed issued found by facebook infer 1.1.0
    - Avoided passing NULL after the last typed argument to a variadic function

 - Added ability to pass "CFLAGS_OPTIMIZE=..." to "make"
   (eases build specific optimization)

 - Improved comments, fixed typos


=======================================
NaviServer 4.99.21, released 2021-04-09
=======================================

 64 files changed, 939 insertions(+), 536 deletions(-)

New Features:
-------------

 - Logging improvements: Added parameter "logsec" and "logthread" for
   section "ns/parameter" to make logging of full timestamps and
   thread info optional. This gives more control to a developer to
   shorten the log entries e.g. on development instances by excluding
   certain values.

 - Made "ns_http ... -decompress ... "obsolete in favor of new option
   "-raw".  This fixes as well a crash.


Bug Fixes:
----------

 - Fixed computation of "location" of a request for cases where the
   network driver is not installed globally. The value of [ns_conn
   location] (and the redirect target) is often, but not always
   determined by the host header field as used for virtual servers.

 - Fixed handling of sendBodyLength in ns_http

 - Fixed handling of user-ids in nscp.

 - Fixed potential segmentation violation in debug output, when (a) the
   network driver is installed locally, and (b) the content of host
   header field cannot be located in virtual server map (fallback to
   validation via driver data).

 - Fixed potential segmentation violation when nsd is called with '-c'
   and '-t' and the config file contains no "home" parameter in the
   config file. The fix simplifies the logic, and performs same
   configuration of nsconf.home whenever "-c" is used in the command
   line.

 - Increase sysadmin-friendliness of OCSP handling in error cases: In
   case OCSP (Online Certificate Status Protocol) is activated and the
   connection to the AIA-server is blocked, do not reject all traffic
   but behave like in a configuration without having OCSP activated,
   and complain the system log.  Background: Sometimes requests to the
   let's encrypt AIA server seems to be blocked by
   firewalls. Previously, in such situations, all traffic was
   blocked.

 - Relax bailing out on malloc(0), since at least the OpenSSL 3a*
   versions use this frequently on certain configurations. Calls of
   malloc(0) are essentially useless and dangerous, but we cannot
   avoid these.

Performance improvements:
-------------------------

 - Added support for TCP_NODELAY for https sockets via configuration
   option "nodelay" in the nsssl driver section. For whatever reasons,
   NaviServer handled so far this option. The option can reduce the
   time of connection calls via https (clearly measurable in benchmark
   setups).


Documentation improvements:
---------------------------

 - improved the following man pages

        doc/src/manual/admin-config.man
        doc/src/manual/admin-tuning.man
        doc/src/manual/main-history.man
        doc/src/naviserver/ns_http.man
        doc/src/naviserver/ns_http.man
        doc/src/naviserver/ns_write.man
        nsdb/doc/mann/ns_db.man

Configuration Changes:
----------------------

 - New options "logsec" and "logthread" for section "ns/parameter"
   (see above)


Code Changes:
-------------
 - Extended regression test to cover e.g. the error cases from above.

 - Code Cleanup
    . Removed obsolete and deprecated functions ctime_r()
      and asctime_r() in favor of strftime().

    . Removed calls to deprecated Tcl functions

    - Don't pass (implementation-defined) NULL as last argument of a
      variadic function.

    - Usual cleanup, such as reduced implicit type conversions,
      removed useless casts, removed dead assignments

 - Improve comments, fixed typos


=======================================
NaviServer 4.99.20, released 2021-01-17
=======================================

 380 files changed, 27639 insertions(+), 12103 deletions(-)

New Features:
-------------

 - Ns_Time reform

   * Support for time units:
     . arguments of functions accepting time durations can be provided
       now with a time unit suffix (such as ms, s, m, d). These values
       can be written e.g. as 1.5ms, 3h and the like.
     . units can be used as configuration values wherever appropriate
     . time values wherever appropriate in documentation
     . commands using Ns_ObjvTime can be specified now with time units
     . This change is fully backward compatible for all commands
       and configuration options accepting seconds, which was normally the case.
     . All sample configuration files have been updated with time units

     . nsproxy: The only exception to the precious sentence is nsproxy,
       where durations we specified in earlier releases as
       milliseconds. This is a POTENTIAL INCOMPATIBILITY with previous
       versions. These parameters are
        * config parameters of the nsproxy module
          "evaltimeout", "gettimeout", "idletimeout",
          "recvtimeout", "sendtimeout", "waittimeout"
        * ns_proxy get: changed "-timeout" parameter to time unit value
        * ns_proxy wait: changed optional "timeout" parameter to time unit value

    * Change granularity from seconds to Ns_Time (internally and in Tcl API)
      . Added proper handling of negative values in Ns_Time (was
        broken/not implemented)
      . Upgraded scheduling machinery from seconds to Ns_Time values
      . Extended Ns_Time arithmetic (Ns_DiffTime()) to handle positive
        and negative Ns_Time values
      . Extended regression test for ns_time significantly
      . Ns_After(), Ns_ScheduleProc(), Ns_ScheduleProcEx(): change
        argument from int secs to Ns_Time
      . Marked Ns_ScheduleProc() as deprecated, Ns_ScheduleProcEx()
        should be used instead.
      . ns_schedule_proc, ns_after: support time specs with time units
        (instead of only full seconds)
      . Ns_TimeToMilliseconds(): new API call for converting positive
        and negative Ns_Time values to ms
      . Ns_DStringAppendTime(): format times in a more compact form (no
        trailing zeros)
      . Use consistently Ns_TimeToMilliseconds() to convert Ns_Time to ms
      . Ns_ObjvTimeRange, Ns_CheckTimeRange(): support to specify time
        ranges in argument handling
      . Trim trailing zeros after comma point when printing Ns_Time,
        represent as int when possible
      . "ns_info scheduled" returns now timestamps in sub-second
        resolution (with a second faction).  By this, the runtime of the
        scheduled procedure can be determined on the sub-second level.
        (potential incompatibility)
      . Added handling of "schedmaxelapsed" on the sub-second level.

 - HTTP client request logging

   NaviServer can now optionally write a logfile for outgoing HTTP
   requests initiated via "ns_http". This is important for webservers
   that are dependent on other web services for the healthiness and
   performance. The logfile is similar to the access.log and suitable
   for automated analysis. Previously, NaviServer was "blind" on that
   data. Now it is easier to provide data about the performance of
   external services (e.g. cloud services such as authentication, Google
   Firebase Cloud Messaging, Office 365, ...)

   To activate HTTP client request logging, a new config-file section
   "ns/server/$server/httpclient" was created where logroll, logrollfmt
   and the other usual logging parameter can be specified.

  - New command line option for NaviServer: "-T"

    When this option is used, NaviServer just checks the configuration
    file (specified as usual by "-t") for syntax errors.  This option
    should be used on production sites to reduce the downtime of a
    server in case of typos.

 - Added support for "100 CONTINUE"

   This feature is in HTTP since a very long time, but not widely
   supported although useful (best support is currently in curl). When
   the client sends "Expect: 100-continue", the server can check the
   header fields and provide an early feedback, whether it is useful to
   transmit the full body. This way, e.g. content which is too large can
   be rejected quickly.

 - Improved server liveliness under high load (improved and configurable
   handling of connection queue overrun)

   When NaviServer processes an HTTP request, it is received (head and
   body) and associated with a connection thread pool. If the thread
   pool has a thread free, the request is directly assigned to this
   thread. Otherwise, the request is added to a queue of the connection
   pool, waiting for a connection thread.  Since the queue has a limited
   size (limited by "maxconnections"), this queue might overrun. In this
   situation, the received request is added to a waiting list. Here is,
   where the behavior is now improved.

    1) previously, as soon as there were entries in the waiting list, no
       more fresh requests were accepted by the driver (just working on
       waiting requests). While this behavior is sensible if only one
       connection pool is available, it causes a blocking behavior in
       cases, when a single connection pool overruns but others could
       continue. Now, more fresh requests are still accepted in this
       situation.

    2) In addition, it is now possible to configure the overrun behavior
       via two pool parameters:
       a) pool parameter "rejectoverrun": when set to true, NaviServer sends on
          queue overruns an error "503 service unavailable". The overflowing
          request is not added to the waiting list.
       b) when (a) is set, it is possible to specify parameter "retryafter"
          with a time interval to add reply header field "Retry-After" to the
          503 response. (see https://tools.ietf.org/html/rfc7231#section-7.1.3)

   When "rejectoverrun" is false (default) then behavior is similar to
   before, accept the server does not fully block. The request is kept in
   the waiting list, which is checked, whenever a request finishes. For
   the client, there is no need to resubmit the request, which will be
   proceed eventually. Technically, this means an arbitrary large queue.

   When "rejectoverrun" is true, then the request causing the overrun is
   rejected, and will have to be resubmitted by the client (maybe
   automatically, when "Retry-After" is specified. However, the client
   support for "Retry-After" is rather bad.

   For busy sites, "rejectoverrun" is probably the better behavior,
   since no background queuing in the waiting list is performed. For
   now, we keep the old behavior as default for better backwards
   compatibility.  The default might change in the future.

 - General support for running NaviServer behind a reverse proxy server

   This change provides general support for running NaviServer behind a
   reverse proxy.  Previously, the support was rather punctual (e.g. for
   nslog). Reverse proxy mode is activated by setting the global
   parameter (in section "ns/parameters") named "reverseproxymode" to
   true (default false).

   Current limitation: In the current implementation, NaviServer supports
   only the "X-Forwarded-For" header field, which is supported by most
   proxy servers, treating the first provided IP-address as the client
   IP address (see https://en.wikipedia.org/wiki/X-Forwarded-For). The
   newer "Forwarded" header field is currently not supported.

   In the reverse proxy mode, the client address is taken as forwarded
   by the reverse proxy. This has the following consequences:

   * Reported IP address by the following commands.

          ns_conn peeraddr
          ns_server all|running
          ns_writer list
          ns_connchan list

   * Reported IP address in the access.log

   * Context filters (used e.g. for mapping requests to pools)

     In reverse proxy mode, all IP-address specific context filters
     refer to the x-forwarded-for addresses. This makes it possible to
     use context filters (of URLspace commands) based on IP-addresses
     (IPv4, IPv6, with masks) also behind reverse proxy
     servers. Previously the IP-based mapping was just possible when no
     reverse proxy was in use.

 - Allow a single driver to listen on multiple ports:

   This new feature simplifies setups, where a single server is
   listening on multiple ports using the same driver. Previously, it was
   necessary to define separate drivers for such cases, which need
   different names but which are often configured identically.  Together
   with the change introduced in 4.99.19 (support for multiple listen
   addresses) this means that when multiple addresses and multiple ports
   are specified for a single driver, it will listen on the cross
   product of all combinations. The maximum number of listening ports of
   a driver is limited by a compile time constant to
   MAX_LISTEN_ADDR_PER_DRIVER (per default 16).

   To use this feature, specify in the configuration file for "port" in
   the network driver section a space separated list of multiple
   ports. This change is fully backwards compatible, old configuration
   files will continue to work.

 - SSL/TLS improvements:

   * Support for OCSP Stapling

     . NaviServer obtains and provides information about the validity
       of the used certificates. For proving this information, the
       server performs two level of caching: in-memory caching and
       disk caching. When the server receives the first TLS request
       with OCSP stapling turned on, it checks for an already
       retrieved OCSP response. The disk cache file is saved in the
       "log" directory of the server and uses the serial number of the
       certificate to be checked as filename with ".der" as
       extension. When the disk cache file does not exist, an
       http/https request is made to the server issuing the servers
       certificate as defined by the Authority Information Access
       (AIA) Extension. The names of the file and the http/https
       request for the OCSP response can be obtained from the system
       log of the server

     . OCSP Stapling can be turned on in the configuration files (see
       sample configuration files)

     . OCSP Stapling requires OpenSSL 1.1.0 or newer

  * Support for server-side SNI (Server Name Indication (SNI)

     Server-side SNI can be used to use different certificates for
     virtual hosts. In addition to the top-level certificate, different
     certificates can be defined per virtual server (below: srv2). The
     certificate will be registered for all alternate names specified
     for the server.

     In addition to the certificate, also all other OpenSSL specific
     parameters (ciphers, protocols, ...) will be loaded form the same
     place as the certificate. The following example shows the setup for
     two virtual servers "srv1" and "srv2", where the first one is the
     default server.

        ns_section ns/modules {
          # ...
          ns_param        nsssl           ${bindir}/nsssl.so
        }
        ns_section ns/module/nsssl {
          # ...
          ns_param   defaultserver   srv1
          ns_param   certificate     /usr/local/ns/modules/nsssl/srv1.pem
        }
        ns_section "ns/module/nsssl/servers" {
           ns_param   srv1            test.org
           ns_param   srv1            www.test.org
           ns_param   srv2            someotherhost.org
        }
        ns_section "ns/server/srv2/module/nsssl" {
          # ...
          ns_param   certificate     /usr/local/ns/modules/nsssl/srv2.pem
          ns_param   ciphersuites    TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        }

     SNI support includes OCSP, DH ephemeral key exchange, reuse of SSLcontexts.


   * Support for OpenSSL "ciphersuites" (TLSv1.3 feature)

   * Support for client-side SNI: new parameter "hostname" for
     "ns_connchan open"

   * Support for removing TLSv1.0, TLSv1.1, TLSv1.2, and TLSv1.3 via
     configuration file


 - ns_http:

    * Clear separation of "-timeout" and "-expire":
       . "-timeout" is used for single communication acts (e.g. connect, read write)
       . "-expire" is used for limiting the full duration of the
         request (also useful for slow read/write attacks).

      Scripts already using the -timeout will most probably not see
      any change unless they are handling huge up/downloads. In such
      cases we will now continue with the request, instead of
      terminating it in the middle.

    * added "-binary" flag to transmit data binary and perform no
      automatic encoding transformations.

 - moved code repository on BitBucket from mercurial to git.
   * adjusted documentation
   * adjusted build system (Makefiles)



 - Logging improvements:

   * New log severity "Debug(timeout)" to force NaviServer to write an entry to the
     systemlog, whenever a timeout occurs. Therefore, the command

        ns_logctl severity Debug(timeout) on

     can be used to debug cases, where NaviServer runs into HTTP status code 503
     (Service Unavailable).

   * Logging of commands with high latency:

     Provide a consistent interface and naming convention for logging
     slow commands for nsproxy, ns_jobs, scheduled procedures and SQL
     (nsdb drivers).

     . nsproxy and nsjobs have a new configuration option "logminduration"

       This configuration option specifies a time-limit for logging
       (long) eval operations to the system log (similar to
       "logminduration" in the database drivers). Set it to a high value
       to avoid logging (e.g. 1d). The default is 1s.

     . scheduled procedures:
       Changed "schedmaxelapsed" to "schedlogminduration" for consistency.
       This is a potential incompatibility for old configurations.


 - New commands:

   * "nsv_dict":

      The new command "nsv_dict" provides thread-safe support for
      setting, getting, updating, and unsetting dict values in nsv
      array.

      Motivation: Some larger OpenACS installations have currently more
      than 1 mio (!) nsv arrays, which comes mostly from creating nsv
      arrays per packages. Most of these arrays have only a few keys
      with very short values. The number of arrays can be greatly
      reduced by supporting complex values (dictionaries), similar to
      REDIS hash values.

      . "nsv_dict" supports nested dicts like in Tcl

      . The following dict commands:

          nsv_dict append  array key dictkey dictvalue:0..n
          nsv_dict exists  array key dictkey:1..n
          nsv_dict get     array key dictkey:0..n
          nsv_dict getdef  array key dictkey:0..n default
          nsv_dict incr    array key dictkey ?increment?
          nsv_dict keys    array key ?pattern?
          nsv_dict lappend array key dictkey dictvalue:0..n
          nsv_dict set     array key dictkey:1..n dictvalue
          nsv_dict size    array key
          nsv_dict unset   array key dictkey:1..n

     . added 41 test cases in regression test for nsv_dict

   * "ns_dbquotelist": similar to "ns_dbquotevalue", but provides
     quoting for Tcl lists.

   * "ns_trim": multiline trim command:
      ns_trim ?-subst? ?-delimiter delimiter? text


 - New features for existing commands/subcommands

   * New subcommands "keys" and "values" for "ns_set":

        "ns_set keys /setId/ ?pattern?"
        "ns_set values /setId/ ?pattern?"

     The commands are similar to the Tcl command "dict keys" and "dict
     values" and can reduce the necessity for loops.

   * Form processing:

      . "ns_getformfile": return a list of filenames when "multiple"
        attribute is provided in the input field and multiple files are
        submitted

      . Decouple content-type processing from HTTP methods:

        Previously, parsing of form data in these two formats happened
        only on POST requests. However, several REST services use often
        also PUT with form data and distinguish POST and PUT methods
        mostly by "add item to a collection" (POST) and process single
        item (PUT) but not by their content-type processing. This change
        eases implementation of REST services.

      . Perform more strict parsing based on "ns_parsefieldvalue" and
        "ns_parseheader" in file-based form parser (for spooled
        content).  Previously, there was a bug with the regexp-based
        parsing, when e.g. a filename of and upload file contained
        e.g. a semicolon.

   * "ns_conn":
      . new subcommand "headerlength"
      . "ns_conn auth" returns now Information about "Bearer"
        authentication (RFC 6750) when applicable, used e.g. in OAuth2
      . "ns_conn peeraddr": New flag "-source" for specifying detailed
        information about the peer, especially useful in combination
        with reverse proxy mode; allowed values are "configured",
        "direct", "forwarded".

   * "ns_cookie": Support explicit setting of "same-site=none"

     In previous version of browsers, no explicit setting
     of the samesite flag was exactly the same as explicit setting.
     Since some browsers switched to a default of "lax", explicit
     setting became necessary.

   * "ns_dbquotevalue": provided a C implementation; was scripted
     before.

   * "ns_connchan":
      . Added option "-server" to "ns_connchan close" to be able
        to cleaning stale handles of every server.

      . Added C-level WebSocket support and buffered output handling.
        The new code is about 200x faster than the Tcl version
        (especially when bytewise XORs are needed), simpler to use (no
        Tcl-leval handling of incomplete frames, split frames, remaining
        leftover from partial writes) and more complete (handling of
        segmented WebSocket messages).

      . "ns_connchan read -websocket ....": returns a dict containing
        the WebSocket data (including payload, WebSocket status bits,
        buffering state, etc.; see documentation and NaviServer
        websocket module for details)

      . "ns_connchan write -buffered ..." handles partial writes via an
        internal buffer (Tcl developer has just to take care about
        writable callbacks when necessary)

      . "ns_connchan wsencode ...": WebSocket frame generation, returns
        binary data based on input parameters suitable for sending on a
        WebSocket channel.

      . "ns_connchan status ..." returns a dict containing the buffering
        status of a channel.

   * "ns_urelencode": added one more option "oauth1" for the "-part"
     argument. The "oauth1" encoding is defined in RFC 5849 Section 3.6
     for the construction of the signature base string and the
     "Authorization" header field.

   * "ns_ictl":
      . "ns_ictl trace idle ...": new tracetype "idle", which fires,
        when a connection thread is idle for the threadtimeout period,
        but minthreads is already reached, and the thread won't
        terminate.

      . "ns_ictl maxconcurrentupdates ?max?": Configuration option
        for specifying the maximum number of concurrent updates
        for interpreter reloads (when epoch increases, e.g. reloads
        on OpenACS).

        Background: For large (say 50-100 connection threads) and busy
        sites (sustained 800 requests per second) with large
        blueprints (e.g. OpenACS) blueprint updates can cause delays
        when all these operations are concurrently performed. The
        blueprint updates happen when the epoch is incremented
        (e.g. in OpenACS: reloads of packages).  A too high number of
        concurrent blueprint updates cases (a) delays in request
        processing (b) increased update times per thread (e.g. up to
        10 seconds). As a consequence, queueing will happen.  This new
        option limits the number of concurrent updates (e.g. to 10)
        leading to smooth operations in such situations. When the
        maximum number of concurrent blueprints is reached, the pending
        updates are delayed until the limit is sufficiently low. By
        default, the value is unlimited.

   * Improved statistics:
     . "ns_server stats" returns now as well dropped requests from queue
       overruns.

     . "ns_info locks": report number of read and write operations for
       rwlocks.

     . "ns_proxy stats": report also the number of running worker
        processes.

   * "ns_getcsv":
     . provide compatibility with RFC 4180
     . accept multi-line input
     . handle quotes in quotes and empty elements
     . optionally stripping unquoted elements (not covered by RFC)

     . optional support for a different quote character (option
       "-quotechar"). Although RFC 4180 specifies double quotes as
       quoting chars, sometimes also different quoting characters,
       which can be now successfully decoded.

   * "ns_parseurl": Support for fragment parsing.  When provided URL
     contains a tail element, this is now parsed info a "query" and/or
     "fragment" component in the result. Previously, the query and
     fragment part was included in the "tail" element.

   * Improved thread naming for log-files: previously, it was not clear,
     from which server some output of the "main" thread originated.
     The new version adds always a server name specific suffix.

   * "ns_driver info": return also "port" and "defaultport"




Bug Fixes:
----------

 - Improved support for newer versions of OpenSSL (handling of
   SSL_R_UNEXPECTED_EOF_WHILE_READING)

 - ns_cache: Base cache size calculation on the full size of a
   cache entry.

   In previous versions, the cache size calculation was based only on
   the value size, leaving the size of the key and the size of the
   overhead (size of cache entry, about 126 bytes on a 64-bit machine)
   aside. This is misleading, when the cache value
   size is 0 bytes (just using the cache key as a flag), leaving admins
   wondering about the memory consumption.

 - Report to log file, when ns_ictl traces are not executed. Previously,
   these were silently ignored (e.g. in some error cases).

 - Fixed a bug with PUT methods, when query-parameters were passed in
   addition to the put content.  Previously, these parameters were only
   available via [ns_queryget ...] when the content file was not
   spooled.

 - Fixed bug for custom error pages for HTTP methods other than GET
   (Custom error handles are defined as before via redirect sections):
    * Always use GET in the redirection not the original HTTP method.
      When e.g. "PUT /somepage" is requested, where no PUT handler
      but a custom error page /405.tcl, the previous code tried a
      PUT /405.tcl, leading the same error. Now, the error
      page us delivered like with a GET request.
    * Provided a hint as a warning, where NaviServer searches
      for non-existing pages.
    * Extended regression test: cover HEAD requests for existing
      and non-existing pages, and various forms of redirects.

 - Fixed issue with tDOM as noted by Maksym Zinchenko on the
   naviserver developer list:

   A recent change of tDOM 0.9.2 introduced a namespace local command
   "namespace" which was picked up by the blueprint generator
   incorrectly instead of the global ::namespace command.  As a fix, all
   "namespace" invocations in the blueprint generator were replaced by
   "::namespace" to avoid considering invocation context for every
   occurrence.

 - Fixed potential abortion of regression test runs under macOS:

   Under macOS, tests runs were sometimes abruptly ended with a
   broken pipe signal. The call "NsBlockSignal(NS_SIGPIPE);" does
   not avoid these signals. So, we ignore bluntly all such
   signals by using "NsBlockSignal(NS_SIGPIPE);"

 - Fixed charset handling for spooled requests.

 - Fixed several cases of invalid chunked data (potential buffer
   overflows).

 - Don't swallow errors in braced config sections in the configuration file.

 - Fixed a potential crash, when certain configuration section were missing,
   but code tried to obtain configuration values from such sections.

 - Blueprint generation:
    * Fixed bug with interp aliases defined without fully qualified
      namespace path
    * Improve robustness when "rename" is used (when source exists and
      target does not exist)

 - Support calling "ns_conn status" (with the argument setting the HTTP
   return status) in traces (without open connection).

 - Make code more robust in case Tcl and NaviServer were compiled
   with different memory allocators. The mix if memory allocators
   could crash NaviServer.

 - Race Conditions:
    * Fixed several race conditions in "ns_http"
    * Fixed race conditions in "ns_connchan list" and "ns_connchan create"

 - Use time_t for secs in Ns_Time, since long is just 32-bit on 64-bit
   windows, but time_t is 64 bits.

 - "ns_writefp": fixed to act as advertised (read to end of file when no
   length is provided)

 - "ns_sendmail": Convert leading "." in message bodies to ".." as
    required by RFC 5321 section 4.5.2

 - "ns_cache" transactions: in certain situations, where during
    concurrent entry creates, and one of the create attempts failed and
    the other succeeded, and the one of the cache transitions is rolled
    back, updates could lead to an error.

 - "ns_connchan": Fixed registry of connchans from all servers to the
    default server (not the best scalable solution, but useful as long
    we have only one "socks" thread (for more details see:
    https://sourceforge.net/p/naviserver/mailman/message/37179476/)

 - Fixed a 20-year-old time bomb in HTTP time parsing. Server was rejecting
   to parse HTTP time strings for 2021.


Performance improvements:
-------------------------

  - nsv_lappend:

    The old implementation showed a linear slowdown for nsv_lappend
    operations depending on the number of elements in the list. The
    new implementation avoids frequent string to list and vice versa
    operations by using Tcl_DStrings. It is essentially independent on
    the number of elements in the nsv.  For a list with 10K elements,
    the performance improvement is about a factor of 400.

    Test:
       nsv_set d 1 1
       time {nsv_lappend d 1 1} 10000

    OLD:
       403.7255 microseconds per iteration

    NEW:
       0.860547 microseconds per iteration

   This change makes it possible to use the OpenACS developer support
   on busy sites (before, this led to a quick standstill).

  - nsv_append:

    The performance gain is much less than with nsv_lappend (see
    previous commit), but still noticeable (about 35% faster, 10K
    ns_append operations went from 0.94 microseconds to 0.62

  - Locking:
    * Reduced mutex-locked regions in driver.

    * Use ptrhreads interface for Ns_RWLock* when available

      So far, Ns_RWLock* used an implementation based on mutexes and
      cond vars. This implementation has the advantage of being
      portable. However, since on all *nix platforms, NaviServer uses
      the pthread library, using the POSIX rwlock implementation poses
      no additional dependency.

      Performance comparison fur using mutex/old rwlocks/pthread rwlocks
      on ns_urlspace;

            macOS (8 cores) rwlock (POSIX)  0.3105    2,27 %
                            rwlock (ns)     11.5263  84,23 %
                            mutex (ns)      13.6839 100,00 %

            Linux (6 cores) rwlock (POSIX)  0.6081   43,38 %
                            rwlock (ns)     3.6259  258,66 %
                            mutex (ns)      1.4018  100,00 %

      This data shows that the POSIX rwlocks implementation
      (pthread_rwlock_rdlock etc.)  is always better than the classical
      NaviServer rwlock implementation, and that significant
      improvements can be achieved by using rwlocks. A more detailed
      performance comparison was provided on the developer mailing list.

      This change introduces:
      a) Ns_RWLock* based on pthreads when available
      b) switch to recommended configure setup for pthreads (AX_PTHREAD)
      c) New API call: Ns_RWLockSetName2() modeled after Ns_MutexSetName2()
      d) New API call: Ns_RWLockList() modeld after Ns_MutexList()
         (removed dependency of rwlocks to mutex statistics)

   * Support rwlocks for nsvs:

     Per default, rwlocks are used for all nsv* commands.  The default
     behavior can be altered by setting the configuration variable
     "nsvrwlocks" to false in the section ns/server/${server}/tcl of
     the configuration file.

     This change can lead to improved scalability especially on
     multi-core machines since in read cases, the variables can be
     accessd unblocked for parallel executions. In most applications nsv
     are typically more often read than written rwlocks offer better
     scalability for large sites.

     The following table compares the busy locks with mutex operations vs
     the number of busy locks with rwlocks for openacs.org:

       With mutex (24h)
                                    locks   busy
       nsv:3:openacs.org    27      4.71M   1.3K
       nsv:6:openacs.org    24      4.88M   1.03K
       nsv:2:openacs.org    28      3.37M   784
       nsv:7:openacs.org    23      9.11M   755
       nsv:5:openacs.org    25      2.88M   460

       With rwlocks (24h)
       nsv:7:openacs.org    1       7.22M   0
       nsv:6:openacs.org    2       3.92M   143
       nsv:3:openacs.org    5       3.31M   1
       nsv:2:openacs.org    6       2.23M   16
       nsv:5:openacs.org    3       2.16M   0

     On more busy sites, the improved scalability si much higher.

   * rwlocks are better in cases, where the number of readers is
     significantly higher than the number of writers.  So, it has to
     be carefully considered in which cases rwlocks should be
     preferred.  The new version uses rwlocks for nsv, ns_connchan,
     filters and tcl.cache (rwlocks for nsv and filters can be
     deactivated via configuration file). Earlier version used
     rwlocks already for adp tags, epoch handling and permissions.

 - Avoid multiple library initializations for OpenSSL 1.1.0 or newer.


Documentation improvements:
---------------------------

 - Update references to Tcl website (replace http://tcl.tk by
   https://core.tcl-lang.org)

 - Added hints about required OpenSSL version to man pages

 - Made manual pages more consistent
 - Consistent indentation of program examples in documentation
 - Made source code documentation more consistent

 - Improved source code documentation (provide more details, remove
   obsolete comments)

 - Removed deprecated man pages
 - Removed obsolete sections in manual pages
 - Follow the recommended spelling convention of the Linux documentation
   project
 - Improved spelling, typesetting, and cross references
 - Reduced technical jargon
 - Made code listings in documentation more consistent (e.g. indenting)
 - Added missing commands in command list (overview page)
 - Updated listing of deprecated commands and suggested alternatives
 - Replaced several "slave process" by "child process"

 - 161 manual pages were updated since the last release


Configuration Changes:
----------------------

 - New configuration options:

    * Section "ns/parameters"

      . "reverseproxymode": Activate reverse proxy mode.  The former
         configuration parameter of "nslog" named "checkforproxy" is
         obsolete now.
      . "joblogminduration": report jobs taking longer in systemlog
      . "schedlogminduration": report scheduled jobs taking longer in systemlog

    * Section "ns/server/${server}"

      . "rejectoverrun": when true send 503 when queue overruns;
         default "false"
      . "retryafter": time for Retry-After in 503 cases

    * Section "ns/server/${server}"
      . "filterrwlocks": use RWlocks for filters (default: true)

    * Section "ns/server/${server}/tcl"
      . "nsvrwlocks": use RWlocks for nsv (default: true)

    * Section "ns/server/$server/httpclient"
      . "logging": (default: off)
      . "logfile": name of http client logfile
      . "logrollfmt": format appended to log filename
      . "logmaxbackup": max number of backup log files (default: 10)
      . "logroll": perform automatic rolling (default: true)
      . "logrollonsignal": (default: false)
      . "logrollhour": specify at which hour to roll (default: 0)

 - Sample configurations:

    * Added values with time units where appropriate
    * Added new values mentioned above with short comments

    * For multi-server configuration files: use always the first (and
      not the last) server as default server.

    * openacs-config.tcl:
    * sample-config.tcl:

       . fixed config parameter: use "dnscachetimeout" instead of "keepwaittimeout"
         (name was changed in NaviServer ages ago, but change was not
         reflected in config files

   * nsd-config.tcl:

   * win32/test/nsd.tcl
     modernized test config file

   * nsproxy: Changed term "maxslaves" to "maxworkers" (the old term
     is deprecated)


Code Changes:
-------------

 - Fixed potential access to an out-of-scope stack variable.
 - Added more declarations for PURE and CONST functions
 - Replaced usage of reserved identifier [cert-dcl37-c,cert-dcl51-cpp]
 - Replaced sscanf() by strtol*() to increase code-safety
 - Improved structure packing

 - Marked "ns_adp_mime" explicitly as deprecated, and provide deprecated
   messages for it.  The command was deprecated more than 10 years ago,
   ns_adp_mimetype should be used

 - Added mime types for "heif" and "heic" which have become a preferred
   image type for iOS and macOS.

 - Regressions testing:

   * Reduced usages of old-style nstest::http-0.9 (socket and not
     ns_http-based tests)

   * Make test more robust concerning CRLF results (Windows)

   * Extended tests:
     367 tests were added since the last release
     (changes in 38 test files)

 - Improved logging:
    * Added metering for long wait times of Ns_CsEnter locks
      (e.g. Ns_MasterLock)
    * Added concurrency level to log message of interp updates
    * Added warnings, when an NsTclRequestProc or an ADP request runs
      into a timeout.

    * Reduced time sensitivity on time when rolling log files_ Rolling
      log files happens often at midnight, using often a day
      precision. When e.g. a scheduled procedure the time when this
      function is called might be slightly after the scheduled time,
      which might lead to a day jump. The problem aggravates, when
      multiple log files are rotated.  The new code identifies day wraps
      and uses in such cases the earlier day.

 - Improved portability:
   * Improved compatibility with the forthcoming OpenSSL 3.0
   * Improved compatibility with various versions of LibreSSL
   * Improved Windows (MSVC) compatibility
     . Simplified Makefile.win32 for nmake
     . Fixed thread exit result handling for 64-bit Windows
     . Fixed thread handle access
     . Fixed default temp directory for windows
     . Turned on OpenSSL by default
     . Minimal support for running regression tests under windows
     . Fixed windows size incompatibility for range requests (64-bit
       Windows uses a 32-bit sized offset type off_t)
     . Fixed ns_sockselect for 64-bit windows installations
     . Fixes for cross-compiling for Windows 64-bit (using gcc/mingw)
   * Use consequently NS_EAGAIN (can be used in *nix and Windows)
   * Fixed potential problem with GNUC_PURE for older version of gcc
   * Removed dependency of tests from an explicit "/tmp" directory
   * Fixed regression test warnings with older versions of curl for IPv6 addresses
   * Fixed m4 configuration for "crypt_r" (broken since many years)
   * Compiled with macOS 10.14.6, Ubuntu 20.04, Fedora Core 32, OpenBSD
     6.8 (LibreSSL 3.1.1), FreeBSD 12.2

 - More OpenSSL changes:

   * Reactivate CRYPTO_set_mem_functions() for OpenSSL 1.1.0 or newer
     (interface om OpenSSL has changed)

   * Switched to SSL_CTX_set_dh_auto() from low-level functions: In
     newer versions of OpenSSL, all low-level DH* functions were
     deprecated.


 - Build-system
   * Compute version tag from git similarly like to the mercurial version.

 - improved support for MS windows
   * Windows math.h does not include round(), add simple implementation.

 - Added cross-platform function ns_localtime_r (localtime with
   user-provided storage): The previously defined function
   ns_localtime() uses a single per-thread local storage, so, it was not
   possible to have in one thread two time buffers with different
   values.



- Improved error code handling on driver receive operations

   Previously, higher level of API calls were not able to access
   realiably the error information detected on the lower-level (async
   I/O-based or OpenSSL based) driver operations. This made it
   impossible to provide good error messages e.g. in "ns_connchan" and
   we could not provide error processing based on Tcl error
   codes. Furthermore, the new interface works for POSIX errnos and
   OpenSSL errors and improves the situation (currently just for driver
   read operations).

   * Ns_Sock* based setting of Tcl error codes:

       NsSockSetRecvErrorCode(const Sock *sockPtr, Tcl_Interp *interp)

     Set the Tcl error code in the interpreter based on the
     information provided by Sock* (actually by recvErrno); the
     function works for OpenSSL and plain POSIX style error codes.

   * Setting Tcl error codes for POSIX errno:

        Ns_PosixSetErrorCode(Tcl_Interp *interp, int errorNum)

     Set the Tcl error code in the interpreter based on the POSIX
     errorNum and return the error message.

   * Setting Tcl error codes for OpenSSL error values

       Ns_SSLSetErrorCode(Tcl_Interp *interp, unsigned long sslERRcode)

     Set the Tcl error code in the interpreter based on the OpenSSL
     error value and return the error message.

   * Return the last error from a socket.

        Ns_SockErrorCode(Tcl_Interp *interp, NS_SOCKET sock)

     The function Ns_SockErrorCode() returns the last error from a
     socket. When the provided interp is not NULL it sets the Tcl error
     code based on the error code.


Modules:
--------
 18 files changed, 1858 insertions(+), 1195 deletions(-)

nsdb:
  * Added support for time units for nsdb LogMinDuration

nsdbpg:
  * Force bindvars to start with alnum or underscore (otherwise,
    surprises with e.g. lines ending with a colon might arise).
  * Align spelling with LDP recommendations.
  * Avoid shadowing of symbol "bind".

nssmtpd:

  * Escape all leading dots according to RFC 5321 section 4.5.2 in mail bodies
  * Fixed check, if relay host announced STARTTLS
  * Provide compatibility for versions before 4.99.19, when NS_FALL_THROUGH was not defined yet
  * Subsecond time resolution (Handled interface changes in post 4.99.19)
  * Support for 'ciphersuites' and 'protocols' parameters of 'Ns_TLS_CtxServerCreate'
  * I/O overhaul
   - Replaced select() call by poll() to ensure scalability
   - Pushed handling of EAGAIN etc. to the lowest level
   - Removed one layer of partial write handling
   - Replaced huge send buffer attempts, since these seem to be rejected sometimes
   - Improved robustness (never go into an infinite retry loop)
   - Handle potential "resource is not available" while sending SMTP data
  * Improved cleanness of compilation
  * Improved documentation
  * Align spelling with LDP
  * Code cleanup (C and Tcl code)
  * Extended regression test

nsdns:
  * Code Cleanup
    - Added NS_EXPORT to Ns_ModuleInit
    - Improved cleanness of compilation

nsudp:
   * Minor code cleanup (type cleanness, documentation)

nsphp:
   * Adjust to changed parameter types in PHP 7
   * Improved cleanness of compilation
   * Improved documentation
   * Brought test environment in sync with naviserver

nsstats:
   * Improved XSS protection for potentially user supplied strings
   * Improved statistics:
     - Added calculated maximum number of reqs/pool
     - Added "maxconnections" to the per-pool statistics,
       since it determines the queue length
     - Improved nsproxy output in "process" page (include seconds,
       don't truncate everything to 0 digits after the dot)
     - Added write-percentage for RWLock in lock statistics
     - Add statistics for dropped requests (queue overruns)
     - Added nsv usage statistics
   * Added web-interface for toggling between raw and human centric values
   * Aligned with fractional seconds interface in NaviServer 4.99.20
   * Improve help messages

nsoracle:

   * Changed the include order to avoid bad interactions between oci.h and zlib.
     with the previous include order, we run with recent oracle versions (19.5) into
        /usr/include/zlib.h:1677:4: error: unknown type name ‘off64_t’
     on 64-bit Linux systems (centos 7)

  * Added ORA_CFLAGS to allow developers to pass arbitrary include and library flags.
    Background: for some (newer?) version of the oracle client library,
    ORACLE_HOME (see README) seems to be gone.

  * Changes to build nsoracle on Windows with new Makefile.win32 file.
  * Improved cleanness of compilation

websocket:
  * Major rewrite, using C-level implementing in ns_connchan

    This version make uses of the new C-level support for WebSockets.
    The new version is several orders of magnitudes faster than the
    previous version, it is more robust (C-level handling of
    partial read and write operations) and it is more complete
    than previous versions (handling segmented messages).

  * Added deprecated function ::ws::build_msg for providing
    better backward compatibility
  * Provide name for mutex lock to ease tracing of long locks
  * Added client-side SNI (requires NaviServer 4.99.20)
  * Added simple WebSocket client interface

revproxy:
  * Improved exception handling (use try interface)
  * Preserve existing X-Forwarded-For IPs in cases where nsproxy is
    itself behind a proxy or load balancer
  * Switch to "ns_connchan write -buffered" to simplify leftover
    management for partial writes (requires NaviServer 4.99.20)
  * Fixed bug fix for potential stale handles
  * Code cleanup
    - Fine-tuning logging messages
    - Breaking overlong lines, reduce verbosity

letsencrypt:
  * Minor changes in documentation

nsldap:
  * Fixed result setting of "connected" subcommand
  * Updated modules interface to usual conventions
  * Added config parameter "schema" to specify other schemata
  * Improved documentation in README file
  * Reduced number of deprecated calls

nsshell:
  * Added HTML-escaping on results of Tcl commands before these are
    displayed in the shell.


=======================================
NaviServer 4.99.19, released 2020-01-06
=======================================

 247 files changed, 19527 insertions(+), 8275 deletions(-)

New Features:
-------------

 - Bandwidth management: limit download rate to a maximum (specified
   in kilobytes per second)

   On servers with bad internet connections, it is possible that a few
   eager downloaders can use up all available bandwidth.  NaviServer
   allows now admins and developers to specify the maximum outgoing
   bandwidth per connection or the total rate per connection pool. The
   rate limit can be specified per connection (highest weight) or per
   connection thread pool (second highest weight) or per network
   driver. The rate limitation is only active, when writer threads are
   used. Per default, the rate limitation is turned off (value 0).

   By using this option together with the context filters, one can now
   define e.g. a pool for bots and limit the bandwidth for all bots.

   The query the per-connection limit, ns_conn has a new option:
      ns_conn ratelimit ?limit?
   Introspecton "ns_writer list" returns the current
   transfer rates per writer job.

   Configuration option for connection pools:
      ns_param connectionratelimit ...
      ns_param poolratelimit ...
   Configuration option for network drivers:
      ns_param writerratelimit ...

   Commands for changing the rate limits dynamically:
       ns_server ?-server s? ?-pool p? connectionratelimit ?value?
       ns_server ?-server s? ?-pool p? poolratelimit ?value?


 - Context filter for urlspace:

   NaviServer's urlspace trie data structure used for various purposes
   such as registering methods/URL pairs for procs or for mapping of
   requests to connection thread pools. The classical trie mapping for
   e.g. "GET /foo/bar/*.html" is based on method + path + string match
   pattern, where the last part "*.html" is used as a "filter".

   The new version of NaviServer allows in addition to the string
   based glob pattern so-called "context filter", which includes the
   IP-address or header fields in the matching process. The context
   filters are applied after the classical urlspace processing, such
   that the behavior is fully backwards compatible. The context
   filters are kept in a stable order (IP before header-based filters,
   specific before less specific) such that the behavior is not order
   dependent.

   The new feature can be used map e.g. bots or certain IP ranges to
   the specified connection pools. When connection pools named "bots"
   and "local" are defined, one can use the following mapping commands
   to map incoming requests to the specified pools. Examples for
   adding urlspace mappings at runtime:

         ns_server -pool bots map "GET /* {user-agent *bot*}"
         ns_server -pool bots map "GET /* {user-agent *crawl*}"
         ns_server -pool bots map "GET /* {user-agent *baidu*}"
         ns_server -pool bots map "GET /* {X-NS-ip 2a03:2880::/29}"

         ns_server -pool local map "GET /* {X-NS-ip 127.0.0.1}"
         ns_server -pool local map "GET /* {X-NS-ip 137.208.1.0/16}"

   Note that arbitrary header fields can be used for the mapping,
   containing potentially some glob style match characters. The
   special header field "X-NS-ip" denotes IP based filters, which can
   be provided fully qualified or in CIDR notation (denoting
   significant bits) for IPv4 and IPv6.


 - Allow a single driver to listen on multiple IP addresses:

   This feature greatly simplifies setups, where a single server is
   listening on multiple IP addresses (e.g. IPv4 and
   IPv6). Previously, it was necessary to define separate drivers for
   these, which need different names but which are often
   configured identically.  Furthermore, when the address is omitted,
   the server performs a lookup from the hostname to determine the IP
   address. Previously, it used the first one, now it can work with
   all returned addresses.

   To use this feature, simply specify the configure values of
   "address" as a Tcl list containing multiple IP addresses. The
   change is fully backwards compatible, old configuration files will
   continue to work.


 - Added support for sending of multiple file chunks in a
   single connection:

      ns_writer submitfiles /list of filespecs/

   Every "filespec" is a dict which must contain a "filename" element
   and can contain additionally an "-offset" and/or a "-size" element.

      ns_writer submitfiles {{filename /tmp/f1} {filename /tmp/f2 -offset 10}}

   This function is e.g. useful for video streaming applications,
   where multiple video file chunks should be transferred (sometimes)
   concatenated in a single chunk. Therefore, this function avoids the
   necessity to concatenate these files in advance (causing increased
   latency and disk usage).


 - Added per-server "extraheaders". These extra headers fields are
   merged with the following precedence (the earlier ones have more
   weight)
     1) application specific headers
     2) per-server extra headers
     3) per-driver extra headers

   This change makes it possible to provide in the config files
   defaults, which can be overwritten by certain pages in the
   applications. Furthermore, one can e.g. common header fields to all
   requests of a virtual server (e.g.  Strict-Transport-Security, ...)


 - Logging improvements:

   * Support separate access logs for requests sent via
     different drivers.

     The nslog module accepts now an additional parameter named
     "driver".  This option can be used to produce different access
     logs for requests submitted via different drivers to sort out
     e.g. local server talk.  Per default, every request is
     logged. When a value is provided for "driver", only
     requests are logged in this log file when these come from a
     driver matching the provided glob pattern.

   * log-file sanitizer:
     When data entered into a log file contains special characters
     (e.g.  end line characters), these could alter the appearance of
     content within the log file. Single entries may appear as
     multiple entries.  Attackers may leverage log forging to insert
     fake entries to that obfuscate malicious acts, or these can
     confuse log-file analyzers to avoid analysis.

     The new global parameter "sanitizelogfiles" can control this
     behavior (values 0: none, 1: full, 2: human-friendly; default:
     2);

   * Additional debugging flag "Debug(access)": When activated, entries
     of the access log are mirrored in the system log
     (error.log). This option eases tracking the end of requests in
     the system log.

   * Additional debugging flag "Debug(writer)" for debugging of writer.

   * Provided access to request AND reply header fields via
     "extendedheaders" specification (in "ns_accesslog" and "nslog"
     configuration section):

     It is now optionally possible to specify the header fields in the
     provided "extendedheaders" list with a prefix "request:" or
     "response:" to denote request and reply header fields. In case,
     no tag is provided, field names are interpreted as request header
     fields (like before). The change is fully backwards compatible,


  - ns_set:

    * Added sucommand "ns_set imerge", a is the case insignificant
      version of "ns_set merge". This option is useful especially for
      working with header fields.

    * Added subcommand "ns_set iupdate": this command is the case
      insenstive counterpart of "ns_set update".

    * Fixed "nsv_set a b" when neither a key nor the array exists.

 - ns_http:
   * Revamp of ns_http and related supportive code.
   * Added chunked-encoding parser
   * Tcl channel support for body (PUT, POST) and for result.
     This makes it possible to use e.g. reflected Tcl channels
     in "ns_http".
     New Options for "ns_http run"
       - ?-body_size size?
       - ?-body_chan chan?
       - ?-outputfile fn?
       - ?-outputchan chan?
   * "ns_http run" is now the preferred interface
     (rather than "queue" + "wait")
   * Deprecated output variables of "ns_http wait" (since everything
     is included in the resulting dict)


 - New commands:

   * ns_asynclogfile:
     Facility for thread-safe writing async
     log files of various kinds using the AsyncWriterThread.
     Usage example:
        # ... at startup
        set fd [ns_asynclogfile open /tmp/test.log]
        # ... during run
        ns_asynclogfile write $fd hello\n
        # ... at shutdown
        ns_asynclogfile close $fd

   * ns_parsefieldvalue:

     This function parses the provided field value (from an HTTP
     request or reply header field) into its parts and returns these
     in the form of a list of Tcl dicts or a single Tcl dict depending
     on parameters. The syntax of the contents of these header fields
     is specified in RFC 7230 section 3.2.6.

 - New features for existing commands/subcommands

    * Binary reform: Some NaviServer commands accepted previously
      implicitly binary or non-binary input, some commands used
      the flag "-binary" to denote the differences (e.g. ns_return).
      For a more uniform and expectable behavior binary input the
      explicit option "-binary" flag to the following commands:

        ns_base64decode
        ns_base64encode
        ns_base64urldecode
        ns_base64urlencode
        ns_md5
        ns_sha1
        ns_uudecode
        ns_uuencode
        ns_crypto::aead::decrypt string (for "-key", "-aad", "-iv", "input")
        ns_crypto::aead::encrypt string (for "-key", "-aad", "-iv", "input")
        ns_crypto::eckey import ("-string")
        ns_crypto::eckey sharedsecret ("pubkey")
        ns_crypto::hmac add (for "message")
        ns_crypto::hmac new (for "key")
        ns_crypto::hmac string (for "key", "message")
        ns_crypto::md add (for "message")
        ns_crypto::md hkdf (for "-salt" "-secret" "-info")
        ns_crypto::md string (for "message")
        ns_crypto::md vapidsign (for "message")
        ns_crypto::scrypt (for "-salt" "-secret")

    Note that this option is not fully backward compatible. Early
    versions of "ns_sha1" were expecting always non-binary input, some
    new version assumed binary input. The new version is now more
    compatible with AOLserver and older NaviServer versions.

    * "ns_server threads" reports now how often a thread of this pool
      was started.  This statistic can help to identify
      installations, where threads are started and stopped in a too
      eager fashion.
    * "ns_server.... stats": added "sendbodysize" and "replybodysize"
      to the dict of the per-pool statistics.
    * "ns_server ... connectionratelimit ?value?": Query or set
       the default per-connection rate limit.
    * "ns_server ... poolratelimit ?value?": Query or set
       the pool connection rate limit.
    * "ns_writer list" returns now the current transferrates per
      writer job.

    * "ns_writer submitfile -offset X -size Y" and "ns_writer size X"
      accept now memory units, the option ?-driver driver? was added
      to the "ns_writer" subcommands "size", and "streaming"
      (defaulting to the current driver).

      One can now write
           ns_writer size 150KB
       instead of
           ns_writer size nssock [expr 150*1024]

Bug Fixes:
----------

  - Blueprint serializer: moved serialized objects in the blueprint
    after the namespace imports and ensemble recreators since
    constructors can call functions depending on it.

  - Include *xml* and *json* in non-binary MIME types. Note that
    there is no exact definition, what MIME types are exactly.

  - nslog:
    * Abort in error situation with an error message instead of crashing
    * Added server name in log entries to make it easier to distinguish
      messages per-server during bootup

  - Range requests:
    * Fixed potential problem with too many non-contiguous byte ranges
    * Don't silently ignore invalid syntax of range requests

  - Improved handling of already closed connections (data delivery was
    already delegated to writer threads, but driver still wants to
    return data directly; this could happen in error situations)

  - connchan:
    * Fixed potential invalid reads in (error) cases, where
      LogConnchanDebug is enabled and the callback is deleted during a
      Tcl_Eval().
    * Fixed potential problem, where call to Tcl_Eval() might clean
      structures used in the callback handler

  - Made sure, memory allocated by Tcl is returned by Tcl (important,
    when NaviServer is compiled with -DSYSTEM_MALLOC)

  - Fixed Tcl argument parsing of "ns_roll", "ns_fmttime",
    "nsv_bucket" and "ns_critsec eval".

  - Fixed bug in "nsv_set -default" overwriting pre-existing values

  - Fixed potential crashes in (desperate) error situations, where the
    connection was already closed.

  - Fixed leaking temporary file, when writerstraming is activated and
    streaming HTML output is used. This bug could appear, when
    "writerstreaming" is turned on in the config file (default off).
    See also: https://sourceforge.net/p/naviserver/mailman/naviserver-
        devel/thread/dd508519-1262-bd91-288a-fa30a7634224%40digital-
        concepts.com/#msg36794472

  - Made table used for enumeration values for Ns_ObjvIndex static.
    Background: This is a fix for a tricky Tcl_Obj sharing bug
    triggered by the usage of C-level IndexObjs based on volatile
    tables. Consider the following example:

       proc foo {x} {
          return [bar -value x ...]
       }

    The Tcl_Obj "x" is shared as name of argument and as a value of
    the non-positional parameter "-value". When bar
    (e.g. C-implemented) uses Tcl_GetIndexFromObj*() to lookup "x" in
    a table of options, which is volatile, the involved Tcl_Obj will
    be converted to an indexObj.

    On a call with wrong number of arguments( e.g."foo 1 2 3"), Tcl
    will try to give a nice error message, saying that "foo x" can be
    called only with one argument. When printing argument "x", it sees
    that "x" is an indexObj, and for these kinds of objects, "x" might
    be an abbreviated version of a full name. Since the table behind
    the indexObj is in the case above volatile, a crash might happen.

  - Added API call Ns_SockInErrorState() since SSL_shutdown() must not
    be called if a previous fatal error has occurred on a connection
    i.e. if SSL_get_error() has returned SSL_ERROR_SYSCALL or
    SSL_ERROR_SSL.

  - Provided local buffers for OpenSSL ERR_error_string handling to
    avoid potential race conditions (OpenSSL keeps otherwise error
    messages in static memory).

  - Crypto support:
    * New feature: scrypt Password-Based Key Derivation Function (RFC 7914)

      The scrypt function is a modern replacement for crypt and bcrypt
      and derives secret keys from a secret string. It is based on
      memory-hard functions, which offer added protection against
      attacks using custom hardware and GPU arrays.

      The function requires the compilation of NaviServer against
      OpenSSL 3.0 or newer (not yet released)

      Example from RFC 7914:
        % ::ns_crypto::scrypt -secret "password" -salt NaCl -n 1024 -r 8 -p 16
        fdbabe1c9d3472007856e7190d01e9fe7c6ad7cbc8237830e77376634b373162
        2eaf30d92e22a3886ff109279d9830dac727afb94a83ee6d8360cbdfa2cc0640

     * "ns_md" and "ns_hmac": added flag "-encoding"

     * Added options "-passphrase" to all "ns_crypto" commands
       accepting a PEM file. In principle, every PEM file can be
       protected by a pass phrase.

     * Signing and verifying signatures: "::ns_crypto::md string" can
       be used for signing and verifying of cryptgraphic signatures:

        % set sig [::ns_crypto::md string \
                     -digest sha1 \
                     -encoding binary \
                     -sign /usr/local/src/naviserver/myprivate.pem \
                     "abcdefghijklmnopqrstuxvwxyz\n"]

        % set vfy [::ns_crypto::md string \
                     -digest sha1 \
                     -verify /usr/local/src/naviserver/myprivate.pem \
                     -signature $sig \
                     "abcdefghijklmnopqrstuxvwxyz\n"]


Documentation improvements:
---------------------------

 - Improved cross references between man pages
 - Added documentation to undocumented flags
 - Added more example
 - Improved spelling

 - The following 48 man pages were updated since the last release:

        admin-db.man, admin-install.man, admin-maintenance.man,
        admin-tuning.man, commandlist.man, ns_adp.man, ns_adp_ctl.man,
        ns_adp_info.man, ns_adp_parse.man, ns_asynclogfile.man,
        ns_base64.man, ns_conn.man, ns_connchan.man, ns_crypt.man,
        ns_crypto.man, ns_driver.man, ns_filestat.man, ns_hmac.man,
        ns_hotp.man, ns_http.man, ns_job.man, ns_locationproc.man,
        ns_log.man, ns_md.man, ns_md5.man, ns_parsefieldvalue.man,
        ns_parseheader.man, ns_parseurl.man, ns_rand.man,
        ns_register.man, ns_return.man, ns_server.man, ns_set.man,
        ns_sha1.man, ns_sls.man, ns_sockcallback.man,
        ns_sockselect.man, ns_tmpnam.man, ns_totp.man,
        ns_urlspace.man, ns_uudecode.man, ns_uuencode.man,
        ns_writer.man, nsv.man, returnstatus-cmds.man,
        tcl-lib-file.man, tcl-libraries.man, tcl-overview.man


Configuration Changes:
----------------------

 - Output warning to system log, when NaviServer was compiled without
   zlib support, but the config file request compression.  Before, the
   compress enable request was silently ignored, giving no hint, why
   compression attempts of a developer were ignored.

 - Sample configurations:

    * Documented usage of connection pools in sample config files.

    * Added sample entries for new features (e.g. rate limits, log
      file sanitizer)

    * openacs-config.tcl:

       . Changed driver installation to "global" in sample configuration
         file. This change makes it easier for site admins to add
         further servers (e.g. for virtual hosting).

       . Simplified sample config file by using multiple IP addresses
         per driver

   * nsd-config.tcl:

       . Changed driver installation to "global" in sample configuration
         file. This change makes it easier for site admins to add


Code Changes:
-------------

 - Improved scalability: provided different mutex locks variables per
   urlspace IDs.

 - Improved range checking for Ns_ObjvInt, Ns_ObjvLong, Ns_ObjvWideInt
   and MemUnits:

   * built-in range checkingsupport for objv parser: This eases
     specification of the C API, makes accepted ranges clear and
     provides consistent error messages. These change fixes several
     potential crashes, when e.g.  passed-in values are used as
     array-indices (crash on negative numbers) or where the values
     were casted to unsigned types (very high unsigned values,
     potential memory alloc problems).

    * Fixed all cases, where Tcl_GetIntFromObj(), Tcl_GetLongFromObj,
      and Tcl_GetWideintFromObj was used without a range check.

 - Argument parser: skip processing of optional arguments when the
   number of provided arguments is equal to the number of required
   parameters.

   Background: This change allows a fully backward compatible version
   of e.g. "ns_md5 $foo", no matter what the value of "$foo" is,
   although the new version of "ns_md5" has now a "-binary" option.


 - Refactored low-level socket I/O:
   * All driver operations are now strictly nonblocking
   * Use same infrastructure for all network I/O operations
     (driver, connchan, ns_http, ...)
   * Rewritten socketfile/sendfile handling (including *BSD support)
   * Improved handling of closed and detached channels, e.g.delegated
     to writers (new macros NS_CONN_REQUIRE_CONNECTED,
     NS_CONN_REQUIRE_OPEN, NS_CONN_REQUIRE_CONFIGURED,
     NS_CONN_REQUIRE_ALL)
   * Improved protection for SIGPIPE signals.

 - New API infrastructure: Ns_DList

   The Ns_DList is similar to Tcl_DString, but operates on pointers
   instead of characters. Like Tcl_DString, Ns_DList pre-allocates
   some data and extends it when necessary. Ns_DList structures are
   especially useful alternative to linked lists, when usually data
   is added to the end. Since the data is kept as a dense
   (potentially growing) array, the memory locality is much better
   than with linked lists, resulting in better CPU cache hit rates.

 - Distinguish between Ns_NormalizePath() and Ns_NormalizeUrl(),
   where the first is for the filesystem and the latter for URLs.
   Previously, both cases were handled identically.

  - Function pointer handling:
    * Created a Tcl hash type for function pointers, since ANSI/ISO C
      forbids casting/comparison of data and function pointers. The
      new type is used whenever a hash lookup is performed for a
      function pointer.
    * Fixed all other occurrences of such comparisons.

 - Regressions testing:
   * Removed false positive
   * Switch to testing via ns_http in regression tests
     (this makes it as well possible for testing https connections)
   * Extended tests:
     + Added regression tests for "ns_rand"
     + Added nsssl tests
     + Added automatic certificate generation for test-server

    * The following 35 tests were added or extended since the last release

        adp.test, encoding.test, http.test, http_byteranges.test,
        http_chunked.test, http_keep.test, https.test, misc.test,
        ns_adp_compress.test, ns_base64.test, ns_cache.test,
        ns_conn.test, ns_conn_host.test, ns_crypto.test,
        ns_driver.test, ns_hashpath.test, ns_hostbyaddr.test,
        ns_info.test, ns_limits.test, ns_md5.test, ns_nsv.test,
        ns_pagepath.test, ns_parsefieldvalue.test, ns_proxy.test,
        ns_reflow_text.test, ns_schedule.test, ns_server.test,
        ns_serverpath.test, ns_set.test, ns_sha1.test,
        ns_urlencode.test, ns_urlspace.test, ns_uuencode.test,
        ns_writer.test, tclconnio.test, tclresp.test

 - Improved portability:
   * improved compatibility with LibreSSL (2.7 and 2.9)
   * Windows changes (Many thanks to Andrew Piskorski):
     + Fixed Ns_LogRoll() to work on Windows.
     + WSASend receives as 5th argument flags, but not a pointer to flags.
     + Improved makefiles
     + Updated _MSC_VER version numbers to include Visual Studio 2019
     + Added macro NS_INLINE to achieve higher portability with (older?)
       Microsoft compilers.

 - Added warnings about potential misconfiguration of NaviServer "tcllib"
   setting (Tcl written NaviServer modules)

 - Marked compatibility wrappers Ns_SetThreadServer() and
   Ns_SetThreadServer() explicitly as deprecated. Use
   Ns_ThreadSetName() and Ns_ThreadGetName() instead.

 - Build-system
   * Added -DSYSTEM_MALLOC to default compile flags.
   * Added nsssl to the default test target.
   * Require RSA keys of size 2048: newer versions of OpenSSL refuse to work
     with RSA keys of size 1024.
   * Improved alignment with Tcl's current .m4 file to get rid of
     "-prebind" deprecated message under macOS.
   * Improved handling of posix thread library for FreeBSD and OpenBSD

 - Use native thread_local storage for log handling when available
   (experimental).

 - Improved type cleanness for function pointers
 - Improved code locality
 - Improved error messages
 - Improved structure packing
 - Reduced variable scopes
 - Added missing "extern" declarations
 - Aligned function prototypes
 - Dropped potentially dangerous call to alloca()
 - Added typedefs for commonly used functions
 - Reduce potential dangling pointer dereferences
 - Aligned names of arguments in prototype with function definition
 - Introduced use attribute-based approach for denoting
   fall through in case statements
 - Added more declarations for PURE and CONST functions
 - Improved configurability for clang-tidy
 - Fixed macro name-clash with PostgreSQL
 - Improved spelling



Modules:
--------
 24 files changed, 1638 insertions(+), 2395 deletions(-)

nsdbpg:
- Fixed loading when multiple servers are used
- C Code cleanup (reduced warnings)

nsdbmysql:
- Fixed compatibility with current versions of NaviServer
- C Code cleanup (reduced warnings, improved spelling)

nssmtpd:
- Removed deprecated calls
- fix compilation with TCL_NO_DEPRECATED
- C Code cleanup (reduced implicit conversions, improved spelling)

nsdns:
- C Code cleanup (reduced warnings)

nsudp:
- Made code compilable with TCL_NO_DEPRECATED
- C Code cleanup (reduced warnings, improved spelling)

nszlib:
- Made code compile cleanly

nsimap:
- C Code cleanup (improved spelling)

nsphp:
- Upgraded module to PHP 7
- Fixed memory leaks
- extended regression test
- C Code cleanup (improved spelling)
- This is a major overhaul of nsphp, which makes it possible to use
  PHP 7 (tested with PHP 7.3.5). PHP 5 reached it EOL by jan 2019. PHP
  7 has substantial changes e.g. in memory and thread management
  compared to PHP 5, several interfaces and API calls have changed,
  such that it is not possible to compile the new version of nsphp
  with still PHP 5. In case, someone wants to use nsphp with PHP 5,
  please checkout versions before this commit from the repository.

nsstats:
- Added link to process page from mecurial hash to version
  details on Bitbucket
- Included "ns_driver info" in the reported values
- Include number of started thread per pools in reported statistics

nsdbi:
- C Code cleanup (don't shadow variables, clean compilation, improved spelling)

nsdbipg:
- C Code cleanup (clean compilation, improved spelling)

nsoracle:
- C Code cleanup (clean compilation)

nswebsocket:
- Compatibility with Tcl 8.7, which has no "identity" encoding anymore
- fixed startup messages
- C Code cleanup (improved spelling)

revproxy:
- Support for request cancellation via url_rewrite_callback (when it
  returns an empty URL)
- Don't raise error on ECONNRESET during spooling
- Improved logging
- Improved documentation
- Made channelCleanup more robust

letsencrypt:
- Major overhaul of the letsencrypt module to support ACME v2

  ACME (the Automated Certificate Management Environment, [1]) is the
  protocol used for certificate management on letsencrypt.org. The API
  version v was released on 2016 but was updated in 2018 by ACME v2,
  is not backwards compatible with v1. Letsencrypt announced in march
  2018 to drop the support of ACME v1 in several steps:

   - Nov 2019: End of account registrations via ACME v1
   - Jun 2020: End of new domain registrations via ACME v1
   - Jun 2021: EOL ACME v1 certificate issuing

  The new version is based on its crypto requirements solely on
  OpenSSL, it uses the NaviServer builtins and as well the "openssl"
  binary (the usage of tcllib pki was dropped). To avoid potential
  troubles, use this with a recent version of NaviServer (currently
  the tip version form BitBucket) or with NaviServer 4.99.19 when this
  is released.
- Improved logging and documentation
- Add documentation for obtaining multi-domain attributes (SAN).

nswebpush:
 - Added parameter "dopadding" to improve compatibility with Firefox on
   Android. It does not support padding. Many thanks to Wolfgang
   Winkler for reporting.
 - Added compatibility with current version of NaviServer
 - Always use binary format for appending (it does not seem necessary
   here, but it is used for consistency)
 - Code cleanup (improved spelling)

nsladp:
 - Adapted changes from Malte Sussdorf for the AOLserver version
   (from before 2008)
   https://www.mail-	archive.com/aolserver@listserv.aol.com/msg12073.html
  - Added compile flag to force LDAP v3
  - Rebind with original credentials after bind auth try
  - Incorporated changes from Andreas Parschalk (Univ. Innsbruck)
    including better documentation
  - Provided clean compilation on recent versions of NaviServer and Tcl

=======================================
NaviServer 4.99.18, released 2019-02-24
=======================================

 133 files changed, 3314 insertions(+), 2106 deletions(-)


New Features:
-------------

 - Added ability to provide memory sizes via memory units (kB, MB, GB,
   KiB, MiB, GiB) in the configuration files and commands. We follow
   the approach taken by e.g. PostgreSQL and use 1024 as
   multiplicator, which is e.g. useful for buffer sizes. All memory
   sizes in the config files can be specified in memory
   units. Currently, the only commands supporting memory units are
   ns_cache_create, ns_cache_configure and ns_http. The configuration
   based on integers without memory units continues to work.


 - Portable config files (windows compatibility)

   Rationale: unixoid platforms use traditionally ".so" as extension
   of binary modules, no matter what "info sharedlibextension" is. On
   macOS, the sharedlibextension returns ".dylib", while the module is
   named ".so". Under windows, it seems that the extension of the module
   has to be ".dll", so we can't write portable config
   files without extra effort.

   The new code tries now first to load the library as specified for
   backward compatibility (maybe containing a file extension). When
   this fails, it tries to append either ".so" in unixoid platforms or
   ".dll" under windows.


 - New API call: ns_db currenthandles

   Return information about handles currently allocated to the thread
   performing this call. The result contains a dict with the pools,
   from which handles were allocated, the names of the handles and
   their "active" state (a handle is active between a "ns_db select"
   and the last "ns_db getrow" statement). If no handles are allocated
   by this thread, empty is returned.

   For example, a possible result is "main {nsdb0 1} subquery {nsdb1
   0}" indicating that the current thread has allocated handles from
   pool "main" and "subquery", but the handle from pool "main" (i.e.
   "nsdb0") is currently active (during a select).

   This feature requires Tcl 8.5 or newer.


 - More security features: SameSite support for cookies

   The command ns_setcookie supports now the flag "-samesite" with
   permissible values "strict|lax|none". When the flag is set it
   prevents the browser from sending this cookie along with cross-site
   requests to mitigate cross site scripting attacks. Permissible
   values are [term strict], [term lax], or [term none]
   (default). While the value [term strict] prevents sending the
   cookie to the target site in all cross-site browsing context, the
   value of [term lax] allows sending the cookie when the user clicks
   on regular links. For details, see
   https://www.owasp.org/index.php/SameSite

   The "SameSite" cookie flag is not yet part of an RFC, but most major
   browsers support it. Browsers that do not support it, ignore the flag
   silently (see https://caniuse.com/#search=samesite).

   Although most cookies should probably use the flags, in order to
   provide backward compatibility, the flag can't be activated by
   default on all cookies.


 - Better entries in server log for scheduled procedures.

   With this change, one can determine exactly, which scheduled thread
   was executing an instance of which scheduled procedure. Similarly
   as for connection threads, one can now distinguish, whether two
   log-entries are from the same instance of a scheduled proc or from
   different ones.

 - nsdb stats: Return as well number of currently connected DB connections.


Performance Improvements:
-------------------------

  - nsproxy: Fixed block in reaper thread that led to excessive time
    spent in the main reaper loop, thus blocking the whole proxy
    interface. This change improves concurrency and reduces potentially long
    locks of the full nsproxy machinery.


Bug Fixes:
----------

  - Improved combability with Tcl 8.5
    * make sure package "try" is used in regression test cases where needed

  - ns_http
    * Fixed potential problem with partial writes on HTTP requests
      with large bodies (e.g. POST of larger files)

    * Aligned implementation with documentation (if "wait" operation has no
      timeout, use timeout of queue operation)

    * Improved client connect() operations with half-configured IPv6
      installations.
      This change addresses especially a problem, where
      IPv6 is activated on a server, but it cannot be used to connect
      to the outside world.  In these situations, connect operations to
      hosts with domain names having both IPv4 and IPv6 addresses
      would fail, although IPv4 connections are possible. In this
      cases, one should actually either deactivate IPv6 on the machine
      or probably deactivate IPv6 name lookups in bind (option "-4",
      filter-aaaa-on-v4 yes;). With the new features, such configurations
      should not be necessary anymore. This change fixes also a
      memory and socket leak in this situation.

  - Cache transactions: make "ns_cache flush $cache" behave like
    "ns_cache_flush -glob $cache *" on "ns_cache_transaction_rollback".
    Previously, when the full cache was flushed, the rollback was not
    performed properly.

  - tcl_crypto:
    Align code with documentation (provide a default for option "-digest")

  - nscgi:
    Fixed potential memory leak

  - ns_sourceproc: fix deprecated function in cases in error cases,
    make clear in documentation that ns_register_procns_register_tcl
    is the preferred approach (many thanks to Russell Sorensen for
    reporting)

  - tcl/nstrace.tcl: undo change introduced with 4.99.17 to exclude
    content of ::tcl namespace since this causes problems with Tcl 8.5
    (problems with clock or "package require try" when executed during
    initial load phase.

  - Ns_VarUnset(): Deleting the entire nsv array when last value is
    deleted (many thanks to Andrew Piskorski).


Documentation improvements:
---------------------------

   - All documentation: use memory units when appropriate

   - doc/src/naviserver/ns_job.man: aligned documentation with
     implementation; use itemized list for describing entries in the
     result lists.

   - doc/src/manual/admin-maintenance.man:
     Improved sample service file

   - nsssl/doc/mann/nsssl.man:
     Improved sample service file

   - doc/src/naviserver/ns_log.man
     Added sample configuration for configuring logging behavior

   - doc/src/naviserver/ns_register.man,
     doc/src/naviserver/ns_shortcut_filter.man: provide links (and
     hints) between "ns_shortcut_filter" and "ns_register_filter"

   - Rework man pages for scheduled procedures: group all
     related information into a single man page and improve
     cross referencing, fix broken example code.

   - doc/src/naviserver/ns_job.man:
     Fix wrong argument order in example command.

   - Made markup in documentation more consistent
        doc/src/naviserver/commandlist.man,
        doc/src/naviserver/ns_adp_ctl.man, doc/src/naviserver/ns_cond.man,
        doc/src/naviserver/ns_critsec.man, doc/src/naviserver/ns_env.man,
        doc/src/naviserver/ns_event.man, doc/src/naviserver/ns_info.man,
        doc/src/naviserver/ns_rwlock.man, doc/src/naviserver/ns_sema.man,
        doc/src/naviserver/ns_writer.man, nslog/doc/mann/ns_accesslog.man

   - Various improvements on several other man pages:
   - Removed man page for non-existing command "ns_cookietime"


Tcl API Changes:
----------------

  - Mark ns_cancel explicitly as deprecated, before its use was just
    discouraged by the man page. Use ns_unschedule_proc instead.


Configuration Changes:
----------------------

  - Turn off Nagle algorithm (parameter nodelay) per default
    since this leads in current Linux systems to bad performance
    (e.g. seeing with Apache bench ~40ms per request latency
    when keepalive is used). The default is now set to false
    in the C code as well in nsd-config.tcl and openacs-config.tcl

  - New parameter "logusecdiff": include time difference since last
    log entry with microsecond (usec) resolution. This option is useful
    for determine latencies with minimal effort.

  - All sample config files:
    * Remove file extensions for binary modules
    * Improved documentation

  - sample-config.tcl:
    * Added sample for DNS configuration
    * Added sample server log configuration

  - openacs-config.tcl:
    * Deactivated SSLv3 by default
    * Adjusted comments to values from source code
    * Add sorting to use always pick the library with the highest
      version number


Code Changes:
-------------

  - Regressions testing:
    * Removed false positive
    * Extended tests: http.test, ns_striphtml.test, ns_cache.test
    * Replaced deprecated "ns_adp_eval" in test by "ns_adp_parse"


  - Improved portability:
    * fixed compilation issues for versions of OpenSSL before 1.0.2
    * Windows changes (Many thanks to Andrew Piskorski):
      + Fixed compilation issues with nsssl under windows
      + Improved makefiles
      + use "I64u" or "I32u" instead of c99 conventions, since
        these seem to be broken in many (all?) MSC versions.

  - Reduced code security smells: add *CLOEXEC to file descriptor open
    operation. This fixes no real issue (forks are very limited in
    nsd), but silences static analyzers.

  - Replaced UTF-8 string literals by hexadecimal-escape-sequences to
    avoid potential encoding limitations from older compilers

  - Improved code locality
  - Removed unused macro
  - Adding more declarations for PURE and CONST functions
  - Eased live of static analysis programs
  - Added "const" declarations, made symbol table static
  - Reduced variable scopes
  - Reduced dead assignments
  - Reduce assignments in expressions


Modules:
--------

 - nsstats:
   * Added information about spooler threads to "process" page
   * Added running ns_jobs to the "process" page
   * Added running scheduled procedures to the "process" page
   * Improved HTML layout of configparams

 - nsloopctl:
   * Fixed compilation with current versions


=======================================
NaviServer 4.99.17, released 2018-11-04
=======================================

 421 files changed, 17805 insertions(+), 10275 deletions(-)

New Features:
-------------

  - Added brotli support for delivering static content
    ---------------------------------------------------
    The brotli compression format (RFC 7932) achieves better results for
    compression for typical web content compared to e.g. gzip and is
    supported by most current browsers. The definition of static
    content delivery is exactly the same for "brotli" as for static
    "gzip" content.

    New configuration options for ns/fastpath:
    * "brotli_static": should static brotli delivery be checked?
    * "brotli_refresh": should outdated brotli compressed files be refreshed?
    * "brotli_cmd": OS-level command with options used for brotli compression

  - "ns_conn" additions:
    * New subcommand "ns_conn acceptedcompression" to return accepted
      compressions for the current connection (gzip or brotli)

    * New subcommands "ns_conn currentaddr" and "ns_conn currentport"
      to refer to the address and port of the currently open server side
      of the socket.


  - New feature for GDPR: add mask IP addresses optionally in access log
    --------------------------------------------------------------------
    This feature is similar to "anonip" IP anonymizer of the Swiss
    privacy foundation): When this feature is activated, all IP
    addresses are masked in the log file, such that the host-specific
    (= person- specific) information is masked out and the IP-address
    does not match a particular individual anymore. Still, with the
    masking turned on, reverse DNS lookup and/or geolocation is
    possible.

    The option can be configured via the following parameters in the
    ".../module/nslog" section of the config file of NaviServer:
     * "masklogaddr": boolean value to turn feature on/off (default off)
     * "maskipv4": mask for IPv4 addresses (default 255.255.255.0)
     * "maskipv6": mask for IPv6 addresses (default ff:ff:ff:ff::)


  - New atomic "nsv_set" commands/options
    -------------------------------------

    * Obtain (old) value from nsv ARRAY and set it to a new value set foo

        set foo [nsv_set -reset ARRAY KEY NEWVALUE]

      After the operation, ARRAY(KEY) has a new value.
      The operation is similar to "nsv_set ARRAY KEY NEWVALUE",
      but the variant with "-reset" returns the old value.
      Similar to GETSET in REDIS.

   * Obtain a value from nsv ARRAY and unset it (no new value is provided).

        set foo [nsv_set -reset ARRAY KEY]

     The operations returns the old value of ARRAY(KEY) or empty, if
     it does not exist.  After the operation, the ARRAY(KEY) is unset.

   * Set a default value for a nsv ARRAY

        nsv_set -default ARRAY KEY DEFAULTVALUE

      Do nothing when ARRAY(KEY) has already a value.
      Return an error, when DEFAULTVALUE is not provided.
      Similar to SETNX in REDIS.


  - Extended functionality of "ns_http"
    -----------------------------------

    * Changed return value for "ns_http run" and "ns_http wait".
      Now the commands return attribute value pairs (Tcl dict).
      Previously, the commands returned different results,
      depending on the options

      - "ns_http run" returned the name of the queued command (which
        was completely useless, this the queued command was already
        terminated)
      - "ns_http wait" returned sometimes the body of the reply (when
        the reply was not spooled) or empty (spooled) or "1", when the
        option "-R" was specified

      Now the result is always a dict containing "status" (HTTP status
      code), "time" (elapsed time), "headers" (ns_set of the reply
      header fields, and either the "body" (reply body) or "file" (the
      name of the spooled file). The values in the dict might mirror
      the result of other (optional) output variables, which continue
      to work.

      Since the results were irregular and not documented in the man
      pages, the backward compatibility should be high. Also, the
      regression test of NaviServer was not effected by this change.


    * Support for asynchronous “ns_http” tasks:

      When the new flag "-donecallback” is provided, then a “ns_http”
      task is started in the background and does not require an
      “ns_http wait” anymore. Instead, when it finishes it executes
      the provided donecallback which receives as additional arguments
      the Tcl result (in form of an integer) and the result dict,
      returned otherwise from e.g. “ns_http run”.

      As a consequence, requests of the form
         ns_http queue … -donecallback …
      differ from client requests without the callback
      in the following points:

      a) the command does not return a handle for “ns_http wait”
      b) The command is not automatically cleaned up (canceled)
         at the end of a connection requests
      c) Typically, donecallbacks are executed in a different
         thread than it was started.

      Some more options, which were previously only valid on
      “ns_http wait” (such as e.g. spoolsize) are now valid
      for “ns_http queue” as well.

      The new flag allows a developer to start many requests in
      parallel without having to start many threads or complex
      synchronization tasks.

    * New option "-body_file" for "ns_http wait" (similar to "ns_http
      queue" which can be used to specify a filename for the
      downloaded content)

    * New option "-outputfile" to "ns_http run" and "ns_http wait":
      by specifying the option "-outputfile" the received file will be
      always written to the disk, no matter how large it is.

    * New subcommand "ns_http stats": returns a dict (flat list of
      attributes and values). The list contains "task", "url",
      "requestlength", "sent", "replylength" and "received".


  - Support resolving a hostname against multiple IP addresses
    ----------------------------------------------------------

    * In case, one domain name has multiple IP addresses registered,
      previous versions of NaviServer tried only the first returned
      address and returned an error, when this failed. This happened
      when using client functions (e.g. ns_http).

    * hostnames with multiple IP addresses are nowadays quite common,
      e.g. "localhost" having an IPv4 and an IPv6 address registered. In
      previous versions, when e.g. localhost has as first address the IPv6
      address, but IPv6 was not active, it returned an error.

    * resolving against IP addresses continues to work as always.


  - Extended crypto functionality
    -----------------------------

     * Added HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
          ::ns_crypto::md hkdf -digest sha256 ....
       (requires OpenSSL 1.1.0 or newer)

     * Added support for elliptic curve cryptography
        . ns_crypto::eckey import ?-string string? ?-encoding encoding?
        . ns_crypto::eckey priv ?-pem pem? ?-encoding encoding?
        . ns_crypto::eckey pub ?-pem pem? ?-encoding encoding?
        . ns_crypto::eckey sharedsecret ?-pem pem? ?-encoding encoding? pubkey
        . ns_crypto::eckey generate ?-name name? ?-pem pem?

     * Added support for getting an arbitrary number of random bytes
       based on crypto support on OpenSSL:
        . ns_crypto::randombytes ?-encoding encoding? bytes

     * Added support for Authenticated Encryption with Associated Data
       (AEAD) scheme, which provides confidentiality, integrity, and authenticity.

        . ns_crypto::aead::encrypt string ?-aad aad? ?-cipher cipher? ?-encoding encoding? ?-iv iv? ?-key key? input"
        . ns_crypto::aead::decrypt string ?-aad aad? ?-cipher cipher? ?-encoding encoding? ?-iv iv? ?-key key? ?-tag tag? input"

     * Added "-encoding hex|base64url|base64" option for output encoding
        for the crypto functions. Previously, all these functions returned the
        result in "hex" format. If the option is not specified, the result
        is the same as before (hex). The encoding option was added to the
        following functions:
        - ns_crypto::hmac string
        - ns_crypto::hmac get
        - ns_crypto::md string
        - ns_crypto::md get
        - ns_crypto::md vapidsign
        - ns_crypto::enc


  - "ns_connchan" improvements
    --------------------------

    * Callback suspension: a Tcl socket callback function might now
      return the value "2" to flag that the callback will be
      suspended, but it keeps the socket open. Previously, the Tcl
      callback could return just "0" (callback is cancelled, socket is
      closed) or "1" (continue callback handling, keep socket open).
      This can be used to suspend callback handling on bottlenecks and
      continue later, when situation improves.

    * "ns_connchan write": The function returns now the number of
      bytes sent, which might be less than the length of the data to
      be sent.

    * "ns_connchan list": the function returns now two more fields per
      entry: a) cmd name of the callback (eases debugging, when
      callbacks are changed dynamically) b) conditions used for
      registering the callback.

    * The "ns_connchan" callbacks are now listed via the nsstats
      interface as well (with proper callback info).


  - Added Possibility to add per-server "initcmds" to config file
    -------------------------------------------------------------

    This new feature provides an easy means to add command which
    should be executed after server initialization into a configuration
    files. By using the "initcmds" one can start multiple instances
    of NaviServer differing just in the initialization command
    by providing different config files. The "initcmds" approach
    has the advantage over e.g. "ns_atserverstart" that it is
    executed in a state when the server is fully initialized.

    #
    # Parameters of the "tcl" section of the server "myserver"
    #
    ns_section ns/server/myserver/tcl {
      ns_param initcmds {
        ns_log notice "=== Hello World from server: [ns_info server]"
      }
    }

  - Improved readability for config files
    -------------------------------------

    The "ns_section" command has new an optional last argument for the
    parameters of its configuration section. Instead of writing e.g.

       ns_section ns/parameters
       ns_param serverlog    $logroot/error.log
       ns_param pidfile      $logroot/nsd.pid
       ns_param home         $homedir
       #...

    one can write now

       ns_section ns/parameters {
           ns_param serverlog   $logroot/error.log
           ns_param pidfile     $logroot/nsd.pid
           ns_param home        $homedir
           #...
       }

    This block notation has two advantages: a) it shows clearly, where
    the section ends and b) when using an editor with automatic
    indentation, the log file looks nicer without manual indentation
    work. This change is fully backward compatible, old style config
    files continue to work.


  - Further new commands and features
    ---------------------------------

    * "ns_hash": provide a interface for the HashStringKey() function
      (very useful for e.g. cache partitioning)

    * "ns_reflow_text".
          ns_reflow_text ?-width width? ?-offset offset? ?-prefix prefix? ?--? text
      Tcl-based solutions are surprisingly slow on largish input.

    * "ns_base64urlendcode", "ns_base64urldedcode": URL-save variants of base64,
      used in various new RFCs for passing base64 values in HTTP requests.

   * "ns_uuid": runtime efficient version of a version 4 UUID
      according to RFC 4122: A Universally Unique IDentifier (UUID)
      URN Namespace

   * Improved results of [ns_cache_stats -contents ...]. The command
     returns now a tcl list instead of a string, including reuse count.

  - Improved results of "ns_striphtml":
     * Added resolving of all HTML4 entities (including &nbsp; etc.)
     * Stripped as well HTML comments.


Performance Improvements:
-------------------------

  - Check for epoch updates on blue-prints as well in cleanup phase
    (deallocate trace) to reduce latency for client requests.


Bug Fixes:
----------

  - Don't try to serve redirected files in case the connection is
    already closed (will lead only to confusing messages)

  - Ns_IsBinaryMimeType(): When a chartype is specified, never assume
    the mimetype is binary.

  - ns_getformfile: Don't rely on global variables
    (see https://sourceforge.net/p/naviserver/bugs/80/)
    Before this change, Depending on configured values,
    ns_getformfile could have missed uploaded files.

  - Added missing fetch commands for obtaining handles (on obviously
    seldom used subcommands "ns_db setexception|sp_setparam")

  - ns_http:
    * Timeout and connection behavior show works now consistent
      for HTTP and HTTPS URLs.
    * Fixed a potential bug (infinite loop) when requests
      run into timeouts.

  - "ns_set print": align with documented behavior

  - "ns_parseurl": make results more robust, when a URL with a colon
    in the path was given, but no port provided (detected a port
    incorrectly)

  - "ns_parseformfile": handle also www-form-urlencoded (in
     addition to multipart/form-data as before)

  - Windows:
    * Make sure to create temporary files correctly under windows (many
      thanks to Oleg Oleinik)
    * Incorrect handle was used to perform operations on the
      process in Ns_WaitForProcess (many thanks to Oleg Oleinik)


Documentation improvements:
---------------------------

  - Updated several man pages
    * admin-db.man:
    * admin-install.man
    * admin-maintenance.man
    * adp-overview.man
    * commandlist.man
    * main-features.man
    * main-history.man
    * ns_accesslog.man
    * ns_adp.man
    * ns_adp_argc.man
    * ns_adp_argv.man
    * ns_adp_bind_args.man
    * ns_adp_eval.man
    * ns_adp_flush.man
    * ns_adp_info.man
    * ns_adp_safeeval.man
    * ns_atexit.man
    * ns_atexit.man
    * ns_atshutdown.man
    * ns_atsignal.man
    * ns_base64.man
    * ns_base64encode.man
    * ns_conn.man
    * ns_connchan.man
    * ns_cookie.man
    * ns_db.man
    * ns_driver.man
    * ns_fmttime.man
    * ns_getcontent.man
    * ns_getform.man
    * ns_hmac.man
    * ns_hotp.man
    * ns_http.man
    * ns_httpget.man
    * ns_httpopen.man
    * ns_ictl.man
    * ns_job.man
    * ns_kill.man
    * ns_md.man
    * ns_memoize.man
    * ns_mutex.man
    * ns_parsequery.man
    * ns_perm.man
    * ns_proxy.man
    * ns_queryexists.man
    * ns_queryget.man
    * ns_querygetall.man
    * ns_quotehtml.man
    * ns_rand.man
    * ns_register.man
    * ns_return.man
    * ns_rlimit.man
    * ns_schedule_proc.man
    * ns_sendmail.man
    * ns_server.man
    * ns_set.man
    * ns_set.man:
    * ns_setexpires.man
    * ns_sockopen.man
    * ns_sockselect.man
    * ns_striphtml.man
    * ns_thread.man
    * ns_time.man
    * ns_tmpnam.man
    * ns_totp.man
    * ns_urlspace.man
    * ns_uuencode.man
    * ns_writer.man
    * nscgi.man
    * nsperm.man
    * nssock.man
    * nsv.man
    * returnstatus-cmds.man
    * tcl-lib-file.man
    * tcl-lib-nstrace.man
    * tcl-libraries.man
    * tcl-overview.man


Tcl API Changes:
----------------

  - "ns_conn isconnected": returns now false, when the connection is
     already closed. Otherwise we have to add a new subcommand
     "ns_conn closed", which seems somewhat odd (isconnected true and
     closed true?)

  - "ns_cache_stats" returns now hitrate in form of a float instead of
    an integer.


C API Changes:
--------------

   - Ns_SockTimedConnect2() returns now Ns_ReturnCode to be able to
     distinguish between timeouts and errors

   - Ns_SockConnectError(): new call to provide consistent error messages
     and to set Tcl error info consistently


Configuration Changes:
----------------------

  - Use same initialization for "enablelclpages" when configured over
    "ns/server/$server" or over "ns/server/$server/adp" to avoid subtle
    differences on global variables.

  - Extended sample config files:

    * nsd-config.tcl
       . Added parameter "masklogaddr" for "nslog" section
       . Added parameter for "gzip" and "brotli" static delivery
       . Added parameter for "initcmds"
       . Added setting for recommended environment variables
         HOME, LANG and RANDFILE. RANDFILE is sometimes needed
          to avoid surprises with permissions, when OpenSSL
          crypto functions are called from the server

    * openacs-config.tcl
       . Switched to PostgreSQL's conninfo notation in the datasource
         to hint that more such parameters are possible as well
         (e.g. connections via SSL)
       . Added comments and examples for configuring OpenACS caches
       . Added comments how to configure EmailDeliveryMode via config file
       . Added comments how to configure IncludeCallingInfo of OpenACS API browser
       . Added comments how to configure WithDeprecatedCode
       . Added example for activating more intense SQL logging
       . Added subsite-based error pages
       . Added section indicating how to configure for nsstats module
       . Added parameter settings for "reuseport"
       . Added parameter "masklogaddr" for "nslog" section
       . Added parameter for "brotli" static delivery
       . Preconfigure customized error pages based on subsites

  - Config files changed to block notation (see above)

  - Improved handling of configuration errors:
    * Provided better log message, when configured value is out of range
    * Updated config values when range check corrects the value to get the
      finally configured value via introspection.


Code Changes:
-------------

  - Extended regression test:
        * tests/adp.test
        * tests/compat.test
        * tests/http.test
        * tests/ns_base64.test
        * tests/ns_base64encode.test
        * tests/ns_cache.test
        * tests/ns_conn.test
        * tests/ns_crypto.test
        * tests/ns_nsv.test
        * tests/ns_parseurl.test
        * tests/ns_reflow_text.test
        * tests/ns_server.test
        * tests/ns_striphtml.test


 - Added version tag of NaviServer to "starting" message in log file
   to ease analysis in case of problems.

 - Implemented deprecated commands as Tcl proc and complain on
   its usage
      . ns_adp_eval
      . ns_adp_safeeval

  - Improved Platform support:
    * Extended list of platforms for manual provisioning of __PRIPTR_PREFIX
      in case it is not defined.
    * Do not rely on implementation defined print/scan format "%p",
      but use instead standardized integer types.
    * Windows:
      . Improved type-cleanness (many thanks to Oleg Oleinik)
      . Support to compile with MSVC 2017 (many thanks to Oleg Oleinik)
      . When compiling with VS 2012, use built-in support for
        intptr_t and uintptr_t.
      . Added support to run regression test under Windows
        (many thanks to Oleg Oleinik)

  - Changed preset encodings (when not specified in config file) for
    files with extensions .htm, .html, and .adp from iso8859-1 to
    utf-8.

  - Improved debugging support:

    * Added compiler-flag NS_MUTEX_NAME_DEBUG for ease locating
      anonymous mutexes.
    * Provided names for all remaining mutexes to make it easier
      to pinpoint bottlenecks due to mutexes
    * Improve debugging output in various messages, when debugging
      options are activated.


  - Minor update of mime types based on actual IANA media types.

  - Provided compatibility with Tcl 8.7.2 (removed CONST and VOID macros)
  - Further improved robustness by avoiding potential NULL dereferences
    found be static code analyzers (mostly error cases)
  - Improved configure scripts
  - Make sure, we have enough space for the terminating null character
  - Added "pure" specifier for improved code generation

  - Various code smell removals
    * Prefer boolean type over int
    * Improved type cleanness
    * Reduced implicit conversions
    * Reduced number of return statements before end of function
    * Don't pass implementation-defined NULL after the last typed argument
      to a variadic function
    * Removed dead assignments
    * Added "const" declarations
    * Fixed typos, improved comments


Modules:
--------

 - nsdbbdb (many thanks to Brendan Graves):
   * Changed to work with FreeTDS 1.00.86
   * Updated outdated paths.

 - nsdbpg:
   * Added sample configuration to include hints how to use SSL
     connections to the database
   * Provided compatibility with Tcl 8.7.2
   * Minor code cleanups

 - nssmtpd, nsdns, nstftpd, nsradiusd, nsdbi, nsdbipg:
   * Brought code in sync with the current code base (including IPv6, 8.7.2 compat)
   * Improved spelling

 - nsphp (many thanks to Anthony Bennett):
   * Refactored for newer versions of NaviServer
   * Improved README and spelling

 - nsstats:
   * Added results to "ns_connchan list" to per-server info
   * Added optional query parameter "raw=0|1" to switch between
     raw and prettified numbers
   * Improved number prettification
   * Added optional query parameter "max=..." for controlling the number of
     per-cache entries shown (default 50)
   * Improved cache statistics: added hits/req, saved/req, saved/hit; dropped saved/KB
   * Improved mutex statistics: added locks/req, potential locks/req, potential locks per second
   * Added summative statistics to mutex locks page
   * Made background locks (locks, not included in per-request statistics)
     configurable via NaviServer config file
   * Various other small changes and beautifications (use more CSS)
   * Bumped version to 1.8

 - nsoracle:
   * Fixed potential crash when oci_error_p is called with dbh == NULL
     (many thanks to Oleg Oleinik)
   * Some more code cleanup and improved spellings.

 - websocket:
   * Fixed potential bug: make sure that upgrade header is sent as a single block.
   * More minor code cleanup.

 - revproxy:
   * Fixed potential blocking conditions when send buffer of OS overflows.
     With "-sendtimeout 0" a call to "ns_connchan write" might write less
     bytes than desired; In this case, callbacks are suspended and continue
     when the situation improves.
   * Added new switches "-sendtimeout" and "-receivetimeout" to revproxy::upstream
   * Added "-backend_reply_callback" to ::revproxy::upstream to allow proxy the
     modification of backend header fields per request.
   * Bumped version number to 0.11

 - letsencrypt:
   * Modernized code: use built-in ns_base64urlencode (requires 4.99.17)
   * Changed order of certificates in pem file (private key first)
   * Don't hard-code OpenSSL dir on OS (many thanks to Stefan Sobernig)

 - nswebpush:
   * New module for implementing Web Push via NaviServer
     (Many thanks to Georg Prohaska)
   * For details, see: https://bitbucket.org/naviserver/nswebpush/src/default/

=======================================
NaviServer 4.99.16, released 2017-12-29
=======================================

 345 files changed, 16488 insertions(+), 10401 deletions(-)

New Features:
-------------
  - ns_cache improvements:

    * Allow runtime reaction and re-configuration of caches
      (e.g. grow/shrink a cache via new cmd ns_cache_configure)

    * Added cache transaction semantics

      Background: When ns_cache_* commands are used within a database
      transaction (e.g. in OpenACS), it might occur that partial
      results of the transaction are cached before the transaction is
      committed.  When the transaction is rolled back, invalid values
      might be kept in the stack leading to erroneous and hard to
      debug behavior.  Furthermore, information about changes might
      leak into other concurrent threads via the cache, even before
      the transaction is committed.

      The new cache transaction semantics is implemented via the three
      commands

         - ns_cache_transaction_begin
         - ns_cache_transaction_commit
         - ns_cache_transaction_rollback

        When no ns_cache_transaction* commands are used, the behavior is
        exactly as before.

        When ns_cache_transaction* commands are in use, the following
        functionalities become available

         - The ability to rollback of the values since the matching
           ns_cache_transaction_begin

         - Isolation of behavior: cached values from incomplete cache
           transactions are just visible from the current thread, but
           not from other threads.

         - Nesting: transactions can be nested
           (up to a compile time constant, per default: 16)

         - Introspection: the statistics about cache commits and
           rollbacks are included in the cache statistics.

    * Support caches sizes larger than 2GB

    * Summary of new ns_cache* commands
      . ns_cache_configure to change cache parameters at runtime
      .        ns_cache_exists: This command is more than an order of
        magnitude faster than [expr {"foo" in [ns_cache_names]]
      . ns_cache_transaction_begin
      . ns_cache_transaction_commit
      . ns_cache_transaction_rollback


  - Virtual server improvements

    Make mapping of host entries in the virtual server definition more
    intelligent to avoid newbie gotchas and hard to find
    mis-configurations (entries in e.g. nssock/servers)
     a) add automatically an entry with the port, when none is given
     b) complain, when driver is not listening on the specified port
     c) add automatically an entry without the port, when the driver
       listening on the default port.
    Old configurations (doing a-c manually) should continue to work

  - Improved integration of NaviServer with e.g. service files (systemd):
    When the server is starting in a forking mode, return a nonzero
    return code, when initialization of the server went wrong (e.g.
    error in the config file)


  - nsdb:
    provide interface for obtaining session_ids. When implementing
    e.g. prepared statements over the nsdbpg driver, the prepared
    statement is just valid for one session. by providing the
    session_id on the Tcl layer, prepared statements can be provided
    selectively on the Tcl level.


  - https:
    * Support OpenSSL 1.1.0 (configuration and runtime)
    * Support LibreSSL 2.6.3 and 2.6.4
    * Improved support for ancient versions of OpenSSL (e.g. in CentOS 5.0)
    * Added support for client side Server Name Indication (SNI)
    * Report attempted TLS handshakes on plain connections to error.log


  - nscgi: new config parameter "allowstaticresources"

    New parameter "allowstaticresources": provide control on whether
    static resources can be delivered from a cgi-bin directory.

    Background: When CGI scripts are called from a cgi-bin directory
    without an explicit extension mapping to a script interpreter
    (e.g.  Perl, Bash, ...) the script has to be set executable. If
    this is not the case, the CGI script is delivered in source code,
    which might reveal unwanted information. The reason for this
    behavior was, that one can so deliver also static resources
    (e.g. images) from a cgi-bin directory. Now this behavior con be
    controlled with the configure parameter "allowstaticresources",
    which is by default off.  If an application depends on this
    behavior, please turn it on in the config file (in the nscgi
    section).


  - nsproxy:
    New subcommand "ns_proxy stats" to provide usage and runtime
    statistics per nsproxy pool.


  - logging:

    * Better error.log entries: Include the connection id in the
      thread name to ease debugging, when multiple requests of the
      same connection thread write to the error.log and it is not
      clear, where the first ends and the next starts.

    * Write notice message to error.log when entities are too large
      to provide information about possible misconfigurations or
      attacks in the error log

    * Added new config parameter for nslog: "logthreadname"

      When the parameter is specified, the thread name is placed as
      second field in the access.log. This eases debugging, since one
      can now link the lines in error.log caused by a request with
      the line in the access.log without the need of guessing via
      time-stamps. The thread name contains the name of the
      connection pool and a connection id.

   *  When "mutexlocktrace" is activated, use thread name instead
      of id to ease debugging


  - Added parameter "defaultextension" for adp section in config file.
    Can be set e.g. to ".adp" to test for FILENAME.adp, when adp is
    mapped to FILENAME



Performance Improvements:
-------------------------

  * Improved performance of ns_urlencode/ns_urldecode in common
    cases by about a factor of 2

  * Improved performance by replacing the slow "snprintf(... %d ...)"
    function by the new functions ns_uint32toa() and ns_uint64toa().
    This change improved the performance of EnterSet() by nearly a
    factor of 2.5. Before, snprintf() took in this function 3x (!) as
    long as Tcl_CreateHashEntry(); the new ns_u32toa() is about 6x
    faster than Tcl_CreateHashEntry().

  * Improved performance of ns_quotehtml:

    In real-world applications (with e.g. OpenACS) this function is
    one the most frequently used functions of NaviServer. This
    change improves the performance of "ns_quotehtml" by about 40-60% by
    avoiding per-character calls to *DStringAppend and some more
    improvements.

  * Improved performance of server internal "ns_set" operations: remove
    the need of 3 malloc()/free() pairs per request

  * Use Tcl_CreateHashEntry() in frequently called functions instead
    of Tcl_FindHashEntry() since the second one uses the first.

  * Avoid strlen() operations on several occasions
  * Improved speed of line-counting in .adp files by a factor of 2
  * Reduced scope of mutex lock when registering filters.


Bug Fixes:
----------

 - Allow fully qualified domain names in "Host" header field
   (as allowed in RFC 2976)

 - Avoid potential hangs of nxproxy in cases the evaltimeout is very
   small and the client is writing much data causing blocking write
   operations

 - urlencode reform:

   * The new code conforms to RFC3986 (2005) rather than RFC1738
     (1994) and RFC1808 (1995) vs. RFC2396 (1998).  The newer RFC3986
     has a more precise and differently structured definition (e.g. no
     'unwise' characters) of characters encoded in URLs. The coding of
     the query part is actually defined in the HTML 4.01
     definitions. Legacy sites can use the old encoding, when
     compiling NaviServer with RFC1738 defined.

   * Produce a warning, when a not properly encoded URL is passed to
     the location header field (e.g. ns_returnredirect). Some newer
     browsers might reject those redirects. Only characters, which
     have to be always coded, are flagged.

   * ns_urldecode: Make sure that only valid percent codes are
     converted back.

   * ns_urledecode: Use URL encoding charset, when no charset is
     specified.  This fixes an old (at least 10 year old) bug which
     can allow one to sneak in binary nulls into query variables, which
     provide a potential injection attack vector


  - ns_server active|all|queued: Better handling of querying data from
    concurrent threads. Handle now semi-parsed requests: these are not
    "queued", but not all information is available for querying it. We
    do now the best effort to report on fields that are trusted.

  - Complain on connection output operations when the connection is
    already closed. Previous version of NaviServer swallowed output
    operations on already-closed connections more or less silently,
    leading to hard to understand messages in the error log. This
    happens in particular often during error handling in OpenACS,
    where a "ad_script_obort" is missing. The new code raises now an
    error message, pointing to the erroneous code. When the old
    behavior is necessary for a while for legacy installations, the
    global configuration parameter "rejectalreadyclosedconn" can be
    set to "false".

  - Fix duplicate DriverClose calls in context of UDP drivers

  - Undo potential crlf-translations in the body of (e.g. POST)
    requests with Content-Type "www-form-urlencoded"

    Background: When a hidden form fields contains line-breaks, these
    are transformed pn transit into CRLF by current browsers in POST
    requests. In this step the value of a hidden form-field might
    become larger on every iteration, which might result in a
    quadratic growth on multiple edits of such a field. The new
    behavior undoes this effect.

  - Improved handling of requests in ancient (pre HTTP/1.0 1996) HTTP
    requests in combination with writer threads. Previous versions
    could run into a too restrictive sanity assert, assuming that
    reply headers must be always present (which is not the case in the
    rather informal HTTP versions before HTTP/1.0)

  - Virtual server fixes:
    * Avoid potential double-initialization of driver modules when
      multiple servers are used.
    * Postpone registration of virtual servers until all servers
      are defined. Before it was possible that NaviServer boot was
      terminated, when a default server of a driver was not yet defined.

  - Improved handling of binary data:
    NsTclObjIsByteArray() behaves now more like the (Tcl internal)
    TclIsPureByteArray() to figure out, when the bytearray data has
    to be treated as binary. Cases of pure and impure bytearrays
    are handled now by NaviServer.

  - Fixed old bug, were SSL_shutdown could hang (observed on Linux
    systems)

  - Fixed potential crashes as flagged by fb infer.

  - Improved robustness on invalid URLs: Don't Fatal on invalid URLs
    passed to NSDriverClientOpen(), but spit out a warning.

  - Improved Tcl code safety (guarding "file delete" against names
    starting with a "--")

  - Improved handling of invalid input from config file for rolling
    files

  - Make sure "ns_server serverdir" and "ns_server pagedir" return
    normalized paths to avoid potential confusions

  - Improved windows portability:
    * Cope with changes in Universal CRT in Visual Studio 2015 where e.g.
      vsnprintf() is no longer identical to _vsnprintf().

    * Improved Windows support for recent versions of visual studio
      (versions after visual studio 2010) by introducing NS_EINPROGRESS
      and NS_EINTR for abstracting from the raw constants (many thanks to
      Maurizio for the input)

    * Make nsproxy compile-able under windows

  - Improved Unix Portability:
    Support systems without RLIMIT_AS (e.g. OpenBSD 6.2)

  - Improved Tcl portability:

    * Starting with Tcl 8.7a1, Tcl has actually two different types
      for bytearrays, the old "tclByteArrayType" and a new
      "properByteArrayType", where both have the string name
      "bytearray".  NsTclObjIsByteArray() is now extended to handle
      both types.



Documentation improvements:
---------------------------

  - Updated several man pages
    * admin-maintenance.man
    * commandlist.man
    * ns_accesslog.man
    * ns_adp_exception.man
    * ns_adp_include.man
    * ns_base64decode.man
    * ns_buildsqldate.man
    * ns_cache.man
    * ns_cancel.man
    * ns_chan.man
    * ns_connchan.man
    * ns_db.man
    * ns_driver.man
    * ns_gmtime.man
    * ns_http.man
    * ns_info.man
    * ns_job.man
    * ns_locationproc.man
    * ns_parseheader.man
    * ns_perm.man
    * ns_proxy.man
    * ns_serverrootproc.man
    * ns_shutdown.man
    * ns_sockcallback.man
    * ns_urlencode.man
    * ns_write.man
    * nssock.man
    * nsssl.man
    * ns_setprivileges.man
    * returnstatus-cmds.man
    * tcl-overview.man

  - Additional global documentation changes:
    * Added various cross references with "see also"
    * Added keywords for "global builtin" and "server builtin" to
      distinguish between per-server commands and global commands
    * Added for every module the name of the module as "keyword"
    * Make markup of options more consistent

  - Improved banner of online man pages:
    * fix markup
    * make URLs protocol agnostic
    * use new .io domain of sourceforge

  - Fixed spelling errors


Tcl API Changes:
  - ns_connchan: new option "-driver" for "ns_connchan open"
  - ns_cache_create returns now boolean to flag success
  - "ns_http queue|run" new parameter "-hostname" for handling SNI

  - Removed useless and undocumented subcommand "ns_set idelete"

   * ns_urlencode: New flag "-uppercase" added for supporting encoding
     for OAuth (RFC 5849); note that the "path" segment encoding has
     to be used to avoid coding space as "+".

   * ns_urlencode and ns_urldecode: Additional accepted value "cookies
     "for parameter "-part" to request cookie encoding/decoding.

   * ns_getcookie: New option "-all"

     Background: By using a cookie domain, it is possible that a
     cookie with a specified name is given two value, one from
     e.g. the parent domain, one from the current; this can lead to
     situation not easy to debug, when e.g. domain cookies are
     introduced from other applications in the same domain. The "-all"
     option provides infrastructure support to detect such situations
     by returning potentially multiple values for the cookie.

   * ns_connchan:
      New (experimental) subcommand
         ns_connchan listen ?-driver d? ?-server s? ?-bind? address port script
      Start a listening connection for the ns_connchan interface;
      Still missing: https variant via specifying "-driver" +
      handling of "-server" (and obtaining defaultserver)

  * sendmail.tcl
    - For the deprecated warning, do not write entire body of email to
      the log
    - Use local time (with timezone) instead of UTC in Date header


C API Changes:
--------------

  - New API function NsConnRequire() to make handling of required
    connections and error results more regular.

  - New API functions
      . Ns_CookieEncode()
      . Ns_CookieDecode()
      . NSDriverSockNew(): create an initialized driver Sock structure
      . Ns_HttpMessageParse(): parse a (potentially incomplete) HTTP message
      . ns_uint32toa()
      . ns_uint64toa(): substantially faster conversion of integer to
        string than snprintf()

  - Ns_SockListenCallback: alter interface to (a) return the listening
    socket and (b) to be able to bind to the fresh socket. This is
    necessary for e.g. FTPD's passive server connections, where the
    server offers a freshly bound socket to the client to connect to
    (EPSV, extended passive mode).

  - driver.c:
    * Factored out LookupDriver() to improve reusability
    * New function NSDriverSockNew() to create an initialized driver Sock
      structure,


Configuration Changes:
----------------------

  - Removed need to specify port for virtual servers in */servers
    section of the config files

  - Extended sample config files:

    * nsd-config.tcl
       . Added new nslog parameter "logthreadname"
       . Added new global parameter "rejectalreadyclosedconn"

    * openacs-config.tcl
       . Added configuration for strict-transport-security (HSTS)
       . Added setting of OpenACS kernel parameter
         "NsShutdownWithNonZeroExitCode" in sample config file
       . Eased configuration for nsssl by simply setting https port
       . Added new nslog parameter "logthreadname"
       . Added new global parameter "rejectalreadyclosedconn"

    * sample-config.tcl:
       . Included global parameter "shutdowntimeout" in sample config file
       . Included parameter "allowstaticresources" in nscgi section
       . Added new nslog parameter "logthreadname"
       . Added new global parameter "rejectalreadyclosedconn"
       . Make it work out-of-the box


Code Changes:
-------------

  - Reworked TLS cleanup (necessary for Tcl 8.7 and beyond); align it
    to the Tcl practices. Add compatibility for Tcl 8.5- w.r.t
    notifier-thread init after the fork.

  - Switched to the recommended way of creating detached threads via
    pthread attribute (see e.g.
    https://docs.oracle.com/cd/E19455-01/806-5257/6je9h032l/index.html)

 - Extended regression tests
    * ns_urlspace.test
    * cookies.test
    * ns_sls.test
    * tclresp.test
    * ns_urlencode.test
    * url2file.test
    * ns_conn_host.test
    * ns_pagepath.test
    * ns_serverpath.test
    * ns_server.test
    * ns_proxy.test
    * http.test

  - Code cleanup
    * Added const declarations
    * Added missing prototypes
    * Don't shadow local variables
    * Marked unused arguments as UNUSED
    * Removed old-style function definitions
    * Reduced implicit conversions (gcc7)
    * Prefer type use "bool" over "int" when applicable
    * Don't pass implementation-defined NULL after the last typed
      argument to a variadic function
    * Reduced number of return statements before end of function
    * Reduced variable scopes
    * Reduced size of huge switch statements

  - API modernization
    * Prefer usage of Ns_ParseObjv over manual parsing and
      error message generation
    * Prefer Tcl_SetObjResult over Tcl_SetResult
    * Stop using readdir_r() unless it is forced via compile flag
    * Aligned casts to Tcl 8.6
    * Replaced all occurrences of strcpy() with more safe variants
    * Replaced all occurrences of sprintf()  by snprintf()
      to protect better against buffer overflows
    * Prefer void* over legacy caddr_r
    * Replaced all calls to deprecated function Tcl_DStringTrunc()
      by Tcl_DStringSetLength()

 - Implemented deprecated commands as Tcl proc and complain on
   its usage
      . ns_puts
      . ns_returnadminnotice
      . env

 - Silenced static checker

 - Add CFLAGSs for convenient testing/cleanup
   (CFLAGS_TIDY, CFLAGS_DEFINITION, CFLAGS_CONVERSION)

 - Improved error messages


Modules:
--------

 - nsstats:
    . Format values in human readable form (unless &raw=1 is used in query)
    . Return proxy stats form all proxy pools
    . Include expire date of certificate in "process" page
    . Added "commit" and "rollback" to cache statistics

 - nsdbpg:
    . Report more detailed version numbers used during built process
    . Honor "logsqlerrors" settings from config file
    . Truncate SQL statement in error.log to 10.000 chars if longer
      (to avoid overlong log file entries)
    . Improved backwards compatibility with ancient versions of PostgreSQL

 - nsimap:
    . Added optional flag "-novalidatecert" to "ns_imap open"
      (name from the flag of the IMAP implementation)
    . Use NaviServer built-in config check for SSL libraries and use same libraries
    . Updated to meet engineering standards

 - revproxy:
    . Added url_rewrite_callback
    . Added timeout handling
    . Added support for handling requests with provided content (POST, PUT, ...)
    . Generalized error handling, reverse callback registration as suggested by David.
    . Close connection explicitly after every request

 - letsencrypt:
    . New module for managing server certificates via Let's Encrypt

 - WebSocket:
    . Various small updates (links, spelling errors, ...)




=======================================
NaviServer 4.99.15, released 2017-01-10
=======================================

 103 files changed, 3497 insertions(+), 1577 deletions(-)

New Features:

 - Multiple driver threads for listening on the same port:

   When OS kernels support SO_REUSEPORT (which is the case on Linux
   since Kernel 3.9, macOS 10.3, Solaris 11, *BSD), one can specify
   now multiple driver threads for exactly the same listening address
   (protocol/IP-address/port) via the new config option
   "driverthreads" with a value larger than 1. With this new feature,
   NaviServer supports now for all stages of a request multi-threaded
   execution (driverthreads, spoolerthreads, connection threads, and
   writerthreads).

   Tests show that even with high number of concurrent clients, one
   can improve the throughput for high numbers of concurrent clients
   slightly (e.g. for 2 driverthreads and 250 concurrent clients, the
   throughput increases by ~9%, see
   https://www.mail-archive.com/naviserver-devel@lists.sourceforge.net/msg03445.html)

   Note: When using multiple driver threads on privileged ports, one
   has to add "#" followed by the number of necessary bind operations
   to the prebind address. Otherwise, prebind will bind to the address
   only once, and only one driver thread can be used.


 - Dynamic connection thread pool mapping:

   The new version of NaviServer extends the mapping of requests to
   connection thread pools by making it (a) introspectible and (b)
   dynamic (changeable at runtime). Dynamic thread pool mapping can
   avoid overlong blocking of connection threads by an unexpected peak
   of slow requests by moving these to a separate connection pool.
   For a detailed motivation, see
   https://www.mail-archive.com/naviserver-devel@lists.sourceforge.net/msg03446.html.

   The following new subcommands of "ns_server" implement the
   dynamic mapping to connection pools:

     * ns_server ?-server /s/? ?-pool /p/? map ?-noinherit? ?/mapspec/?
       Map HTTP-method and path (mapspec) to a certain pool, or list
       mappings from a pool (when no mapspec is given)

     * ns_server ?-server /s/? mapped ?-exact? ?-noinherit? /mapspec/
       Obtain the pool for a mapspec (HTTP method and path)

     * ns_server ?-server /s/? ?-pool /p/? unmap ?-noinherit? /mapspec/
       Undo previous mapping


 - New commands to obtain network driver information:

     * ns_driver info
       Return per driver detailed configuration information (name of
       module, type of driver, associated server, configured location,
       protocol, address, sendwait recvwait, and extraheaders)

     * ns_driver names
       Return a list of the names of the loaded driver modules.

     * ns_driver threads
       Return a list of the names of the driver threads

     * ns_driver stats
       Return for every driver thread the name of the driver module,
       the number of received requests, the number of spooled
       requests, the partial requests (received via multiple receive
       operations), and the number of errors.



 - Obtain detailed timing results from currently running request

     * ns_conn partialtimes

       Returns detailed timing snapshot about the current
       requests. The result is a dict containing the keys
       "accepttime", "queuetime", "filtertime", and "runtime" (similar
       to the per-pool timing statistics in "ns_server stats")

 - Added debug severity "Debug(nsproxy)" for separate debugging of nsproxy.


Performance Improvements:

 - Move JoinConnThread() out of lock to reduce locking duration and to
   improve scalability.


Bug Fixes:

 - Better error behavior, when prebind fails.

 - Fixed underspecified config file (simple-config does not set
   address, fallback to NS_IP_UNSPECIFIED.

 - Make sure that URLs produced by urlspace's walk callbacks are
   proper list elements.

 - Make startup more robust, when called with invalid arguments.

 - nsproxy:
     * Don't reset timeout for reaper when slaves already expired
     * Improve debug messages

 - Improve forward compatibility to forthcoming Tcl 8.7 (fixed bug in
   Tcl's Memory allocator; Zoran).

 - configure: Align behavior when "--with-openssl" is specified
   without arguments vs. when it is not specified (--with-openssl is
   activated per default). Previously, pkg-config was only looked at
   when "--with-openssl" was specified.


Documentation improvements:

 - Improved sample config files
    * added new config parameters
    * document parameter "listenbacklog"
    * make simple-config working with default installed tree (activate
      .adp parsing)

 - Improved inline documentation about usage of
   Tcl_FindExecutable(argv[0]) (before fork vs. after fork)

 - Improved/new documentation pages of
    * admin-maintenance
    * ns_cgi
    * ns_conn
    * ns_connchan
    * ns_driver
    * ns_filestat
    * ns_http
    * ns_httpopen
    * ns_itcl
    * ns_parseargs
    * ns_register
    * ns_sendmail
    * ns_server
    * nssock
    * nsssl
    * nsv

  - more consistent capitalization:
    * use Tcl instead of TCL
    * use HTTP (or HTTPS) instead of http (or https).


C API Changes:

 - Additional argument for reuseport for Ns_SockBind(),
   Ns_DriverListenProc(), Ns_SockListenEx(), Ns_SockBindUdp(), and
   Ns_SockListenUdp().


Configuration Changes:
 - New parameter for drivers (e.g. nssock)

   * Boolean Parameter "reuseport": When the parameter is set and
     SO_REUSEPORT is supported by the os, NaviServer will allow
     multiple listen operations on the same port (default: false)

   * Integer Parameter "driverthreads": set to a value > 1 when
     multiple driver threads should be used (default: 1). When
     multiple driver threads are configured, parameter "reuseport" is
     automatically set to "true".

 - New Boolean parameter "mutexlocktrace" for section "ns/parameters":

   When this parameter is set to true, timing of long mutex calls are
   printed to stderr.

 - Improve configurability: Allow to pass alternative implementation
   of CPPCHECK to "make"


Command Line Changes:

 - Value provided to prebind option (-b) can be extended by a suffix
   "#n", where n is the number of pre-bound sockets (when e.g. multiple
   driver threads are used on privileged ports)


Code Changes:

 - Extended regression tests
    * ns_conn.test
    * ns_driver.test
    * ns_server.test
    * ns_adp_compress.test (fixed compatibility with lib version >
      1.2.8, which leads to different encoding)

 - Driver reform: make distinction explicit between driver type
   (e.g. "nssock"), driver name (e.g. "nssock1"), and driver thread
   name (e.g. "nssock1:1")

 - Moved definition of type "bool" from ns.h to nsthread.h to make
   boolean types as well available in nsthread implementation.

  - Improve compilation under windows:
     * don't pass "const char*" as member dest of Ns_ObjvSpec
     * add compatibility type "suseconds_t" for windows
     * define NS_NAVISERVER for windows (no configure script)
     * move conditional definition of P_tmpdir after the .h files are
       loaded
     * fix type in macro PTR2UINT in windows code

 - Further Tcl cleanup
   * Replaced remaining Tcl_CmdProcs into Tcl_ObjCmdProcs
   * Reduced usage of Tcl_AppendResult()

 - Don't mess around with FD_SETSIZE
 - Don't use implementation defined NULL as last argument of variadic functions
 - Reduced size of huge switch statements
 - Reduced variable scopes
 - Reduce number of return statements before end of function
 - Added const declarations
 - Use "unsigned short" consistently for ports
 - Align argument names in prototypes and function definitions
 - Silenced static checker


Modules:

 - nsdhcpd, nsdns, nsldapd, nsradiusd, nssip, nssmtpd, nssnmp,
   nssyslogd, nstftpd, and nsudp: Aligned function definitions with
   ns.h due to changes in

       Ns_SockListenUdp()
       Ns_SockListenEx()

   Note: Not all of these drivers are aligned yet with IPv6 interfaces.

 - nssyslogd: Added support for IPv6.

 - nsstats:
    * Added statistics for driver usage
    * Added Page for showing URLs mapped to connection threads pools
    * Added information about driver threads


=======================================
NaviServer 4.99.14, released 2016-11-18
=======================================

 86 files changed, 2655 insertions(+), 1451 deletions(-)

New Features:

  * Added statistics for "trace times": i.e. the time spent in a
    connection thread after the main request was executed, for running
    post filters, server traces (e.g. writing access.log) and
    cleanups.  The statistic results are included in [ns_server
    stats].

  * Improved compatibility with FreeBSD and OminOS (Solaris).

  * Added module "revproxy" for implementing a reverse proxy based
    on ns_connchan (working as well for proxying WebSockets).


Performance Improvements:

  * Added new config flag "concurrentinterpcreate" to "ns/parameters"
    to allow optionally concurrent creations of Tcl interpreters.
    Concurrent creations of Tcl interpreters were a problem with Tcl
    8.5, but seems to work with Tcl 8.6. Per default, this feature is
    turned off.

  * Don't update interp in "ns_ictl cleanup", when no defer callbacks
    were executed.


Bug Fixes:

  * ns_connchan improvements:
    - Handle potential race condition between ns_connchan and socket
      callbacks during shutdown
    - Make sure, channel is writable before we are writing to it
    - Add support for partial write operations ("ns_connchan write"
      and "ns_connchan open")
    - Provide more detailed error messages
    - Allow callback changes without invoking socket-shutdown
      machinery

  * Make sure, the tests are running with expected locale and
    encoding (fixed a problem on FreeBSD)

  * Fix bug #77 (potential crash during ns_mktemp, strdup()
    vs. ns_strdup(), introduced in 4.99.13, reported by
    Patrick Heissenberger)

  * Collect statistics before traces are run (i.e. before
    access.log is written); this fixes a bug reported by
    David Osborne.

  * In HTTP client requests, don't start URLs with "//" under certain
    conditions

  * Keep internally convention that stored request lines do not end
    with crlf to avoid unneeded tests

  * Don't "roll away" log file from stderr, when nsd was started with
    "-c" or "-f" flags

  * Don't complain about uncorking, when user has already closed the
    connection

  * Make windows variant of ns_mkstemp() more compatible with unix/mac
    (remove _O_TEMPORARY flag)

  * Use datatype "int" for parameters passed with Ns_ObjvBool (rather
    than bool, which causes invalid values on gcc 4.8.4 (Ubuntu
    4.8.4-2ubuntu1~14.04.3))

  * Fix several bugs in keylist


Documentation improvements:

  * doc/src/naviserver/ns_connchan.man:
    - Added documentation for "ns_connchan open"
    - Clarified format in which timeouts can be specified
    - document new flags

  * doc/src/manual/admin-tuning.man:
   - Added documentation of "ns/parameter" option "concurrentinterpcreate"

  * doc/src/manual/admin-maintenance.man:
   - Added section with sample configuration for systemd

  * doc/src/naviserver/ns_mktemp.man:
    - Improved function, explain deprecation state of c-library function,

  * General overhaul of the contrib/example scripts
    contrib/examples/index.adp, contrib/examples/upload.tcl,
    contrib/examples/writer.tcl

  * Various small documentation improvements.

  * Improved sample config files.


Tcl API Changes:
  * ns_connchan:
    Added flag "-version" to "ns_connchan open" to specify
    HTTP version (default 1.0)


Configuration Changes:
  * Improved output of "make help"

  * Don't throw error message, when doing an install from a Bitbucket
    checkout and no documentation was generated locally.

Command Line Changes:
  * improve usefulness of "nsd -c": in case the environment variable
    NAVISERVER is not set, and bin/init.tcl is not found under the
    running binary, fall-back to the configured install directory as
    "home".


Code Changes:
 * Extended regression test
 * Keylists:
   - Added new testset for keylists
   - fixed several bugs
   - use naviserver memory management
   - prefer Tcl_Objs over string based interface

 * Improved source code documentation

 * Turn ns_tmpnam into a proc and get rid of call to deprecated C
   library function tmpnam()

 * Added preprocessor variable NS_NAVISERVER to point to the
   configured install directory (can be used as last resort to find
   configuration data when started e.g. with "nsd -c").

 * C-Code cleanup:
   * Improved type cleanness on gcc 4.8.4 (Ubuntu) and
     under gcc7.

   * Aligned function prototype with definition
     (Ns_DbInterpretSqlFile(), Ns_ThreadCreate(),
     Ns_ThreadStackSize(), caused complaints under Solaris)

   * Introduce macros for IPv6 support under Solaris, since
     it does not define s6_addr16 members)

   * don't use implementation defined NULL as last argument of
     variadic function Ns_ConfigGetPath(), Ns_DStringVarAppend(),
     Ns_HomePath(), Ns_MakePath(), Ns_TclEvalCallback()

   * Reduced number of return statement before end of function.
   * Reduced number of gotos.
   * Reduced variable scopes.

Modules:
   * revproxy:
     New Tcl module based on ns_connchan to implement
     a reverse proxy (works as well with tuneling WebSockets).

   * nsexample, nsphp:
     Aligned function definitions with ns.h to improve
     cleanness of compilation


=======================================
NaviServer 4.99.13, released 2016-10-15
=======================================

 143 files changed, 3051 insertions(+), 2091 deletions(-)

New Features:
  - New Tcl functions:

      * ns_parseurl /url/
        Parse the provided URL into its parts and
        returns these in the form of a Tcl dict. The function supports
        IP-literal notation as specified in RFC 3986.

      * ns_absoluteurl /incompleteurl/ /baseurl/
        Construct a completed URL from a incomplete (e.g. relative)
        URL by taking as many parts as possible from the provided base
        URL.

  - ns_striphtml: The function honors now numeric entities between 33
    and 255 instead of ignoring it.

  - New configure option for error.log: "logrollfmt", which can be
    specified in (section ns/parameters).  This option has the same
    interpretation as already provided for access log and provides
    timestamp based log file naming. This option can reduce back-up
    demands for large error.logs significantly (since the names are
    stable) and increases the orthogonality of options (in respect to
    access.logs).

  - Ns_ParseUrl(): add support for protocol agnostic URLs (starting
    with two slashes as defined in RFC 3986).

  - ns_deletecookie: mark deleted cookie as non-scriptable to improve
    ratings on security scanners.


Bug Fixes:
 - Fix for [naviserver:bugs] #76: ns_configsections returned
   only one section (bug introduced in 4.99.12).

 - Fix URL parser in Ns_ParseUrl(), could return incorrect results
   when it received a URL in IP-literal notation (bug introduced in
   4.99.11).

 - Fix for potentially incorrect mime-types in fastpath, when static
   gzip is activated. The mime type was incorrectly set to
   application/gzip, when the static gzipped file was returned. This
   bug was introduced in 4.99.12, many thanks to David Osborne for
   reporting).

Documentation improvements:
  - Documenting new functions
  - Several small cleanups
  - Improved sample config files

C API Changes:
   - using unsigned int for ports
       Ns_SockListenUnix(), Ns_SockBindUnix()
   - using "long" for secs
       Ns_SockSetDeferAccept(), ns_poll(), Ns_DiffTime()
   - making argument types more precise
       NsPoll(), Ns_SockBinderListen(), Ns_GetNameForGid(), Ns_ThreadStackSize()

Code Changes:
 - Extended regression test
 - Improved source code documentation

 - C-Code cleanup:
   * Removed all implicit type-conversions, signed/unsigned comparisons
     as flagged by the following gcc/clang flags (ensure cleanness on 64-bit)
     -Wconversion -Wsign-conversion -Wfloat-conversion -Wsign-compare

   * Reduced number of return statement before end of function
   * Reduced variable scopes
   * added types for uid_t, gid_t if not defined

   * Remove calls to Tcl functions which are deprecated/ going to be
     deprecated by Tcl. Code can be compiled now with -DTCL_NO_DEPRECATED

   * Converted all remaining Tcl_CmdProc to Tcl_ObjCmdProc
        NsTclAdpStatsCmd    -> NsTclAdpStatsObjCmd
        NsTclCrashCmd       -> NsTclCrashObjCmd
        NsTclHrefsCmd       -> NsTclHrefsObjCmd
        NsTclLibraryCmd     -> NsTclLibraryObjCmd
        NsTclMkTempCmd      -> NsTclMkTempObjCmd
        NsTclParseHeaderCmd -> NsTclParseHeaderObjCmd
        NsTclQuoteHtmlCmd   -> NsTclQuoteHtmlObjCmd
        NsTclStripHtmlCmd   -> NsTclStripHtmlObjCmd

 - Tcl-Code
   * tcl/aolserver-openacs.tcl:
     Register delete trace to run nsf::finalize in a safe state (before
     any other c-based finalize handler are fired)
   * regression test: Replaced Tcl "eval" by expand operator



=======================================
NaviServer 4.99.12, released 2016-08-21
=======================================

 195 files changed, 20265 insertions(+), 13421 deletions(-)

New Features:
  * OpenSSL support integrated with NaviServer core
    - ns_http can handle now http and https URLs
    - Added backward_compatibility stub for ns_ssl
    - Added configure switch --with-openssl?=path?

  * Improved crypto support (through OpenSSL)
    New commands:
      - ns_hmac
      - ns_md (generalization of ns_md5 and ns_sha1,
        but supports by default 14 different digest algorithms)
      - ns_hotp (one-time passwords as defined in RFC 4226)
      - ns_totp (time-based one-time passwords as defined in RFC 6238)

    StartTLS support (contributed by Constantin Șerban-Rădoi)
     - "ns_sendmail" is now able to connect to servers via StartTLS
        (requires the Tcl "tls" package, since ns_sendmail is
        implemented in Tcl)
      - Client and server support for StartTLS in the nssmtpd module.

  * New Command "ns_rlimit" to get/set various resource limits from
    the operating system. A typical use case for this command is to
    query or set e.g. the core size via the NaviServer startup file or
    to change it at runtime in a syntax independent of the naming
    and conventions in the various startup scripts (e.g. upstart,
    systemd, ...). This is e.g. useful when a core dump should be
    created from the running state (e.g. in combination with the
    "ns_crash" command).

  * Improvements for "ns_connchan":
     - Supports now client functionality via
          ns_connchan open ...
       (works for http:// and https:// URLs)
     - New subcommand "ns_connchan exists /channel/"
     - Added runtime switchable debug severity "Debug(connchan)"

Performance Improvements:

Bug Fixes:
  * Fix ns_set management of headers (which was broken since the
    introduction of the leftover management when requests are
    pipelined in 4.99.11). The problem was that the "static" ns_set for headers is
    was freed too early in the pipelined case.

  * Fix for a serious bug in cookie management which could lead to false
    positives in ns_getcookie:

      - Previous versions of NaviServer searched the "Cookie" and
        "Set-Cookie" header files for a string "NAME=" and returned
        the value provided after this string, when found.

      - However, the "Cookie" and "Set-Cookie" header fields have
        contents in a different a different syntax (see
        https://tools.ietf.org/html/rfc6265 section 4.1.1 vs. 4.2.1),
        such as e.g. Cookie: cookie1="value1"; cookie2="value2";
        style=null; ... Set-Cookie: cookie1="new- value"; Expires=Fri,
        01-Jan-2035 01:00:00 GMT; Path=/; HttpOnly

      - Therefore, searching in the "Cookie" header field e.g. for a
        cookie named "tyle" lead to a success as well as a search in
        "Set-Cookies" for e.g. a cookie named "Expires".

  * Improved handling of erroneous requests (some where treated as
    HTTP/0.9 requests before, leading to strange behavior/error
    messages).

  * Fix potential memory leak for "ns_mutex eval"

  * Long standing bug when exiting "make test" should be fixed by now.
    The problem was that the Tcl exit handler was kicking in when
    the end-of file was reached, interfering with the NaviServer
    shutdown steps.

  * Improved portability for *BSD systems and recent Windows
    build environments (e.g. Visual Studio 2015)


Documentation improvements:
  * New man pages for ns_hmac, hs_md, ns_hotp, ns_totp
  * Various man pages updated/improved
  * Improved sample config files


C API Changes:

  *  Introduction of Ns_ReturnCode: use an enumeration type instead of
     preprocessor based constants + int. The change revealed several
     places, where NS_OK/NS_ERROR and TCL_OK/TCL_ERROR were intermixed.

  * New functions

    - Ns_GetBinaryString() to obtain from a Tcl_Obj the binary
      representation if available, otherwise the string representation.

    - Ns_SetRecreate() which is a combination of a create and a move
      operation, but avoiding malloc operations on all keys/values.

    - Ns_DStringAppendTime() to ease uniform printing of
      Ns_Time structs into DStrings

    - Ns_SubcmdObjv(): New infrastructure support for commands with
      subcommands: instead of long switch statements with nested
      structures with often many returns, one can now register
      Tcl_ObjCmdProcs for subcommands in an Ns_SubCmdSpec structure.

    - New argv checkers Ns_ObjvUShort() and ObjvQueue()


Configuration Changes:
    - added configure switch --with-openssl?=path?


Code Changes:
  * Improved naming of Mutexes: much more mutexes are named now.

  * Code cleanup:
    - Modernized argv parsing by using Ns_ParseObjv() for
      many functions.
    - Introduced enumeration types Ns_ReturnCode
      and NsWriterStreamState
    - New macro INTCHAR to pass "char" values to library
    - Use "unsigned short" consistently for port numbers
      functions requiring "int" to avoid code smells
    - Use boolean types on more occasions
    - Use more often typedef-ed function definitions
    - Reduced number of multiple returns per function
    - Removed all calls to deprecated Tcl API Function
      Tcl_AppendElement()
    - Reduced calls to Tcl_AppendResult() and use explicit
      Tcl_Objs instead for results
    - Generation of error messages made more consistent
    - Removed useless calls to Ns_DStringFree() after Tcl_DStringResult()
    - Replaced deprecated atoll() by strtoll()
    - Reduced variable scopes
    - Added more const declarations
    - Don't use boolean values as arguments of comparison operators
    - Many large functions split into smaller units

  * Made testing more robust when IPv6 is available, but
    turned off in the kernel

  * NaviServer driver:
    - Added (clientInitProc, protocol and default port) to info record
    - Bumped driver version to 4

  * Ignore less soft error conditions, but report in the error.log


=======================================
NaviServer 4.99.11, released 2016-05-01
=======================================

Changes relative to 4.99.10

 156 files changed, 8613 insertions(+), 3142 deletions(-)

New Features:

  * IPv6 support: NaviServer works now with IPv6 and IPv4
    addresses.  It is e.g. possible to use "::" as address (to denote
    the unspecified address, roughly similar to 0.0.0.0 in IPv4) to
    accept any IPv6 or IPv4 address, when the OS supports IPv4-mapped
    addresses, or one can use arbitrary addresses. Note that one can
    as well load the driver for a server multiple times, once with an
    IPv6 and once with an IPv4 address.  Adding this feature required
    changes in the drivers, since earlier versions had IPv4 structures
    compiled in. As a consequence, also drivers for additional
    protocols have to be adjusted (for this release, the IPv6-adjusted
    modules are all modules of the naviserver core, plus nsssl, nsudp,
    nssmtpd, nsdns)

  * Added HTTP/1.1 pipelining support: Pipelining is a (not so often
    used) feature of HTTP/1.1 where multiple requests are sent on a
    persistent connection without waiting for the results of the first
    request. Recently more (esp. mobile) clients started to use
    pipelining. Previous versions of NaviServer handled just the first
    request of the pipeline and swallowed (ignored) later requests of
    the pipeline.

  * Added support for HTML5 file attribute "multiple": HTML5 allows
    for uploading multiple files under the same INPUT name. Previous
    version of NaviServer just accepted the first file with the given
    name.

  * Reduced memory consumption:

    - Improved support from upload handling of large input. When
      uploads larger than "maxupload" is spooled to a file, the
      results are available via [ns_conn contentfile] rather than
      [ns_conn content].  There might be many places in application
      programs, where this distinction might be relevant. The new
      version gets now form content via [ns_getform] from both
      sources, fixes potential encoding problems.  Similarly, the new
      function [ns_getcontent] returns the unparsed content either
      binary or encoded as file or as string. These new features makes
      it easier to use upload spooling to avoid memory bloats.

    - Furthermore, (spooled) files can be sent from disk to some http
      server via ns_http (or ns_ssl) without the need to load the
      content first to memory by using the new parameter body_file)

  * Improved crypto-support: the new version supports SHA2 hashcodes
    (command ns_sha2) and keyed message authentications based on SHA2
    (command ns_hmac_sha2). The new version uses the C implementation
    of the crypto functions by Olivier Gay <olivier.gay@a3.epfl.ch>.

  * Reduced memory consumption: avoid memory bloat on uploads and in
    HTTP client operations with large contents (esp. useful for
    contents >1GB).  ns_getform the new ns_getcontent work now on
    spooled and in-memory content in a uniform manner.

  * Improved debugging support: new severity "Debug(request)" can be
    used follow life-time of a request (useful especially for
    inspecting concurrency of long-running requests).


Bug Fixes:

 - Fixed potential lockup, when bind operation fails,
   e.g. when server is already running (old bug)

 - Keep query parameter after directory induced redirect in fastpath
   (bug report of David Osborne in the NaviServer list)

 - Don't swallow erroneous HTTP requests: previously, error replies
   generated from the driver (e.g. 400 invalid request) were
   not logged at all (neither in the access.log or in the error.log).
   This is due to the nature, how the nslog modules works. Now
   such conditions are reported in the error.log.

 - Made HTTP-request line parser more precise. Previously
   many invalid requests were treated as HTTP/0.9 requests leading
   to strange error messages.

 - Provided more (and more detailed) error messages to ease debugging.

 - Improved validity of HTML error messages generated by NaviServer

 - Resurrected handling of non-HTTP drivers (based on
   drvPtr->requestProc) such as nssmtpd.

 - Apply url-encoded form parsing only when content is
   www-form-urlencoded.  Previously, it was attempted on every content
   which might lead to unexpected results.

Documentation improvements:

 - Align style and logo of default web server configuration with style
   of man pages
 - Improved validity of HTML man pages
 - Fixed documentation bug on ns_cookie
 - Improved documentation of configure parameters
 - various more man pages updated

Tcl API Changes:

  - new function: [ns_info ipv6] obtains information whether the binary
    supports IPv6 or not

  - As a consequence of "multiple file" support (see above) the
    following functions return for the specified name potentially a
    list of values

        [ns_conn fileoffset $name]
        [ns_conn filelength $name]
        [ns_conn fileheaders $name]

    and the ns_set returned by [ns_getform] will contain multiple
    entries for the file (and $name.tmpfile and $name.content-type).

  - new commands:
      * ns_sha2 ?-length ...? data
      * ns_hmac_sha2 ?-length ...? key message
      * ns_getcontent (obtain body of request either from memory
        of from spoolfile without memory bloat on huge files)

  - new option "-body_file" for ns_http and ns_ssl. By using this
    parameter one can send huge files without memory bloat
    (i.e. loading the full file into memory). The function is more or
    less the counterpart to the spoolfile for uploads when the content
    is larger than maxupload.

  - ns_getform processes content from [ns_conn content] or
    [ns_conn contentfile] (whatever is available).

  - interface change:
      * old interface of ns_sendmail based on positional arguments is deprecated
      * new interface of ns_sendmail is
          ns_sendmail ?-to ...?  ?-from ...? ?-subject ...? ?-body ...? \
                      ?-headers ...? ?-bcc ...? ?-cc ...?

C API Changes:
  - New functions:

    * Ns_HttpParseHost(): parses host and port number from a string.
      Reason: IPv4 address conventions use simply a colon for
      separating host and port, but IPv6 address contain as well
      various colons. The new function supports IP-literal notation
      according to RFC 3986 section 3.2.2 (IP address between square
      brackets), which has to be used as well for IPv6.

    * Similarly, the new function Ns_HttpLocationString() to unifies
      now generation of host and location strings

    * New IP version agnostic functions for manipulating sockets,
      addresses and ports:
        Ns_LogSockaddr(), Ns_SockaddrGetPort(), Ns_SockaddrGetSockLen(),
        Ns_SockaddrMask(), Ns_SockaddrMaskBits(), Ns_SockaddrSetPort(),
        Ns_SockaddrSameIP(), ns_inet_ntop(), ns_inet_pton()

    * New function Ns_ConnReturnInvalidMethod() to report that the provided
      method is invalid (was returning "not found" before)

    * New function Ns_DStringAppendPrintable() to append a string which might
      contain non-printable characters in a printable fashion to a DString
      (useful for e.g. debugging)

    * Ns_Stat() is the former function FastStat() from fastpath made
      reusable in other modules.

  - Changed C-API functions (incompatible with earlier versions):
    * The following function accept now generic (version agnostic) sockaddr:
      Ns_BindSock(), Ns_ConnSetPeer(), Ns_GetSockAddr(),
      Ns_SockBind(), Ns_SockBindUdp()
    * Ns_CtxString() renamed to Ns_HexString() to make its intention
      more clear and added a parameter to control lower and uppercase



Configuration Changes:
  * New configure flag --disable-ipv6 to build NaviServer just with IPv4 support,
    even when IPv6 support is available.
  * Updated sample config files for IPv6
  * Added makefile target: "lldb-sample" lets one running nsd with
    the sample config file "nsd-config.tcl" under lldb

Command Line Changes:
  * Extended prebind options to work with IPv6 addresses

Code Changes:

  * All built-in MIME types are updated and completed with the IANA
    media type definitions. Warning: This change might return now
    different results from ns_guesstype unless the mime type is
    specified in the config file.

  * Improve reusability: The new version exports the low-level I/O functions
    of nssock to make it reusable in other driver modules. The following
    functions are now exported to a library:
        Ns_DriverSockAccept(), Ns_DriverSockRecv(), Ns_DriverSockSend(),
        Ns_DriverSockClose()

  * Code cleanup:
    - used clean approach to obtain hex string from function pointer
    - use boolean types on more occasions
    - use more often typedef-ed function definitions
    - make NS_TCL_SET_STATIC and NS_TCL_SET_DYNAMIC an enum
      (Ns_TclSetType), since the values are mutual exclusive

  * Regression tests
    - extended test (we have now 1084 test cases)
    - remove deprecated calls

=======================================
NaviServer 4.99.10, released 2016-02-16
=======================================

Changes relative to 4.99.9
 32 files changed, 404 insertions(+), 123 deletions(-)

Bug Fixes:
- fix potential race condition for configure value "connsperthread"
- fix conflicting prototypes in nsdbpg (on some compilers)

Documentation improvements:
 * add list of deprecated tcl-commands to documentation
 * fix spelling errors

Code Changes:
 * added log entries, when deprecated tcl-commands are called
 * remove obsolete .cvsignore files from repo
 * use SCNd64 instead of PRId64 for scanning numbers
 * further cleanup of the compatibility layer of the PRI*PTR macros
 * add parallel checks and inconclusive results to cppcheck options
 * use native bool definition when available
 * add target to makefile for testing under lldb
 * further code cleanup

Important changes in modules:
 * nsdbpg: fix conflicting prototype
 * nsssl: don't crash when fetching obtaining DH parameters from pem file fails


======================================
NaviServer 4.99.9, released 2016-01-11
======================================

Changes relative to 4.99.8
 146 files changed, 5595 insertions(+), 4389 deletions(-)

New Features:

  * New command "ns_urlspace": this command allows one to attach and
    retrieve arbitrary data to URLs in a hierarchical manner form the
    Tcl level. The command allows e.g.  to write ns-perm like access
    control in Tcl without much hassle.

       ns_urlspace set ?-id i? ?-key k? ?-noinherit? /url/ string
       ns_urlspace get ?-exact? ?-id i? ?-key k? ?-noinherit? /url/
       ns_urlspace list
       ns_urlspace new
       ns_urlspace unset ?-id i? ?-key k? ?-noinherit? ?-recurse? /url/

  * Added ability to optionally minify css and js files on the fly
    when gzipped content is requested. This is an extension of the
    gzip_static/gzip_refresh feature (for details see "fastpath" section
    in "ns_return" man page.

  * New statistics from nsdb interface: "ns_db stats" returns
    number and time of handle and SQL operations (can be used
    in connection with e.g. munin for monitoring db health)

  * Added ability to pass env to ns_proxy (for details see
    man page of ns_proxy)

  * Added ability to keep "Host:" header in http client requests
    (for details, see man page of ns_http)

  * Improved logging support:

    - Added log colorization based on ANSI color codes. This feature
      makes it easier to spot error and warning in the error log
      file. Log colorization is turned on via configuration parameter
      "logcolorize" in the "ns/parameters" section in the NaviServer
      config file. Fine-tuning is possible via "logprefixcolor",
      "logprefixintensity" and per severity via

          ns_logctl severity severity-level ?-color color? \
             ?-intensity intensity? ?bool?

      When viewing a colorized error.log with less, use "less -r".

    - Added ability to log selectively SQL statements depending on
      pool and duration of the SQL command (configuration parameter
      "logMinDuration" for per-pool configuration sections,
      new command "ns_db logminduration ...").

    - Provide context in error log entries, when Tcl eval raises
      an error (this allows better distinction from where the
      exception was raised)

    - Added TCP_FASTOPEN support for macOS 10.11

Bug Fixes:
  * the urlspace code now can be compiled with and without
    __URLSPACE_OPTIMIZE__. The performance difference is
    probably for most application little.
  * fix "floating-point" format for Ns_ObjvTime():
    1.05 was interpreted as 1.5 before
  * fix binary handling and content-type in http client
    requests (e.g. for -body in ns_http command)
  * fix bad interaction between chunked encoding and gzipped
    content (when closing gzip stream)
  * Added config option for disabling directorylisting
    (fastpath config option "directorylisting none")
  * fix quoted entries in access log, when quotes are contained
    in the content
  * Don't use TCP_CORK on UDP sockets
  * Ensure list nature of errorCode is preserved in proxy calls
  * Remove potential xss attack (mostly false positives) on error
    messages that are directly generated from user strings by NaviServer
  * Improved "signal lost" handling (timeout happens, but connPtr is
    provided). On some sites the previous approach was leading to a
    state stuck in a while in the error state.
  * Fixed off-by-one error in ns_server.  NsTclServerObjCmd was
    incorrectly checking argc after parsing options. As a result,
    "ns_server -pool {}" (pool given, no subcommand) would segfault.


Documentation improvements:
  * fix obsolete documentation for ns_register_proc
  * new man page for "ns_urlspace"
  * improve documentation for main-features, ns_cache, ns_connchan,
    ns_db, ns_http, ns_job, ns_log, ns_normalizepath, ns_proxy,
    ns_register, ns_return, ns_sleep, ns_time, nsv,
  * include logo of generated html docs via css to ease Debian
    packaging (silence lintian)


Tcl API Changes:
  * improve compatibility of ns_eval with Tcl's eval.
  * new API functions
    - ns_urlspace set|get|list|new|unset ...
    - ns_logctl severity severity-level ?-color color? ?-intensity intensity? ?bool?
    - ns_db logminduration ...
    - ns_db stats
    - ns_proxy config ... -env ns-set ...
    - ns_http queue .... -keep_host_header


C API Changes:
  * Added Ns_GetTimeFromString: provide API callable from config file to
    convert strings to ns_time (supporting "sec:usec" and "sec.fraction"
    formats)
  * Mark broken and unused function Ns_UrlSpecificGetFast() as deprecated
  * Added Ns_(No)CloseOnExec implementation for Win32
  * Added Ns_SetIUpdate()
  * Ns_Cancel(), Ns_Pause(), Ns_Resume() return "bool" instead of "int"


Incompatible API Changes:
  * Potential incompatibility: "ns_eval" behaves now closer to
    Tcl "eval" (e.g. allows one to define procs with comments)


Configuration Changes:
  * Improved sample configuration for OpenACS, sample-config
    and nsssl
  * Added cppcheck target to Makefile.module


Code Changes:
  * Updated list of known HTTP status codes
  * Code cleanup:
    - use real boolean type when C99 is available
      (necessary for modules implemented in C++)
    - add const declarations
    - reduce implicit signed/unsigned conversions
    - reduce variable scopes
    - make code more uniform
    - better handling of nonnull asserts
      (don't raise warnings for these cases
       for most-recent gcc6 versions, when -pedantic is used)
    - prefer single returns from functions when possible
    - use NaviServer argv passing Ns_ParseObjv() on more
      occasions
    - replaced obsolete function 'asctime' by strftime
    - added fallback for definition of L_tmpnam, since the fallback
      from Tcl was removed on 2015-07-15
    - various changes for further silencing of static checkers
      (cppcheck and clang static checker)
 * Extended regression tests


Important changes in modules:
 * nsdbpg: fixes for "ns_pg blob*"
 * nsstats: added db-pool statistics, improved formatting
 * nsssl:
   - improved binary handling for "-body" (client procs),
   - ability to keep "Host:" header field
 * nsdbpg, nssmtpd, nsdns, nssnmp, nsudp, nsphp,nsdhcpd, nsssl, nsdbi:
   - code cleanup
 * changes in modules:
    13 files changed, 116 insertions(+), 856 deletions(-)


======================================
NaviServer 4.99.8, released 2015-04-13
======================================

Changes relative to 4.99.7
  55 files changed, 1088 insertions(+), 527 deletions(-)

New Features:
  * ns_md5, ns_sha1: added binary support
    When binary data is passed to this function, use
    Tcl byte-array operations instead of string operations
  * Added ability to debug configuration of nscgi via
    "ns_logctl severity Debug(cgi) on"
  * Added config parameter "compresspreinit": Setting this parameter
    to true (default is false) will cause the compression stream
    buffers to be allocated and initialized at server startup.
    Without it, they will be allocated and initialized as needed.  This
    change drops the initial memory footprint of a server with a
    default config significantly.

Bug Fixes:
  * Fixed bug reported by Wolfgang Winkler, when " ns_urldecode --" was
    called (switched to regular argv parser)
  * Fixed bug, when "ns_conn content" was called without content
    potential race conditions on thread exits
  * Fixed potential race conditions on thread exits
  * ns_md5: Code generation was broken
    (probably since a long time, due to a mix up of somewhat tricky casts)
  * Fixed warning in interaction between TCP_CORK and nsssl
  * Fixed bug, where one thread frees a nsv-array, but an internal
    representation of a Tcl_Obj for this array was still active in
    another thread
  * Fixed bug where ns_imgsize returned an error where it should return
    success and width and height returned as 0 (according to documentation)
  * Avoid potential access of string past null character
  * Fixed a bug with in https client commands (ns_ssl) when paths and parameters
    are passed.
  * Fixed nsphp compilation (and "make php").
    Many thanks to Branden Graves for feedback and testing.

Documentation improvements:
  * Added documentation for ns_md5
  * Improved documentation for ns_img commands
  * Improved documentation for nscgi

Configuration Changes:
  * Improved sample configuration for OpenACS and nsssl
  * Improved Makefiles (reduce redundancy for CFLAGS)
  * Improved rpath handling in configure.ac for Linux distros,
    where TCL_CC_SEARCH_FLAGS and TCL_LD_SEARCH_FLAGS are set
    empty, like e.g.Debian

Code Changes:
  * Extended Regression Test:
    - Added test set for ns_md5, compared results with other implementations
    - Added binary regression test for ns_md5 and ns_sha1
    - Added test set for ns_md5
    - Improved robustness of tests for ns_parseargs
    - Added tests for "ns_urldecode --"
    - Added test set infrastructure (nstest::https, server setup) and
      test cases for nsssl
    - Added test set for ns_img* commands
    - Number of regression tests passed 1000

  * Reduced implicit type conversions and other minor code cleanups
  * Protect against potential buffer overruns


======================================
NaviServer 4.99.7, released 2015-02-23
======================================

Changes relative to 4.99.6
    216 files changed, 20967 insertions(+), 13287 deletions(-)

New Features:

  * Added Interface to NaviServer to read/write directly
    via driver routines. The new command "ns_connchan"
    provides a higher level alternative to the idiom
    "ns_conn channel" + Tcl-commands. The new command
    uses the internal socketcallback infrastructure and allows one to

      - detach the currently open connection channel from a
        connection thread, to
      - read/write/close the channel from other threads, and to
      - query the states to then currently detached channels
        (similar to "ns_writer list")

    By accessing the driver infrastructure, "ns_connchan" makes it
    possible to read/write from/to SSL/TLS channels. The new command
    makes it easy e.g.  to implement WebSockets over SSL/TLS
    (ws://... and wss://...) which is not possible with the
    pre-existing infrastructure.

    Summary of Advantages:
      * use the same interface for http and https (and other drivers)
      * no (potential) problems with select() in Tcl when using
        many (>1024) file descriptors
      * less potential problems with Tcl-Sockets (buffering, translations)
      * lower resource consumption

    Implemented interface:
       ns_connchan detach
       ns_connchan close channel
       ns_connchan list ?-server server?
       ns_connchan callback ?-timeout s? ?-receivetimeout s? ?-sendtimeout s? channel command when
       ns_connchan read channel
       ns_connchan write channel string

  * Improved ns_log handling
    - New subcommand [ns_log stats] returns the statistics
      from calls to ns_log by severity-level. This allows
      to write monitoring tools to provide rough overviews
      at which time at which server what kind of
      servers/warnings/... were produced

    - Allow to modify logging of SQL statements via
         ns_logctl severity Debug(sql) on
      at runtime

    - Add debugging severity for tasks "Debug(task)"

  * Added ability to load a driver module without listening on a
    port: This is useful in cases, where the driver registers
    client commands (such as nssock or nsssl) and only these
    are wanted. Loading the driver without listening can be
    achieved by specifying "0" for the port.

  * Improved support for windows compilation with native compilers
    for 32 and 64 bit (Many thanks to Andreas Piskorski)


Performance Improvements:
  - Added more compiler hints likely/unlikely
  - Made Ns_Encrypt threadsafe under Linux (reduce mutex)
  - Use getpwnam_r, getpwuid_r, getgrnam_r, and getgrgid_r instead of
    their thread-unsafe counterparts. This change allow these functions
    to run without locking.
  - Reduced size of compressed requests in several situations (empty io_vecs)


Bug Fixes:
  * Fixed encoding in [ns_conn content]
  * Fixed incorrect result of "ns_conn protocol" (returned empty)
  * Fixed crash when a thread was created with
    "ns_thread begindetached" and an error occurred
    during startup
  * Fixed memory management for TclThread by moving TclThreadArg into
    thread local storage
  * Fixed race condition in TLS cleanup
  * Fixed bug in argument parsing of "ns_cond"
  * Fixed setting of private/shared in ns_module
  * Fixed bug with "ns_adp_ctl stream on"
  * Moved network module filtering to the front to avoid double loading
    of Tcl modules (many thanks to William Scott Jordan for the fix)
  * ns_http:
    - Fixed trailing slashes in some URLs
    - Fixed possible race condition when time gap between "ns_http queue"
      and "ns_http wait" is larger
  * Minor fixes in nscgi
  * Windows fixes
    - Fixed weird bugs when Tcl-functions are called during
      load of .dll files (showed up as hanging/crashing functions
      returning time from Tcl)
    - Fixed Ns_NormalizePath() for //foo/bar paths on Win32 (bug #1162890)
    - Use distinct bit-patterns for signal detection under windows.
    - Fixed array unset bug
  * Fixed a potential race condition in writer threads
  * [ns_perm delperm]: Fixed ignoring of argument "-noinherit"
  * Fixed reply headers in HEAD requests


Documentation improvements:
  - Improved typesetting, wording
  - Removed more obsolete content (e.g. concerning CVS, old dummy parameters)
  - Use examples from existing code basis
  - Improved comment density in source code
  - Documented missing subcommands, such as "ns_time format"


Tcl API Changes:
  * Marked "ns_geturl" as deprecated, use ns_http instead
  * Marked redundant names of subcommands in "ns_thread" as deprecated
    - ns_thread begin -> ns_thread create
    - ns_thread getid -> ns_thread id
    - ns_thread join -> ns_thread wait
    - ns_thread get -> ns_thread handle
  * Allow time interval of "-timeout" for "ns_db gethandle" to be
    specified with second factions (in the usual "ns_time" format)


C API Changes:
  - [ns_conn content]: new flag "-binary" to return always the raw bytes
  - [ns_thread begin|begindetached]: added flag "-name" for naming
    thread explicit


Configuration Changes:
  - Updated Makefiles as recommended in documentation


Code Changes:

  * Many of the changes are the result of a (sometimes over-picky)
    code-checkers on unix and windows systems, in particular pc-lint,
    cppcheck and the clang static checkers. Many thanks to
    Maurizio Martignano for setting up the testing framework
    based on SonarQube and for eagerly pull in updates.

  * Function prototypes and API definition
    - add missing function prototypes
    - removed occurrences of old-style prototypes (when functions are defined without arguments)
    - removed unneeded external references and symbols and unreferenced enumeration values
    - aligned argument names in function prototypes with function definitions
    - added non-null/returns non-null assertions for prototypes
    - added asserts to check non-null properties
    - added "const" when appropriate
    - added missing "static" declarations

  * Improved and more consistent macro definitions
    - use INT2PTR and PTR2INT consistently when converting between
      integers and pointers
    - use NS_TRUE/NS_FALSE instead of 1/0
    - use NS_INVALID_FD instead of -1
    - use NS_SOCKET and NS_INVALID_SOCKET instead of int/-1
    - use NS_INVALID_PID for invalid pids
    - change from usage of -1 or INVALID_SOCKET (windows predefined constant)
      to NS_INVALID_SOCKET due to confusions
    - use UNUSED consistently
    - character properties and conversions
       . new macro CHARTYPE for testing character properties
       . new macro CHARCONV for converting characters
    - added a new macros PTR2NSSOCK and NSSOCK2PTR in analogy to PTR2INT
      and INT2PTR to mask more win incompatibilities
    - prefer "const" over "CONST" unless in Tcl interface
    - improved consistency of variable and macro naming
    - put macro values into parenthesis

  * Improved general code quality
    - reduced variable scopes
    - remove cases of undefined C behavior
    - prefer leaving a switch statement via "break", and not via "return"
    - move assignments out of if-conditions
    - brace body of "if" statements and "for" loops
    - make ignoring of function results explicit
    - avoid shadowing of variable names
    - fix potentially uninitialized local and static variables

  * Used more precise and consistent types
    - prefer type "bool" over "int" when appropriate
    - use unsigned types for bit operations
    - prefer size_t, ssize_t, socklen_t, pid_t, nfds_t over int
    - use consistently uintptr_t for nextids
    - use enumerations instead of plain defines on some occasions
    - prefer boolean expression
    - reduce implicit conversions
      (signed/unsigned, signed constants, loss of precision, ...)
    - removed many cases of casts of complex expressions
    - reduce prohibited operations with plain (signed) chars
    - recast results of <<
    - standardize type definitions of objv in ObjCmds to the
      variant recommended by Tcl man pages

  * Improved C-standard compliance
    - silence "-pedantic" compilation with -stc=c99 under linux on most cases
    - avoid c90 identifiers starting with str[a-z], to[a-z], E[A-Z], _*
    - avoid c90 reserved identifier "signal", "free", "remove", "time"
    - added missing printf macros

  * Improved usage of c-library functions and OS abstraction
     - use arc4random() when available
     - use crypt_r() when available
     - prefer memcpy() over strncpy(), since it has in most cases the
       appropriate semantics and it is faster
    - new/fixed OS abstractions functions/macros:
       ns_lseek, ns_dup, ns_dup2, use ns_open, ns_close, ns_lseek, ns_dup,
       ns_dup2, ns_write, ns_read, ns_mkstemp

  * Removed potential crashes from buffer overflows
     - use memory bounded functions instead of potentially buffer
       overflowing functions
     - replace unsafe atof() by strtod()
     - replace unsafe atoi() by strtol()
     - replace call to deprecated function asctime() by a call to
       asctime_s()
     - remove hard-coded sizes of ip-addresses and replace it by NS_IPADDR_SIZE
     - don't hardcode sizes for string arrays

  * Use of modern-style argument parser Ns_ParseObjv() on several places
    instead of manual argv parsing
        ns_job interface, ns_truncate, ns_ftruncate,
        ns_addrbyhost, ns_hostbyaddr

  * Make mutex timings configurable via #define NS_NO_MUTEX_TIMING

  * Improved code formatting
    - add emacs editor hints to keep formatting conventions
    - prefer spaces over tabs

  * Extended regression test


Changes in Modules worth to be noted:

  * WebSocket:
    New module implementing a WebSocket interface.  This is a Tcl-only
    module defined with two sample applications (chat and a file
    watcher for e.g. error.log and access.log).  It support ws://
    (WebSocket over http) and wss:// (WebSocket over https).  For
    details and configuration, see the README file of the module.

  * nszlib:
    Added commands:

      ns_zlib deflate /data/
      ns_zlib inflate /data/

    which are compatible with the same-named php functions.
    [ns_zlib deflate ...] returns the raw compressed binary data.
    These functions are e.g. needed e.g. when implementing
    as sasl interface for shibboleth.

 * nsssl:
    - Ability to load the module without listening to socket by
     specifying 0 as port.  This is useful for e.g. just using the HTTPS
     client command ns_ssl.
   - Update configuration recommendations

 * nsoracle:
   Backport of the nsoracle driver from AOLserver to NaviServer with
   code cleanup.


======================================
NaviServer 4.99.6, released 2014-06-29
======================================

Changes relative to 4.99.5
    198 files changed, 4972 insertions(+), 2657 deletions(-)

New Features/Performance Improvements:

    * Added support for delivering static gzipped content
      via ns/fastpath.
      NaviServer allows now deliver gzipped content for static files
      in cases the client requests for this. The gzipped files
      are stored
      statically in the filesystem like the unzipped content. Therefore,
      the file delivery of gzipped content can be performed without
      runtime penalty. NaviServer compares the timestamps of the
      compressed and uncompressed content. If the time-stamp of the
      uncompressed content is changed, NaviServer refreshes the
      compressed content automatically.

      The static gzip delivery is controlled over the following
      configuration parameters:

        - parameter "gzip_static" for "ns/fastpath" (default false)

          Send the gzipped version of the file if available and the
          client accepts gzipped content. When a file path/foo.ext is
          requested, and there exists a file path/foo.ext.gz, and the
          timestamp of the gzipped file is equal or newer than the
          source file, use the gzipped file for delivery.

        - parameter "gzip_cmd" for "ns/fastpath" (default "")

          Command for zipping files in case the (static) gzipped
          version of the file is older than the source. The command is
          just used for re-gzipping outdated files, it does not
          actively compress files, which were previously not
          compressed (this would be wasteful for e.g. large temporary
          files, etc.). If this parameter is not defined, outdated
          gzipped files are ignored, and a warning is written to the
          error.log. Example setting: "/usr/bin/gzip -9".

        - parameter "gzip_refresh" (default false)

          When the parameter is set to true and the modification time
          of the compressed file is older than the modification time
          of the source then refresh the compressed file automatically
          with the command "::ns_gzipfile source target". When this
          parameter is not defined (or the refresh cmd fails),
          outdated gzip-ed files are ignored, a warning is written to
          the error.log and the content is delivered uncompressed.

      The content is never delivered gzipped on range requests.



    * Security improvements:

      - Prevent potential HTTP response splitting attack: all response
        header fields are sanitized to avoid injection of header file
        contents potentially leading to HTTP response splitting attacks.

      - Improved nsssl driver
        * provide forward secrecy and DH key exchange with precompiled
          defaults
        * support elliptic curve cryptography (ECDH)
        * deactivated SSLv2

      - By using parameter "extraheaders" (see below) in nsssl one can
        activate HTTP Strict Transport Security (HSTS) for nsssl (see
        https://bitbucket.org/naviserver/nsssl/)

      - The sample configuration of nsssl leads to a "A+" rating from
        SSL labs.


    * Mime-types overhaul:

      - NaviServer supports now the all mimetypes as defined via RFCs,
        W3C and IANA
      - Some incorrect mimetypes are fixed
      - scripted mimetype definitions produce warnings on overwriting
        of mimetypes and on useless definitions.


   * Modules update:

      - include nsdbi* in packaged module tar file
      - extended options in ns_dbi for dbi_rows
      - added compatibility to nsdns for new versions of DiG (9.10.*)
      - fixes for nsudp (HTTP over UDP), nsdbpg, nszlib,
        nssmtpd, nsstats


Bug Fixes:

    * Tcl argument list parser: The old implementation could lead to
      crashes when Tcl_Objs where shared and the internal validation
      of the internal representation failed.

      Tcl_GetIndexFromObj() validates internal representations based
      on the pointer of the base string table, which works only
      reliably with static string tables. Since command definitions
      contain non-static fields (which cannot be determined at compile
      time) NaviServer can't use static string tables, but uses
      stack-allocated string tables for command definitions. This can
      lead to mix-ups for shared Tcl_Objs (keeping base of string
      table and index) in case two string tables are at the same
      position on the stack. As a consequence, the internal
      representation with a potentially wrong index is reused,
      leading to potential crashes. Now. the caching is only allowed
      for non-shared Tcl_Objs.

    * Module loading: Previous versions of NaviServer loaded always
      "global modules" after per-server modules (and after blueprint
      generation).  If e.g. a database modules was loaded globally, it
      was not possible to refer to its defined command from the
      blueprint. Now, just the loading of network modules happens in
      the strict old order.

    * Ns_CacheUnsetValue() is now more robust against code, where
      freeProc calls an ns_cache operation (such as
      e.g. nsdbipg). Before that modification, double free operations
      were possible when the cache was pruned.

    * Make sure to initialize all members of Ns_DriverInitData to zero

    * sockcallback.c: fix size of reallocation unit (many thanks to
      Wolfgang Winkler for pointing this out)

    * tclmisc.c: fix incorrect type for allocation unit (sha context
      instead of md5 context)

    * Fix flag settings in ns_adp_parse

    * Fix clock ensemble oddity in blueprint (error message: Error:
      timezone ":Tcl/Localtime" not found; many thanks to
      David Osborne)

    * Save Tcl interpreter aliases and ensembles in blueprint (Many
      thanks to Jeff Rogers)

    * Fix generation of documentation: dtplite from tcllib 1.15 does
      not allow spaces in "titles" of manpages. Fix all manpages, such
      that build-doc works again.


Documentation improvements:

    * Doc page for ns_return: added section for describing
      fastpath configuration

    * Document that "ns_conn compress 0" can deactivate compression

    * Updated documentation of deprecated commands in the source

    * Fixed/updated/extended various man pages such as ns_tmpnam,
      ns_getform, ns_set

    * Removed obsolete commands from the documentation (ns_set with
      -persist, -shared, ns_share)


Tcl API Changes:

    * ns_setcookie, ns_getcookie ns_deletecookie:

      - ns_setcookie, ns_deletecookie: added flag "-replace" to
        replace already issued cookie requests in output headers; the
        same option is used in OpenACS.

      - ns_setcookie: added option "-discard" as specified in RFC 2965

      - ns_getcookie: added option ?-include_set_cookies bool? to
        search cookies being set as well (from output headers); the
        same option is used in OpenACS.

    * ns_http:

      - Added flags "-file /varName/" and "-spoolsize /int/" to
        "ns_http wait". If the content of the obtained file is larger
        or equal than spoolsize, it is spooled to temp file,
        and the name of the temp file is returned in the
        variable provided by "-file". These options make it
        possible to retrieve also large
        content (e.g. video files) via ns_http without bloating memory

      - Additional parameter "-decompress" for "ns_http wait" to
        compress the result on the fly (incrementally) in
        case it is content encoding is "gzip"

    * ns_time: add option "ns_time format" to print a time
      in the sec:usec format in secs in a decimal dot notation

    * Mark ns_tmpnam as deprecated since it uses a
      deprecated C-library function (use ns_mktemp instead)

    * Allow "ns_mktemp" to be called without template
      (makes migration from ns_tmpnam simpler)

    * Mark ns_connsendfp as deprecated (it was already
      documented as deprecated, superseded by ns_writefp)


C API Changes:
    None

Incompatible API Changes:
    None

Configuration Changes:

    * New parameter "extraheaders" to drivers (e.g. nssock,
      nsssl). This feature allows an admin to specify extra reply
      headers sent back on every request. By using this feature, one
      can activate for example HTTP Strict Transport Security (HSTS)
      for nsssl (see https://bitbucket.org/naviserver/nsssl/)

    * Update man pages and sample config files


Command Line Changes:
    None

Code Changes:
    * Added compatibility with OpenSolaris (e.g. OmniOS).

    * Code Cleanup
      - reduce variable scopes to improve locality
      - Get rid of CVS variables
      - make test for byte-array safe for changes introduced in
        Tcl 8.6 and back-ported to Tcl 8.5
        (see e.g. https://core.tcl-lang.org/tcl/info/91be696bf3)
      - defined new macro NS_GNUC_DEPRECATED_FOR() to be able to provide
        replacement hint and use it where appropriate
      - improve error message

    * Test environment:
      - nstest::http: added flag "-getmultiheaders" to return all
        header fields (multiset) with the specified name

    * Build environment:
      - use recommended autoconf constants quoting
      - deactivate AM_* macros (get rid of warnings), since
        these are not used by autogen.sh
      - replace obsolete macro AC_TRY_RUN, AC_TRY_LINK
      - use recent version of install-sh and tcl.m4
      - additional make target: cppcheck

   * Extended regression test

======================================
NaviServer 4.99.5, released 2013-05-25
======================================

New Features:

    * New connection thread architecture:
      - Introduced connection thread queues for better control over
        connection threads and to reduce queuing operations for
        handing requests from the driver to the connection threads.

    * Support for improved TCP socket option handling
      (when supported by the OS);
       - use TCP_FASTOPEN (when deferaccept is configured)
       - Adding TCP option "nodelay" for nssock on operating
         systems that do not use this by default (such as Linux)
       - Use TCP_CORK to optimize TCP_PACKAGE size on machines where
         this is available.

    * Improved asynchronous request handling and log file writing to
      reduce latencies and improve robustness

       - Asynchronous HTML streaming via writer threads to reduce
         connection thread blocking time for slow delivery lines.
       - New asynchronous log file writer to write access.log
         and error.log without blocking - configurable

    * Better scalability by reducing busiest lock contention and
      finer lock granularity (see below).

    * Improved introspection commands:
      - Report more detailed timing information and request statistics
        via "ns_server ?-server s? ?-pool p? stats". The command
        returns accept-times, queue-times, filter-times and run-times
        per server and pool.
      - Report OS-level thread ID via "ns_info threads" when supported
        from the OS (currently just Linux). This information is used by
        nsstats.tcl to report e.g. system time and user time per thread.
      - New subcommand "ns_conn clientdata" to query or set client data
        (used e.g. in ns_writer list)
      - Added ns_fastpath_cache_stats to obtain usage info from the
        fastpath cache

    * Support for marking scripted and C-implemented Tcl-commands
      as deprecated.



Performance Improvements:

    * Server lock to pool lock in most cases
    * Lazy init of zlib (mostly reduction in memory consumption)
    * Allow delivery of mmapped files via writer without the need of copying content.
    * Introduce separate locks for waiting queue (wqueue) and thread queue
      (tqueue) per pool. In classical naviserver there is was a single poll lock
      (covering all pools) used. The change leads to a much finer lock
      granularity in improves scalability.
    * Added async disk writer to reduce request latencies due to filesystem latencies.
      Now used optionally for access log and error-log.
    * Use GetSection() instead of Ns_ConfigCreateSection() in ConfigGet().
      This is faster and removes the need for the most-frequently used mutex lock
      in naviserver, namely "nsd:conf".
    * Compiler optimizations for branch prediction - likely(),unlikely() macros.
    * Improved concurrency in writer threads by supporting asynchronous
      partial writes.


Bug Fixes:

    * Do not save variables of the top-level namespace into the blueprint.
      OpenACS had with this a problem, since the database handles are managed via
      global variables, which is solved by this modification.
    * ns_eval -sync syntax.
    * Fixed all known range request bugs from regression test.
    * Fix output for "ns_server active|queued|all"
    * ns_server stats and in ns_server connections to be per server.
    * Fix length computation in "ns_writer submitfile" when offset is specified
    * Fix thread safety of "nswriter list".
    * Simplified driver logic and fixed bad interaction with nsssl,
      which used nonblocking sockets, but declared itself as a non-async
      driver). Fixed potential bug for partial reads in header parsing
      (string comparison could read past available bytes, pick up values
      from previous requests).
    * Increase static buffer size to prevent SSL from stalling.
    * Fix a bug showing up with nsssl (a driver has no NS_DRIVER_ASYNC flag set),
      where pollin says that data is available, but the read returns no data
      and leads to a busy loop.
    * Fix bug in rolling access log when rollfmt is specified. Previously
      the log file was closed but not reopened, log data was lost.
    * Protect against a bug in Tcl, when several threads are created
      concurrently via Tcl_CreateInterp()


Documentation improvements:

    * Updated/completed/added documentation (ns_conn, ns_http and
      friends, ns_writer, ns_register, ns_register_op, ns_return, ...)

    * Remove man pages for non-existing commands and half written man
      pages.

    * Updated documentation in configuration files

    * Added sample configuration file for OpenACS


Tcl API Changes:

    * New and modified commands/subcommands:

      - nsv_get: added optional argument ?varName? to nsv_get to
        obtain compatibility with tsv::get in the Tcl thread
        library. This option allows an atomic test + get operation,
        avoiding unsafe nsv_exists following by nsv_get.

          nsv_get /array/ /key/ ?/varName/?

      - Obtain a value from the cache
        (similar to nsv_get)

          ns_cache_get /cache/ /key/ ?/varName/?

      - Write a notice to the error.log when this command
        is used

          ns_deprecated ?/alternative/? ?/explanation/?

      - Change server settings on the fly:

          ns_server ?-server /server/? ?-pool /p/? maxthreads ?/value/?
          ns_server ?-server /server/? ?-pool /p/? minthreads ?/value/?

      - The following commands can return now server-specific
        results, when "-server ..." is used:

          ns_server ?-server /server/? filters
          ns_server ?-server /server/? pagedir
          ns_server ?-server /server/? requestprocs
          ns_server ?-server /server/? tcllib
          ns_server ?-server /server/? traces
          ns_server ?-server /server/? url2file


      - The following commands can return now server-specific
        and pool-specific results:

          ns_server ?-server /server/? ?-pool p? active
          ns_server ?-server /server/? ?-pool p? all
          ns_server ?-server /server/? ?-pool p? queued
          ns_server ?-server /server/? ?-pool p? connections
          ns_server ?-server /server/? ?-pool p? maxthreads ?value?
          ns_server ?-server /server/? ?-pool p? minthreads ?value?
          ns_server ?-server /server/? ?-pool p? stats
          ns_server ?-server /server/? ?-pool p? threads
          ns_server ?-server /server/? ?-pool p? waiting

      - Return number of requests, number of spools and number of
        requests added to the waiting queue plus cumulative times to
        serve requests.

          ns_server ?-server /server/? ?-pool /p/? stats

      - Query for the current connection, whether
        the requestor accepts zipped results

          ns_conn zipaccepted

      - Return for the current connection the
        connection pool

          ns_conn pool

      - Query or set for the current connection the client data.  The
        client data is provided by the application and is potentially
        passed to different threads and can be used to establish the
        context with the connection thread. For example, the writer
        thread outputs the client data when listing running connections
        (one can determine e.g. which user has initiated the delivery,
        etc.).

          ns_conn clientdata

      - Query or modify the size limit of files being delivered
        via the writer threads

          ns_writer size /driver/ ?/value/?

      - Query or modify the configuration parameter
        writerstreaming that controls streaming HTML
        output via writer threads

          ns_writer streaming /driver/ ?/value/?

      - Allow to restrict the output of "ns_writer list"
        to list only requests from a particular (virtual) server

          ns_writer list ?-server /server/?

      - The output of "ns_writer list" now contains the start time of
        the initiating request, the name of the thread, driver, the
        ip-address of the requestor, the file descriptor, the
        remaining size and the bytes already sent, and the client data
        as provided via [ns_conn clientdata].

      - Determine the section in the configuration for a driver
        in the configuration file

          ns_driversection ?-driver /drv/? ?-server /server/?


    * Deprecated commands/subcommands:


      - ns_httpget, ns_httppost and ns_httpopen are deprecated (use
        ns_http instead)

      - "ns_info platform" is deprecated; use $::tcl_platform(platform) instead.
        "ns_info winnt" is deprecated; use $::tcl_platform(platform) instead.

      - ns_register_adptag is deprecated - use ns_adp_registerscript instead.

      - ns_adp_registertag is deprecated - use ns_adp_registeradp instead.

      - The following commands are deprecated

          ns_info filters
          ns_info pagedir
          ns_info pageroot
          ns_info requestprocs
          ns_info tcllib
          ns_info traces
          ns_info url2file

        and defined the following commands instead:

          ns_server ?-server /server/? filters
          ns_server ?-server /server/? pagedir
          ns_server ?-server /server/? requestprocs
          ns_server ?-server /server/? tcllib
          ns_server ?-server /server/? traces
          ns_server ?-server /server/? url2file

      - ns_server - passing pool as 2nd argument is deprecated.
        new option serverdir returns the base directory. Using
        instead the explicit options
          "ns_server ?-server /server/? serverdir"

      - "ns_server keepalive" is deprecated;
        use "ns_conn keepalive" instead


C API Changes:
    * Ns_OptionConverter: added Ns_OptionServer to convert string to
      existing server.  Extended option parser to allow options at the
      end of a command

    * New function NsWakeupDriver(); used in queue to signal
      conditions to the driver, when we might have to recreate
      threads.

    * New function NsWakeupConnThreads(ConnPool *poolPtr) to wake up
      every idle conn thread during shutdown.


Incompatible API Changes:
   * ns_setexpires takes single argument for seconds to calculate
     Expires header.  Passing conn no longer supported (was deprecated).

Configuration Changes:
    * Provided sample OpenACS config file openacs-config.tcl.

    * New boolean parameter "writerstreaming" for drivers to
      activate/deactivate streaming of HTML output via writer thread.

    * New boolean parameter logpartialtimes true" for section
      ns/server/${server}/module/nslog: Include a high-resolution
      start time and partial request durations (accept, queue, filter,
      run) in the access log.

    * New integer parameters "lowwatermark" and "highwatermark" in
      section ns/server/${server} for controlling connection thread
      creation:

        ns_param lowwatermark 10  ;# Create additional threads when
                                  ;# the queue is more than 10% full
        ns_param highwatermark 80 ;# Allow concurrent when queue is
                                  ;# more than 80% full. Specifying
                                  ;# 100% effectively disables this.

    * New Boolean parameter asynclogwriter under ns/parameter to
      turn on/off asynchronous writes to access log and error log

    * Obsolete flushcontent parameter is no longer supported.

Command Line Changes:

    * Allow calls for "nsd -c" without config files.

        $ /usr/local/ns/bin/nsd  -c

    * Allow specification of environment variable NAVISERVER to point
      to the naviserver home directory (for e.g. log file
      directories), otherwise determined by the location of the nsd
      binary. Examples:

        $ NAVISERVER=/usr/local/ns/ ./nsd/nsd  -c


Code Changes:
    * Moved statistics structure from NsServer to ConnPool to track
      per-pool usage. Added member poolPtr to Conn for easy association.

    * Defined new C function Ns_LogDeprecated() for handling deprecated
      messages for tcl-level defined commands.

    * Standardize printing of timings (get rid of stupid $sec.$microsecs,
      where 1.2 means 1.000002 secs).

    * Extend interface of NsWriterQueue() to accept iovec & nbufs
      (as required by Ns_ConnSend()). This saves an unneeded copy of the
      send data.

    * Reduce number of (used) API calls by favoring iovec interface.

    * Handle partial low-level writes correctly by allowing partial
      writes at the driver level.

      - The old SockSend() is now implemented using of nssock.sendProc
        and performs partial writes on nonblocking sockets.

      - Ns_SockSendBufs() delivers all iovec bufs like before but now
        calls NsDriverSend() instead of the direct SockSend().

      - Ns_ConnSend() calls Ns_SockSendBufs() instead of NsDriverSend() in
        cases, where the writer thread is not used.

      - Ns_SockSendBufs() calls NsDriverSend() instead of SockSend()

      - Ns_SockSendFileBufs() calls NsDriverSend() instead of
        Ns_SockSendBufs()

      Further changes:

      - Group fields in WriterSock to separate concern of file-spooling and
        memory based requests.

      - Factor out WriterSend() from DriverThread() to improve readability
        and locality

    * use scatter/gather interface for writer instead of the char* interface

    * Generalized option parser from ns_server and used in
      ns_urlencode and ns_urldecode to get rid of the potential crash
      due to non-static strings in Tcl_GetIndexFromObjStruct().

    * Update to TEA 3.9, rename configure.in to configure.ac as
      suggested by the auto-tools warning

    * Provide better error message when subcommand of "ns_server" not
      found.

    * Add lookup for server in NsTclServerObjCmd()

    * Make Ns_ObjvTable static where possible

    * Drop LogToAsyncFile and use NsAsyncWrite in LogToFile.  Async
      log file writing can be switched on/off by configuring the async
      log writer.

    * Remove spread factor, which is not needed due to connection
      thread queue

    * use gettimeofday() if available instead of the round trip to tcl

    * Adjusting server exit to new infrastructure; new function
      NsWakeupConnThreads(ConnPool *poolPtr) to wake up every idle
      conn thread during shutdown.

    * Report error message in sock accept, if the errno is different
      from EAGAIN.

    * Let Ns_ConnSend() use the writer thread to deliver adp-content
      etc. without blocking a connection thread. This improves the request
      latency and avoids potential slow-delivery DOS attacks.

    * Extend the interface of SockWriterRelease() to contain the
      queue. SockWriterRelease() manages now the queue entries as seen
      e.g. by "nswriter list".  Handle POLLHUP in writer thread
      explicitly.

    * Delegate close() operations from writer thread to driver thread via
      NsSockClose().

    * Added support for SO_ACCEPTFILTER for machines having no
      TCP_DEFER_ACCEPT

    * Extending buffer size when sending files via writer thread from
      4KB to 16KB.

    * Replaced unsafe system calls with safe ones (e.g. mktemp() by mkstemp())

    * Improved code quality with static analyzer and valgrind

    * Extended regression test


======================================
NaviServer 4.99.4, released XXXX-XX-XX
======================================

New Features:

    * Less eager thread creation short request peaks. Naviserver tended
      to create too many threads in situation of short bottlenecks (e.g.
      filesystem latencies). This can reduce resource consumption on
      larges sites significantly.

    * New threads are added to the waiting queue in an already warm
      state.  Previously, threads we created in one step and the
      initialization of thread blocked the first request added to the
      thread. "minthreads" controls the number of warm threads kept
      around.

    * Improved cache statistics: added "saved", expressing cumulative
      saved time from "ns_cache_eval". The reporting of these
      statistics as updated as well in the add-on package nsstats.

    * Improved locking statistics: added "total_waiting_time" and
      "max_waiting_time" to the mutex monitoring statistics. The
      reporting of these statistics as updated as well in the add-on
      package nsstats.

    * Made upload progress management compatible with usual
      tracking conventions by using the query parameter "X-Progress-ID"
      if present (as used in nginx, lighttpd and by apache (mod_passenger)).

    * Added support for chunked encoding for uploads (as used e.g. in WEBDAV
      PUT requests from macOS Finder).

    * Added small compatibility layer for providing Aolserver compatibility
      (e.g. support "ns_cache eval" as well as "ns_cache_eval"); the layer
      is designed to be sufficient for OpenACS.

    * Improve concurrency on writing on access logs. File system latencies
      can block the full server, the change improves the situation.

    * Added [ns_thread stackinfo] to obtain stack size and usage from the
      current thread.

    * Add option "-exact" to "ns_cache_keys" to enable exact lookups (also
      when glob characters are used in keys)

    * Provided constat time lookup for [ns_cache_keys /cache/
      /pattern/], when "pattern" contains no glob characters

    * Added .htaccess mode for nsperm module. Similar to Apache but
      only to allow access. This is disabled by default, can be
      enabled in the ns/server/servername/module/nsperm section. Doc
      is updated. In this version only current directory is checked
      for .htaccess file.

    * New lazy Tcl interpreter initialization option. Saves memory and speeds
      initialization of interp on first use by defining procs on-demand.
      See: tcl/lazyloader parameter below.

    * New module nsproxy executes Tcl scripts via pool of external
      processes. Useful to keep buggy/non-thread-safe code isolated from
      main server process. See also: ns_job.

    * Log filter callbacks (Tcl and C) may be added to the error log stream
      to handle particular kinds of log messages by e.g. logging to a separate
      file.

    * Error logging may now be disabled/enabled at runtime with the
      ns_logctl command.

    * User-defined named log severities may be created using the ns_logctl
      command. These may be enabled/disabled individually, at runtime, unlike
      the old numeric user-levels.

    * New limits feature. Connection limits can be bundled together into a
      named set of limits and then applied to a subset of the URL
      hierarchy. The max number of connection threads running and waiting to
      run a URL, the max upload file size, and the max time a connection
      should wait to run are all configurable. See ns/limits parameters below.

    * ns_cache_create now takes a -maxentry switch limits the max size of an
      entry allowed into the cache to prevent wasteful cache flushes.

    * ns_cache_create now takes a -timeout switch which is the default timeout
      for one thread to wait for another to complete an ns_cache_eval command,
      if the -timeout switch is not given to the ns_cache_eval command itself.

    * Time values passed to commands such as the -timeout switch of
      ns_cache_eval now distinguish between an absolute time in the future and
      an offset from the current time. A heuristic is used: large values are
      absolute times in the future.

    * A new [ns_cache_eval -force ...] switch replaces any existing cached value
      whether it is up to date or not.

    * A new ns_cache_stats -contents switch dumps the expire and size of each
      entry in the cache cache. Useful when developing / testing to check
      utilization.

    * The new [ns_conn keepalive ?bool?] sub-command disables or requests
      keepalive behavior for the current connection.

    * ns_getcsv now takes a -delimiter switch.

    * ns_parseargs: default values can now be specified with in the form
      {[..]} to cause evaluation, like ns_parseargs {-flag {[script]}} $args ...

    * Commands which timeout now set an NS_TIMEOUT Tcl error code, which if not
      caught is reported as an HTTP 503 Unavailable response.

    * Handle png images, as well as existing gif and jpg with new ns_img*
      commands.

    * New [ns_mutex eval script] to safely handle unlocking on error.

    * Thread commands now takes names as well as thread-object references.

    * New options jobsperthread and jobtimeout for ns_job command to perform
      automatic job threads exit in case of idle or max number of jobs reached

    * Updated ns_perm module to support missing checkpass and sepass commands

    * ns_http was ported from Aolserver 4.5 and uses new task API

    * ADP parser was ported from AS 4.5 and also used for processing .tcl files

    * New option acceptsize for driver to tell how many connection can be accepted at once,
      this improves performance significantly in case of large number of incoming connections

    * New Ns_Sls* and ns_sls commands supporting socket-local-storage (data which persists for
      the lifetime of an open TCP connection)

    * ns_httpget now supports chunked encoding in results

    * ns_return etc. will now gzip the body content, if that option is enabled.

    * Static files can now be sent using the OS native sendfile() on
      supported platforms (currently Linux).

    * ns_unregister_op is now the correct way to unregister procs, adp, and tcl
      pages. (The older names are kept around for backwards compat.)

    * NaviServer now builds on Win32 using the standard configure scripts and
      the MingWin32 compiler.

    * New command ns_mutex trylock which works similar to the same C API function

    * New command ns_filestat which is similar to file stat but uses direct system
      call instead of Tcl VFS

    * New command ns_db rowcount, which return the number of affected rows after a
      DML operation.

    * Support for If-Range: header in conditional range requests, this makes the server
      more RFC compliant and allows file retrievals, re-gets and file mirroring without
      additional coding, it is all done by the server and HTTP

Security Improvements:
    * Disallow terminal escape characters in the log file (potential attack)
    * Protection against path traversal attack

Bug Fixes:
    * Fixed timeout keep-alive management: When many requests were
      posted into a persistent connection, it happened frequently that
      a few of these requests were processed after the keep-alive
      timeout (keepwait) was firing.

    * Fixed various potential crashes (range requests, severity
      management, 64 bit, NsTclParseArgsObjCmd with Tcl 8.5, POST with
      sizes ending exactly at page boundary, accessing "nsconn
      content" after connection close, purges on new-created entries
      in the cache).

    * Improved test environment:
      - placed nstest into a namespace
      - added parameter "-verbose" to nstest::http to trace communication
      - added parameter -omitcontentlength to nstest::http to test
        requests without content length

    * Fixed early closes from the server on too-large content (looked like
      a server crash to clients like firefox, google chrome, etc.). This
      has the disadvantage that now the full request has to be transferred.

    * Naviserver could loop under linux in some situations where a
      client connection was closed unexpectedly (observed under vmware
      under intel 64-bit).

    * Improved Code quality (reduced scope of variables, unused variables,
      changed types of file descriptors for socket from "int" to "SOCKET"
      etc.).

    * removed unused config parameter "urlstats", "maxurlstats",
      "globalstats", "maxdropped", "keepallmethods"

    * Fix to prevent multiple DriverAccepts on the same socket. The
      original coded relied on the fact that later accepts lead to an
      ERROR_STATE. Under RHEL 4 (Power, 64-bit) the second accept
      blocks.

    * Fix Ns_Time for platforms, where time_t is long.
    * Updated documentation
    * Various 64-bit fixes.
    * Fix path attribute of HTTP Cookie string.
    * Make sure upload stats lock is unlocked after use.
    * Fix crash in writer thread logging already freed data.
    * Fix crashes in cache code due to incorrect expired entry flushing fixed.
    * Only add cache commands to virtual server interps.
    * Don't inflate flush-stats on cache eval error.
    * Custom error documents (return redirects) now send back the correct HTTP
    * response code. Used to always report 200, success.
    * Make unsetting an environment variable work cross platform.
    * Fix bug where executable name was freed before use.
    * Don't delete bound Unix domain sockets.
    * Fix typo in ns_setexpires command.
    * Windows: block SIGPIPE.
    * Windows: fix stdin, stdout, stderr channel initialization.
    * Fix infinite loop in spooler thread code.
    * Message line-breaking of email bodies sent with ns_sendmail now works
      correctly for non ASCII data.
    * Files over 2 Gb are supported for logging, serving, uploads, etc.
    * Fixed ns_sendmail for cases when message body is large and it fails to
      send all body because of nonblocking socket mode
    * Fix a race condition in the fastpath code which could allow random files
      anywhere on the same filesystem to be served by the server.


Incompatible API Changes:

    * ns_setcookie -maxage renamed -expires to match common usage throughout
      code.

    * All cookies are now set HttpOnly by default. The -scriptable option must
      be true for the client javascript engine to have access to the cookies.

    * The 'secure' flag of Ns_ConnSetCookieEx() is now a flags option which
      takes NS_COOKIE_SECURE and NS_COOKIE_SCRIPTABLE. Non-scriptable is the
      default as for the Tcl API.

    * ns_var, ns_share and the -share option to ns_set have been removed.
      Please use the nsv_* commands instead.


Configuration Changes:

    Please update your server configuration files to take account of the
    following new features and changes.

    * Randomizing the connection life-time controlling parameters
      "connsperthread" and "threadtimeout" by a new config parameter
      "spread". The spread is a number between 0 and 100, expressing
      the percentage of randomization. The randomization provides
      better resource distributions and prohibits mass thread
      extinction and recreations.

    * New config parameters "keepalivemaxuploadsize" and
      "keepalivemaxdownloadsize" for controlling persistent
      connections with largish content. Use separate request instead
      of waiting until the large content transfer has finished.

    * Fastpath static page configuration is now a global setting rather than
      per-server:

      ns_section "ns/fastpath"
      ns_param mmap          false    ;# Use mmap(2) to read files from disk.
      ns_param cache         false    ;# Cache file contents in memory.
      ns_param cachemaxsize  10240000 ;# Size of file cache, if enabled.
      ns_param cachemaxentry 8192     ;# Don't cache files larger than this.

    * Global thread stacksize configuration deprecated. Server now uses OS
      default. Only explicitly set the stacksize to some smaller than default
      value if you need to save memory because your server has a lot of
      threads, and you know for certain this won't cause problems with deeply
      nested Tcl or ADP scripts.

      ns_section "ns/parameters"      ;# or "ns/threads"
      ns_param stacksize     100000   ;# DON'T DO THIS.

    * The dnscachemaxentries config param has been renamed dnscachemaxsize to
      more accurately reflect what the setting does. A new setting
      dnswaittimeout has been added:

      ns_section "ns/parameters"
      ns_param dnscache        true   ;# Enable the DNS query cache.
      ns_param dnscachemaxsize 512000 ;# Max memory for cache.
      ns_param dnscachetimeout 60     ;# Minutes to cache a DNS query.
      ns_param dnstimeout      5      ;# Seconds to wait for query answer.

    * The buffer size used by the writer thread is now configurable:

      ns_section "ns/server/server1/module/nssock"
      ns_param writerbufsize   8192   ;# Read from file in bufsize chunks.

    * The Tcl lazy loader may be enabled with the following parameter:

      ns_section "ns/server/server1/tcl"
      ns_param lazyloader      false  ;# Define procs in thread-interps on
      demand.

    * New sections for server limits:

      ns_section "ns/limits"
      ns_param default         "Default Limits" ;# Defines a limit.

      ns_section "ns/limit/default"
      ns_param maxrun          100       ;# Conn threads running for limit.
      ns_param maxwait         100       ;# Conn threads waiting for limit.
      ns_param maxupload       102400000 ;# Max size of file upload in bytes.
      ns_param timeout         60        ;# Total seconds to wait for resources.

      ns_section "ns/server/server1/limits"
      ns_param default         "GET  /*" ;# Map default limit to URL.
      ns_param default         "POST /*"
      ns_param default         "HEAD /*"


Code Changes:

   * Fixed test to use preferred getaddrinfo()/getnameinfo() for macOS instead of gethostbyaddr()/gethostbyname() when working
     under the OS release.

   * Make compilation clean under clang.

   * Provide names for Ns_Mutex to report meaningful output in
     naviserver statistics.

   * Use poll() as well under Darwin. Per default, poll() returns
     writable even when the socket is not. However, setting
     SO_SNDLOWAT fixes this (added by this patch). The change makes it
     possible to quer POLLHUP for all platforms.

   * Use "long" instead of "int" for statistics to avoid quick overruns.

   * Added private version of NsBsearch and re-define the "bsearch" to
     point to it for Windows builds. The Windows implementation of
     bsearch appears to be buggy.

    * Rewritten cancellation logic. Cancelled jobs stay in the queue
      and get run on the thread as any other jobs. The difference is
      only that we mark the cancellation state early (even before
      running the script) so the very first Tcl command in the script
      will be cancelled thus resulting in whole job cancellation. This
      fixes some weird races.

   * Nsv shared variables now have a C API.

   * Experimental event driven IO API, Ns_Event*().

   * New Ns_RegisterAtShutdown() proc handles notification of shutdown and
     wait for completion with timeout.

   * Make Ns_RegisterProxy() public, add ns_register_proxy command.

   * Vectored IO support:

       Ns_ConnSend() now sends all given buffers. Used to send 16 and silently
       discard the rest.

       Increase max iov buffs sent at once.

       Expose iov functionality to higher layers with Ns_ConnWriteVChars(),
       which handles character data, and Ns_ConnWriteV(), which manages data
       streaming.

       ns_write now takes a vector of buffers.

   * New driver callback API. This affects modules such as nssock and any SSL
     modules. This provides more flexibility to write unusual protocol modules.
     Also added is the ability to provide platform-specific sendfile() support.

   * Each loaded driver module now runs in it's own thread (port from
     AOLserver 4.5).

   * Use *DStingSetLength() rather than *DStringTrunc() throughout code to try
     and prevent excess malloc/free activity.

   * Conn structure now contains stat with the file currently being served, stat is
     called at the beginning of the request

   The following routines have been removed, deprecated or disabled.

   * Removed: Ns_RegisterServerShutdown(), Ns_RegisterAtServerShutdown(),
     Ns_RegisterShutdown().
     See: Ns_RegisterAtShutdown().
   * Disabled: Ns_LogSetLogFlushProc(), Ns_SetNsLogProc().
     See: Ns_AddLogfilter(), Ns_RemoveLofFilter().


   IMPORTANT API changes: (length, nsend) parameters are now Tcl_WideInt, so it requires
   to recompile all modules that use those functions:

        int Ns_ConnSendChannel(Ns_Conn *conn, Tcl_Channel chan, Tcl_WideInt nsend)
        int Ns_ConnSendFp(Ns_Conn *conn, FILE *fp, Tcl_WideInt nsend)
        int Ns_ConnSendFd(Ns_Conn *conn, int fd, Tcl_WideInt nsend)

        void Ns_ConnSetRequiredHeaders(Ns_Conn *conn, CONST char *type, Tcl_WideInt length)
        void Ns_ConnSetLengthHeader(Ns_Conn *conn, Tcl_WideInt length)
        int Ns_ConnReturnOpenChannel(Ns_Conn *conn, int status, CONST char *type,
                         Tcl_Channel chan, Tcl_WideInt length)
        int Ns_ConnReturnOpenFile(Ns_Conn *conn, int status, CONST char *type,
                                  FILE *fp, Tcl_WideInt length)
        int Ns_ConnReturnOpenFd(Ns_Conn *conn, int status, CONST char *type,
                                int fd, Tcl_WideInt length)


======================================
NaviServer 4.99.1, released 2006-01-02
======================================

This is just a part of numerous additions, improvements and
fixes since 4.99.0 release. For the complete set, please consult
the ChangeLog file.

New Features:

    * HTTP Range requests for streaming media and resuming downloads
    * Full Chunked encoding support for Fastpath, Adp and Tcl scripts
    * Using temporary files for large uploads when content exceeds
      pre-configured maxsize parameter
    * New spooler thread for handling large file uploads
    * New [ns_upload_stats] command to gather upload statistics
    * New spooler thread for handling large file uploads
    * Added ns_conn responseversion to manually set response protocol
      and version to have full control about returned HTTP format
    * Add C-level support for TclVFS (all IO on files done with Tcl wrappers)
    * Add new command [ns_atprestartup].
    * Add new command [ns_runonce] which ensures that the given script is
      run only once, either globally or per virtual server, during the
      lifetime of the server process.
    * New autogen/TEA3 compatible configuration
    * Add new command [ns_logctl severity]
    * Added many new test (this is an evolving effort)
    * Added support of binder as a separate process
    * Added [ns_info started] and [ns_info shutdownpending] commands
    * Add new Tcl command [ns_register_fastpath]
    * Added Tcl interface to C-level cache routines.
    * Added first traces of documentation based on Tcl doctools
    * New simplified deployment directory structure

Code Changes:

    * New function Ns_ConnPrintfHeaders() for adding NTTP headers in
      printf style
    * Allocate interps efficiently, max 1 per-thread per-server
    * Add Ns_TclLogErrorInfo and allow admin to configure which
      connection headers to log for Tcl errors
    * Remove [ns_markfordelete] command and roll into ns_ictl as
      [ns_ictl markfordelete]
    * Make Tcl send panic messages to the server log.

======================================
NaviServer 4.99.0, released 2005-07-05
======================================

New Features:

    * Byte code for Tcl pages are cached if nscache module present
    * Add support for mass virtual hosting #1159471
    * ns_uuencode et all now do full base64 encoding
    * New introspection commands for procs, filters and traces #1161597
    * C and Tcl API for HTTP cookies #1145957
    * Add -bytes option to ns_conncptofp command
    * New command ns_conn channel #1156141
    * Add new watchdog feature to restart the server if it crashes
    * Add ns_sha1 cryptographic hash command
    * C and Tcl API for setting response code of current connection
    * ns_accesslog can change configuration at runtime
    * New C and Tcl API for parsing command options and arguments
    * Server can now run as root if instructed to
    * Add new command ns_atstartup
    * New routines for listening on UDP and UNIX domain sockets
    * Add -localhost -localport options to ns_sockopen

Bug Fixes:

    * Add locking to non multi-thread safe timegm()
    * Fix infinite loop in DNS routines
    * Call comm drivers DriverClose command when socket is released
    * Fix crash bug in nslog on NULL rollfmt
    * Fix URL decoding of '+' characters #1145277
    * Report correct MIME type for XML documents #1145927
    * Fix crash in channel detach code #1143586
    * Make ns_sendmail handle dropped connections
    * Fix crash on startup when resolving localhost
    * Preserve nsdb exception messages generated by driver

Code Changes:

    * New function Ns_ConnPrintfHeaders()
    * Use GCC compiler code checks #1215725
    * Remove GNU implementations of getopt and poll
    * Cleanup up autoconf and use autoheader
    * Clean up test harness and add lots of tests
    * New Tcl callback infrastructure #1162223
    * New convenience functions for handling Tcl object types
    * New function Ns_TclPrintfResult() for formatting Tcl results
    * No more support for defunct AOLpress
    * Remove support for old connid argument in much code #1156107
    * Modules nspd and nsext moved from core to external modules
    * Objectified TclX keyed lists
