# Emacs mode:  -*-Makefile-*-

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code and related documentation
# is America Online, Inc. Portions created by AOL are Copyright (C) 1999
# America Online, Inc. All Rights Reserved.
#
#

#
# Makefile.module --
#
#     Makefile include for NaviServer modules, libraries, and programs.  Variables to set
#     before including this file include:
#
#     NAVISERVER  naviserver install directory.
#     MODNAME     Unique name of module
#     MOD         File name of binary loadable module
#     MODOBJS     List of module object files (required with MOD)
#     TCL         List of module shared Tcl files
#     LIBNM       Root name of dynamic library (without lib prefix or extension)
#     LIBOBJS     List of library object files (required with LIBNM)
#     LIBHDRS     List of public header files to install (required with module LIBNM)
#     PGM         Name of executable program
#     PGMOBJS     List of program object files (required with PGM)
#     HDRS        Header files which objects depend on
#     MODLIBS     Extra module link libraries
#     LIBLIBS     Extra dynamic library link libraries
#     PGMLIBS     Extra program link libraries
#     INSTALL     Extra install directive(s)
#     CLEAN       Extra clean directive(s)
#     DESTDIR     Root directory for install
#
#     At least one of PGM, MOD, or LIBNM must be defined.  For backwards compatibility,
#     MODOBJS will default to OBJS and MODINST can be used for module install.
#
#     For static builds (use configure --disable-shared) the LIBNM variable is
#     replaced with ALIB which triggers the linking of the static library.
#
#     See nsd/Makefile and nsdb/Makefile for examples.
#
#     Note that we do *not* use a variables named "LIB" or "INCLUDE",
#     because they would conflict with environment variables of the same
#     name needed by the Microsoft Windows compiler and/or linker.
#

uname = $(shell uname -a)

STATIC_BUILD = @STATIC_BUILD@

ifdef NSBUILD
    ifeq ($(STATIC_BUILD), 1)
        ALIB    := $(LIBNM)
        LIBNM   :=
    endif
    include ../include/Makefile.global
else
    include $(NAVISERVER)/include/Makefile.global
endif

#
# Compare with the numerical version of NaviServer. If the version
# test holds, nothing is installed. If "Version" is not found in the
# result of "nsd -V", this indicates an older version of NaviServer
# and the installation is performed.
#
# The numerical version is computed as
#
#   NS_MAJOR_VERSION * 10000 + NS_MINOR_VERSION * 100 + NS_RELEASE_SERIAL
#
# NaviServer 5.0.0 has the numerical value of 50000.
#
ifdef INCLUDED_IN_NAVISERVER
    V = $(shell $(NAVISERVER)/bin/nsd -V | grep "Version" | cut -d ":" -f 2)
    ifeq ($(shell test $(V) -ge $(INCLUDED_IN_NAVISERVER); echo $$?),0)
        $(info This module is already included in NaviServer $(INCLUDED_IN_NAVISERVER))
	TCL=
	MOD=
	LIBNM=
	ALIB=
	PGM=
	LIBHDRS=
    endif
endif

ifdef MOD
    ifeq (.exe,$(EXEEXT))
        MOD := $(shell basename $(MOD) .so)$(LIBEXT)
    endif
    BUILD     += $(MOD)
    INSTALL   += install-mod
    CLEAN     += clean-mod
    ifeq ($(origin MODOBJS), undefined)
        MODOBJS	= $(OBJS)
    endif
    MODOBJS   += $(UNIXOBJS)
endif

ifdef TCL
    ifndef MODNAME
        $(error MODNAME not specified)
    endif
    INSTALL += install-tcl
endif

ifdef LIBNM
    LIBFILE	 = lib$(LIBNM)$(LIBEXT)
    BUILD   += $(LIBFILE)
    INSTALL += install-lib
    CLEAN   += clean-lib
    MODLIBS += $(LIBFILE)
    PGMLIBS += $(LIBFILE)
    LIBOBJS += $(UNIXOBJS)
endif

ifdef ALIB
    ALIBFILE  = lib$(ALIB).a
    BUILD    += $(ALIBFILE)
    INSTALL  += install-alib
    CLEAN    += clean-alib
    MODLIBS  += $(ALIBFILE)
    PGMLIBS  += $(ALIBFILE)
    LIBOBJS  += $(UNIXOBJS)
endif

ifdef PGM
    ifeq (.exe,$(EXEEXT))
        PGM := $(PGM)$(EXEEXT)
    endif
    BUILD   += $(PGM)
    INSTALL += install-pgm
    CLEAN   += clean-pgm
endif

ifdef LIBHDRS
    INSTALL += install-hdrs
endif

all build: $(BUILD)

install: $(INSTALL)

clean: $(CLEAN)

$(MOD): $(LIBFILE) $(ALIBFILE) $(MODOBJS)
	$(RM) $(MOD)
	$(LDSO) $(LDFLAGS) -o $(MOD) $(MODOBJS) $(MODLIBS) $(NSLIBS) @LDRPATH@

$(LIBFILE): $(LIBOBJS)
	$(RM) $(LIBFILE)
	$(LDLIB) $(LDFLAGS) -o $(LIBFILE) $(LIBOBJS) $(LIBLIBS) $(NSLIBS) @LDRPATH@

$(ALIBFILE): $(LIBOBJS)
	$(AR) rv $(ALIBFILE) $(LIBOBJS)
	$(RANLIB) $(ALIBFILE)

$(PGM): $(PGMOBJS) $(LIBFILE) $(ALIBFILE)
	$(RM) $(PGM)
	$(CC) $(LDFLAGS) -o $(PGM) $(PGMOBJS) $(PGMLIBS) $(CCLIBS) @CCRPATH@

$(MODOBJS) $(LIBOBJS) $(PGMOBJS): $(HDRS) $(INCDIR)/ns.h $(INCDIR)/nsthread.h

install-mod: $(MOD) $(MODINST)
	$(INSTALL_SH) $(MOD) $(DESTDIR)$(INSTBIN)/

install-tcl: $(TCL)
	@$(MKDIR) $(DESTDIR)$(INSTTCL)/$(MODNAME)
	for t in $(TCL); do \
		$(INSTALL_DATA) $$t $(DESTDIR)$(INSTTCL)/$(MODNAME)/; \
	done

install-lib: $(LIBFILE)
    ifeq (.exe,$(EXEEXT))
		$(INSTALL_SH) $(LIBFILE) $(DESTDIR)$(INSTBIN)/
    else
        $(INSTALL_SH) $(LIBFILE) $(DESTDIR)$(INSTLIB)/
    endif

install-alib: $(ALIBFILE)
	$(INSTALL_SH) $(ALIBFILE) $(DESTDIR)$(INSTLIB)/
	$(RANLIB) $(ALIBFILE)

install-pgm: $(PGM)
	$(INSTALL_SH) $(PGM) $(DESTDIR)$(INSTBIN)/

install-hdrs: $(LIBHDRS)
	for h in $(LIBHDRS); do \
		$(INSTALL_DATA) $$h $(DESTDIR)$(INSTHDR)/; \
	done

clean-mod:
	$(RM) $(MOD) $(MODOBJS)

clean-lib:
	$(RM) $(LIBFILE) $(LIBOBJS)

clean-alib:
	$(RM) $(ALIBFILE) $(LIBOBJS)

clean-pgm:
	$(RM) $(PGM) $(PGMOBJS)

cppcheck:
	cppcheck --verbose --force --enable=all $(CFLAGS_INCLUDE) *.c

.PHONY: clean-mod clean-lib clean-alib clean-pgm
