# Emacs mode:  -*-Makefile-*-

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code and related documentation
# is America Online, Inc. Portions created by AOL are Copyright (C) 1999
# America Online, Inc. All Rights Reserved.
#
#

#
# Makefile.global.in --
#
#     Common and platform-specific make variables to be included
#     by other makefiles.
#

NAVISERVER       = @NAVISERVER@
srcdir           = @SRCDIR@

CPPCHECK         = cppcheck

NS_PATCH_LEVEL   = @NS_PATCH_LEVEL@

@SET_MAKE@
RM               = /bin/rm -Rf
MKDIR            = /bin/mkdir -p
CP               = /bin/cp -pR

ifdef NSBUILD
    INSTALL_SH	 = $(srcdir)/install-sh -c
else
    INSTALL_SH	 = $(INSTBIN)/install-sh -c
endif
INSTALL_DATA	 = $(INSTALL_SH) -m 644

RANLIB           = @RANLIB@
LIBEXT           = @SHLIB_SUFFIX@
TCL_EXEC_PREFIX  = @TCL_EXEC_PREFIX@
LIB_RUNTIME_DIR  =
LDLIB            = @LDLIB@
LDSO             = @LDSO@
CCRFLAG          = @CCRFLAG@
LDRFLAG          = @LDRFLAG@
CCRPATH         += @CCRPATH@
LDRPATH         += @LDRPATH@
CC               = $(PURIFY) @CC@
CCLD             = @CCLD@
CFLAGS_DEBUG     = @CFLAGS_DEBUG@
CFLAGS_OPTIMIZE  = @CFLAGS_OPTIMIZE@
CFLAGS_WARNING   = @CFLAGS_WARNING@
CFLAGS_INCLUDE   = -I$(INCDIR) @TCL_INCLUDES@
#CFLAGS_EXTRA     = @SHLIB_CFLAGS@ @TCL_EXTRA_CFLAGS@ -DNDEBUG -DSYSTEM_MALLOC -DTCL_NO_DEPRECATED -std=c99
#CFLAGS_EXTRA     = @SHLIB_CFLAGS@ @TCL_EXTRA_CFLAGS@ -DSYSTEM_MALLOC -DNS_SET_DSTRING -std=c99
#CFLAGS_EXTRA     = @SHLIB_CFLAGS@ @TCL_EXTRA_CFLAGS@ -DSYSTEM_MALLOC -DNS_NO_DEPRECATED -std=c99
CFLAGS_EXTRA     = @SHLIB_CFLAGS@ @TCL_EXTRA_CFLAGS@ -DNDEBUG -DSYSTEM_MALLOC -std=c99
DEFS             = @DEFS@
# When compiling with sanitize: export ASAN_OPTIONS=halt_on_error=false:exitcode=0:print_stats=1:atexit=1
#SANITIZE          = -fsanitize=address -fsanitize-recover=address
#SANITIZE          =
CFLAGS_CONVERSION = -Wconversion -Wsign-conversion -Wsign-compare
CFLAGS_DEFINITION = -Wwrite-strings -Wdeclaration-after-statement -Wendif-labels -Wshadow -Wmissing-prototypes -Wstrict-prototypes
CFLAGS_TIDY       = -Wno-missing-braces -Wundef -Wunreachable-code -Wswitch-enum -Wpointer-arith -Wold-style-definition -Wmissing-format-attribute -Wformat-security
#CFLAGS_FORTIFY    = -D_FORTIFY_SOURCE=2 -fstack-protector $(SANITIZE)
CFLAGS_FORTIFY    = -fstack-protector $(SANITIZE) -fwrapv -ftrapv
#CFLAGS_DEFAULT    = @CFLAGS_DEFAULT@
#CFLAGS_DEFAULT   = -pedantic -g -Wextra
#CFLAGS_DEFAULT   = -pedantic -g -Wextra $(CFLAGS_CONVERSION) $(CFLAGS_DEFINITION) $(CFLAGS_TIDY) $(CFLAGS_FORTIFY)
#CFLAGS_DEFAULT   = -pedantic -g -O3 -Wextra -std=c99 -DTCL_NO_DEPRECATED $(CFLAGS_CONVERSION) $(CFLAGS_DEFINITION) $(CFLAGS_TIDY)  -fipa-pure-const -Wsuggest-attribute=pure  -Wsuggest-attribute=const -Wstringop-truncation  -Wattribute-alias
CFLAGS          += $(CFLAGS_DEFAULT) $(CFLAGS_OPTIMIZE) $(CFLAGS_WARNING) $(CFLAGS_EXTRA) $(CFLAGS_INCLUDE) $(PTHREAD_CFLAGS) @CPPFLAGS@ $(DEFS)
LDFLAGS         += $(CFLAGS_OPTIMIZE) $(SANITIZE)
LIBS		 = @LIBS@
DL_LIBS		 = 
MATH_LIBS	 = @MATH_LIBS@
OPENSSL_LIBS     = @OPENSSL_LIBS@

# The Windows and Unix build systems treat $(LIBNM) differently, so we
# arrange things so that the final output of library names is the same
# on both platforms.  For nsd on Windows, we must use LIBNM = libnsd.
# (See also the comments in nsd/Makefile.)  Unix must instead use
# LIBNM = nsd here, and the lib prefix gets added elsewhere.  Since
# this file is Unix-only, we need this simple fix-up:

ifeq (libnsd,$(LIBNM))
  LIBNM := nsd
endif

ifndef NSBUILD
    LDFLAGS += -L$(NAVISERVER)/lib
    NSLIBS  += -lnsthread -lnsd
    INCDIR   = $(NAVISERVER)/include
    CFLAGS  += @ZLIB_INCLUDES@ @OPENSSL_INCLUDES@
else
    LDFLAGS += -L../nsthread -L../nsd -L../nsdb
    INCDIR   = ../include
    CFLAGS  += @OPENSSL_INCLUDES@
	ifeq (nsd,$(LIBNM))
		CFLAGS += @ZLIB_INCLUDES@
		NSLIBS += @ZLIB_LIBS@ @CRYPT_LIBS@
	endif
    ifneq (nsthread,$(LIBNM))
        NSLIBS += -lnsthread
        ifneq (nsd,$(LIBNM))
            ifneq (nsthreadtest,$(PGM))
                ifeq (nsdbtest,$(MODNAME))
                    NSLIBS += -lnsd -lnsdb
                else
                    NSLIBS += -lnsd
                endif
            endif
        endif
    endif
endif

#
# Add the OpenSSL libraries to the end to minimize interference of
# load paths for other libraries
#
NSLIBS      += @TCL_LIB_SPEC@ @TCL_LIBS@ @LDFLAGS@ ${OPENSSL_LIBS} ${PTHREAD_LIBS}
CCLIBS       = $(NSLIBS)

# Install directories
INSTBIN      = $(NAVISERVER)/bin
INSTLIB      = $(NAVISERVER)/lib
INSTHDR      = $(NAVISERVER)/include
INSTMOD      = $(NAVISERVER)/modules
INSTTCL      = $(NAVISERVER)/tcl
INSTSRV      = $(NAVISERVER)/
INSTSRVMOD   = $(INSTSRV)/modules
INSTSRVPAG   = $(INSTSRV)/pages

# Platform-specific options.
uname = $(shell uname -a)

#
# Solaris, OpenSolaris
#
ifneq (,$(findstring SunOS,$(uname)))

    # Solaris 2.6+
    ifneq (,$(findstring 5.6,$(uname)))
        NSLIBS += -lthread -lposix4
    else
        NSLIBS += -lrt
    endif

    # OpenSolaris (e.g. OmniOS)
    ifneq (,$(findstring 5.11,$(uname)))
        NSLIBS += -lsendfile
    endif
endif

#
# For static linking on Darwin, link modules
# against server image.
#

ifneq (,$(findstring Darwin,$(uname)))
    ifeq ($(STATIC_BUILD), 1)
        ifdef NSBUILD
            LDSO += -bundle_loader $(srcdir)/nsd/nsd
        else
            LDSO += -bundle_loader $(NAVISERVER)/bin/nsd
        endif
    endif
endif

#
# FreeBSD (at least 12) needs the POSIX thread library
#
ifneq (,$(findstring FreeBSD,$(uname)))
    NSLIBS += -lthr
endif

#
# OpenBSD needs the POSIX thread library
#
ifneq (,$(findstring OpenBSD,$(uname)))
    NSLIBS += -lpthread
endif
