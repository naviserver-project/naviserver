# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*
if {$::tcl_version < 8.6} {package require try}

test ns_nsv-1.1 {basic syntax nsv_set} -body {
    nsv_set
} -returnCodes error -result {wrong # args: should be "nsv_set ?-default? ?-reset? ?--? array key ?value?"}

test ns_nsv-1.2 {basic syntax nsv_get} -body {
    nsv_get
} -returnCodes error -result {wrong # args: should be "nsv_get array key ?varName?"}

test ns_nsv-1.3 {basic syntax nsv_exists} -body {
    nsv_exists
} -returnCodes error -result {wrong # args: should be "nsv_exists array key"}

test ns_nsv-1.4 {basic syntax nsv_append} -body {
    nsv_append
} -returnCodes error -result {wrong # args: should be "nsv_append array key value ?value ...?"}

test ns_nsv-1.5 {basic syntax nsv_lappend} -body {
    nsv_lappend
} -returnCodes error -result {wrong # args: should be "nsv_lappend array key value ?value ...?"}

test ns_nsv-1.6 {basic syntax nsv_incr} -body {
    nsv_incr
} -returnCodes error -result {wrong # args: should be "nsv_incr array key ?increment?"}

test ns_nsv-1.7 {basic syntax nsv_unset} -body {
    nsv_unset
} -returnCodes error -result {wrong # args: should be "nsv_unset ?-nocomplain? ?--? array ?key?"}

test ns_nsv-1.8 {basic syntax nsv_array} -body {
    nsv_array
} -returnCodes error -result {wrong # args: should be "nsv_array option ..."}

test ns_nsv-1.9 {basic syntax nsv_array} -body {
    nsv_array ?
} -returnCodes error -result {bad option "?": must be set, reset, get, names, size, or exists}

test ns_nsv-1.10 {basic syntax nsv_names} -body {
    nsv_names zirrZarr
} -result ""



test ns_nsv-2.1 {nsv_set a key} -body {
    nsv_set a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.2 {nsv_set same key} -body {
    nsv_set a k v1
    nsv_set a k v2
} -cleanup {
    nsv_unset -nocomplain a
} -result v2

test ns_nsv-2.3 {nsv_set an "integer" key} -body {
    nsv_set a 1 v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.4 {nsv_set key with spaces} -body {
    nsv_set a "and now to something different" v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.5 {nsv_set big value} -body {
    # 1MB
    nsv_set a k [string repeat "x" [expr {1024*1024}]]
} -cleanup {
    nsv_unset -nocomplain a
} -result [string repeat "x" [expr {1024*1024}]]


test ns_nsv-2.6 {"nsv_set -reset" pre-existing value} -body {
    nsv_set a k 123                ;# create the array with a value
    set r [nsv_set -reset a k 456] ;# reset a(k) to value 456
    list $r [nsv_exists a k]       ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {123 1}

test ns_nsv-2.7 {"nsv_set -reset" no pre-existing value} -body {
    set r [nsv_set -reset a k 123 ] ;# create the array with a value but reset it
    list $r [nsv_exists a k]        ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {{} 1}

test ns_nsv-2.9 {"nsv_set -reset" pre-existing value, no new value} -body {
    nsv_set a k 123             ;# create the array with a value
    set r [nsv_set -reset a k]  ;# reset a(k) and unset a(k)
    list $r [nsv_exists a k]    ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {123 0}

test ns_nsv-2.10 {"nsv_set -reset" no pre-existing value} -body {
    nsv_set a k0 a              ;# create the array with a value
    set r [nsv_set -reset a k]  ;# reset a(k) and unset a(k)
    list $r [nsv_exists a k]    ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {{} 0}

test ns_nsv-2.11.0 {"nsv_set -default" no pre-existing value} -body {
    set r [nsv_set -default a k 456]  ;# set default for a(k) if it does not exist
    list $r [nsv_exists a k]          ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {456 1}

test ns_nsv-2.11.1 {"nsv_set -default" with pre-existing value} -body {
    nsv_set a k 123                   ;# set a(k)
    set r [nsv_set -default a k 456]  ;# set default if not exists for a(k)
    list $r [nsv_exists a k]          ;# check if a(k) exists
} -cleanup {
    nsv_unset -nocomplain a
} -result {123 1}

test ns_nsv-2.11.2 {"nsv_set -default" check full live-cylce} -body {
    set key k0
    set r0 [nsv_exists a $key]
    set r1 [nsv_set -default a $key ""] ;# set empty value for a(k) when it does does not exist
    set r2 [nsv_exists a $key]
    set r3 [nsv_get a $key]
    set r4 [nsv_set a $key 2]
    set r5 [nsv_get a $key]
    set r6 [nsv_set -default a $key ""]
    set r7 [nsv_get a $key]
    list $r0 $r1 $r2 $r3 r4=$r4 r5=$r5 r6=$r6 $r7
} -cleanup {
    nsv_unset -nocomplain a
} -result {0 {} 1 {} r4=2 r5=2 r6=2 2}



test ns_nsv_2.13 {"nsv_set a b" no key nor array} -body {
    catch {nsv_set a b} _errMsg
    set _errMsg
} -match exact -result {no such array: a}

test ns_nsv_2.14 {"nsv_set a b" array present but no key} -body {
    nsv_set a foo bar
    catch {nsv_set a b} _errMsg
    set _errMsg
} -cleanup {
    nsv_unset -nocomplain a
} -match exact -result {no such key: b}

test ns_nsv-3.1 {nsv_unset too many args} -body {
    nsv_unset a k v x
} -returnCodes error -result {wrong # args: should be "nsv_unset ?-nocomplain? ?--? array ?key?"}

test ns_nsv-3.2 {nsv_unset key} -setup {
    nsv_set a k v
} -body {
    nsv_unset a k
    nsv_exists a k
} -result 0

test ns_nsv-3.3 {nsv_unset an "integer" key} -setup {
    nsv_set a 1 v
} -body {
    nsv_unset a 1
    nsv_exists a 1
} -result 0

test ns_nsv-3.4 {nsv_unset key with spaces} -setup {
    nsv_set a "and now to something different" v
} -body {
    nsv_unset a "and now to something different"
    nsv_exists a "and now to something different"
} -result 0

test ns_nsv-3.5 {nsv_unset array} -setup {
    nsv_set a k1 v1
    nsv_set a k2 v2
    nsv_set a k3 v3
} -body {
    nsv_unset a
    list [nsv_exists a k1] [nsv_exists a k2] [nsv_exists a k3] [nsv_array exists a]
} -result {0 0 0 0}

test ns_nsv-3.6 {nsv_unset non-existing array} -body {
    nsv_unset non_existing_array
} -returnCodes error -result {no such array: non_existing_array}

test ns_nsv-3.7 {nsv_unset non-existing array without complaint} -body {
    nsv_unset -nocomplain non_existing_array
} -result {}

test ns_nsv-3.8 {nsv_unset non-existing key} -setup {
    nsv_set a k v
} -body {
    nsv_unset a missing_key
} -cleanup {
    nsv_unset -nocomplain a
} -returnCodes error -result {no such key: missing_key}

test ns_nsv-3.9 {nsv_unset non-existing key without complaint} -setup {
    nsv_set a k v
} -body {
    nsv_unset -nocomplain a k
} -cleanup {
    nsv_unset a
} -result {}



test ns_nsv-4.1 {nsv_array set} -body {
    nsv_array set a {k1 v1 k2 v2}
    list [nsv_exists a k1] [nsv_exists a k2]
} -cleanup {
    nsv_unset -nocomplain a
} -result {1 1}

test ns_nsv-4.3 {nsv_array names} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    lsort [nsv_array names a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 k2}

test ns_nsv-4.4 {nsv_array names glob} -setup {
    nsv_array set a {k1 v1 K2 V2}
} -body {
    nsv_array names a k*
} -cleanup {
    nsv_unset -nocomplain a
} -result k1

test ns_nsv-4.5 {nsv_array get} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    lsort [nsv_array get a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 k2 v1 v2}

test ns_nsv-4.6 {nsv_array get glob} -setup {
    nsv_array set a {k1 v1 K2 V2}
} -body {
    lsort [nsv_array get a k*]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 v1}

test ns_nsv-4.7 {nsv_array size} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    nsv_array size a
} -cleanup {
    nsv_unset -nocomplain a
} -result 2

test ns_nsv-4.8 {nsv_array names reset} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    nsv_array reset a {k3 v3 k4 v4}
    lsort [nsv_array get a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k3 k4 v3 v4}

test ns_nsv-4.9 {nsv_array exists} -setup {
    nsv_set a k v
} -body {
    nsv_array exists a
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-4.10 {nsv_array exists} -body {
    nsv_array exists noexists
} -result 0



test ns_nsv-5.1 {nsv_get nonexisting key from nonexisting array} -body {
    nsv_get noexist noexist
} -returnCodes error -result {no such array: noexist}

test ns_nsv-5.2.1 {nsv_get nonexisting key} -setup {
    nsv_set a k1 v1
} -body {
    nsv_get a k2
} -cleanup {
    nsv_unset -nocomplain a
} -returnCodes error -result {no such key: k2}

test ns_nsv-5.2.2 {nsv_get nonexisting key} -setup {
    nsv_set a k1 v1
} -body {
    nsv_get a k2 var
} -cleanup {
    nsv_unset -nocomplain a
} -result 0

test ns_nsv-5.2.3 {nsv_get nonexisting key} -setup {
    nsv_set a k1 v1
} -body {
    unset -nocomplain var
    nsv_get a k2 var
    info exists var
} -cleanup {
    nsv_unset -nocomplain a
} -result 0

test ns_nsv-5.3.1 {nsv_get existing key} -body {
    nsv_set a k v
    nsv_get a k
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-5.3.2 {nsv_get existing key} -body {
    nsv_set a k v
    nsv_get a k var
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-5.3.3 {nsv_get existing key} -body {
    nsv_set a k 100
    nsv_get a k var
    set var
} -cleanup {
    nsv_unset -nocomplain a
} -result 100


test ns_nsv-6.1 {nsv_exists nonexisting key} -body {
    nsv_set a k1 v1
    nsv_exists a k2
} -cleanup {
    nsv_unset -nocomplain a
} -result 0

test ns_nsv-6.2 {nsv_exists existing key} -body {
    nsv_set a k v
    nsv_exists a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-6.3 {nsv_exists nonexisting array} -body {
    nsv_exists noexist k
} -result 0



test ns_nsv-7.1 {nsv_append} -body {
    nsv_append a k v
    nsv_append a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result vv



test ns_nsv-8.1 {nsv_lappend} -body {
    nsv_lappend a k v
    nsv_lappend a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result {v v}

test ns_nsv-8.3 {nsv_lappend number of elements} -body {
    nsv_lappend a k [list v1 v1]
    nsv_lappend a k [list v2 v2]
    llength [nsv_get a k]
} -cleanup {
    nsv_unset -nocomplain a
} -result 2



test ns_nsv-9.1 {nsv_incr without count} -body {
    nsv_incr a k
    nsv_incr a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 2

test ns_nsv-9.2 {nsv_incr with positive count} -body {
    nsv_incr a k +10
    nsv_incr a k +20
} -cleanup {
    nsv_unset -nocomplain a
} -result 30

test ns_nsv-9.3 {nsv_incr with negative count} -body {
    nsv_incr a k -10
    nsv_incr a k -20
} -cleanup {
    nsv_unset -nocomplain a
} -result -30

test ns_nsv-9.4 {nsv_incr with unrepresentable count} -body {
    nsv_incr a k +1000000000000
} -returnCodes error -match glob -result {integer value too large to represent*}

test ns_nsv-9.5 {nsv_incr from negative to positive} -body {
    nsv_set a k -1
    nsv_incr a k
    nsv_incr a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-9.6 {nsv_incr type mismatch} -body {
    nsv_incr a k v
} -returnCodes error -result {expected integer but got "v"}

test ns_nsv-9.7 {nsv_incr by zero} -body {
    nsv_incr a k +0
    nsv_incr a k +00
} -cleanup {
    nsv_unset -nocomplain a
} -result 0



test nsv-names.1 {nsv_names} -body {
    nsv_set nsv-a1 k v
    nsv_set nsv-a2 k v
    lsort [nsv_names nsv-a*]
} -result {nsv-a1 nsv-a2}

#
# nsv_dict set
#
test nsv-dict-set.0 {nsv_dict set - syntax test} -body {
    nsv_dict set a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict set array key dictkey args"}

test nsv-dict-set.1 {nsv_dict set new} -body {
    # Create an array, a key and a dict entry in one command
    nsv_dict set a4711 k1 x 1
} -cleanup {
    nsv_unset -nocomplain a4711
} -result {x 1}

test nsv-dict-set.2 {nsv_dict set} -body {
    # set key k1 as usual
    nsv_set a1 k1 {x 1}
    # add a dict value for k1
    nsv_dict set a1 k1 y 1
    # overwrite a dict value for k1
    nsv_dict set a1 k1 x 2
    # set a new key with a dict value
    nsv_dict set a1 k2 a b
    nsv_array get a1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {k1 {x 2 y 1} k2 {a b}}

test nsv-dict-set.2 {nsv_dict set with nested dictionary} -body {
    if {0} {
        set d {}
        dict set d l1 l2 v1
        dict set d l1 l2 v2
        dict set d l1 l3 v3
        dict set d x v4
        # l1 {l2 v2 l3 v3} x v4
    }
    nsv_dict set a1 k1 l1 l2 v1
    nsv_dict set a1 k1 l1 l2 v2
    nsv_dict set a1 k1 l1 l3 v3
    nsv_dict set a1 k1 x v4
    nsv_array get a1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {k1 {l1 {l2 v2 l3 v3} x v4}}



#
# nsv_dict get
#
test nsv-dict-get.0 {nsv_dict get - syntax test} -body {
    nsv_dict get a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict get ?-varname varname? ?--? array key ?dictkeys?"}

test nsv-dict-get.1 {nsv_dict get} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    try {
        nsv_dict get a1 k1 z
    } trap {TCL LOOKUP DICT} {r errorDict} {
    } on error {errorMsg r} {
    } on ok {r} {
    }
    list [nsv_dict get a1 k1 x] [nsv_dict get a1 k1 y] $r [nsv_dict get a1 k1]
} -cleanup {
    unset -nocomplain r
    nsv_unset -nocomplain a1
} -result {1 2 {key "z" not known in dictionary} {x 1 y 2}}

test nsv-dict-get.2 {nsv_dict get with nested dicts} -body {
    nsv_dict set a1 k1 l1 l2 v1
    try {
        nsv_dict get a1 k1 l1 l2 l3
    } trap {TCL VALUE DICTIONARY} {r errorDict} {
    } on error {errorMsg r} {
    } on ok {r} {
    }
    list [nsv_dict get a1 k1] [nsv_dict get a1 k1 l1] [nsv_dict get a1 k1 l1 l2] $r
} -cleanup {
    unset -nocomplain r
    nsv_unset -nocomplain a1
} -result {{l1 {l2 v1}} {l2 v1} v1 {missing value to go with key}}

test nsv-dict-get.3 {nsv_dict get with existing array and key and output variable} -body {
    nsv_dict set a1 k1 key value
    set _ [nsv_dict get -varname result a1 k1 key]
    list $_ $result
} -cleanup {
    unset -nocomplain _ result
    nsv_unset -nocomplain a1
} -result {1 value}

test nsv-dict-get.4 {nsv_dict get with existing array and non-existing key and output variable} -body {
    nsv_dict set a1 k1 l1 l2 v1
    set _ [nsv_dict get -varname result a1 k1 x]
    list $_ [info exists result]
} -cleanup {
    unset -nocomplain _ result
    nsv_unset -nocomplain a1
} -result {0 0}


#
# nsv_dict getdef
#
test nsv-dict-getdef.0.1 {nsv_dict getdef - syntax test no key} -body {
    nsv_dict getdef a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict getdef ?-varname varname? ?--? array key args"}

test nsv-dict-getdef.0.2 {nsv_dict getdef - syntax test, key, no dict key, not default} -body {
    nsv_dict getdef a1 k1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict getdef ?-varname varname? ?--? array key args"}

test nsv-dict-getdef.0.3 {nsv_dict getdef - syntax test, key, no dict key} -body {
    nsv_dict getdef a1 k1 default1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: "nsv_dict getdef" requires a key and a default}

test nsv-dict-getdef.1 {nsv_dict getdef} -body {
    nsv_dict set a1 k1 x 1
    list [nsv_dict getdef a1 k1 x defx] [nsv_dict getdef a1 k1 y defy]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {1 defy}

test nsv-dict-getdef.2 {nsv_dict getwithdefault} -body {
    nsv_dict set a1 k1 x 1
    list [nsv_dict getwithdefault a1 k1 x defx] [nsv_dict getwithdefault a1 k1 y defy]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {1 defy}

test nsv-dict-getdef.3 {nsv_dict getdef with nested dicts} -body {
    nsv_dict set a1 k1 l1 l2 v1
    nsv_dict set a1 k1 x2 v2
    try {
        # one level deeper than we have
        nsv_dict getdef a1 k1 l1 l2 l3 d3
    } trap {TCL VALUE DICTIONARY} {r1 errorDict} {
    } on error {errorMsg r1} {
    } on ok {r1} {
    }
    try {
        # non-existing path in the middle
        nsv_dict getdef a1 k12 l1 a b c d6
    } trap {TCL LOOKUP NSV} {r2 errorDict} {
    } on error {errorMsg r2} {
    } on ok {r2} {
    }
    list \
        [nsv_dict getdef a1 k1 l1 d1] \
        [nsv_dict getdef a1 k1 l1 l2 d2] \
        [nsv_dict getdef a1 k1 l1 l3 d3] \
        [nsv_dict getdef a1 k1 l4 d4] \
        [nsv_dict getdef a1 k1 a b c d5] \
        [nsv_dict getdef a1 k1 l1 a b c d6] \
        $r1 $r2
} -cleanup {
    unset -nocomplain r1 r2
    nsv_unset -nocomplain a1
} -result {{l2 v1} v1 d3 d4 d5 d6 {missing value to go with key} d6}

test nsv-dict-getdef.4 {nsv_dict getdef with existing array and key and output variable} -body {
    nsv_dict set a1 k1 key value
    set r1 [nsv_dict getdef -varname result1 a1 k1 key default]
    set r2 [nsv_dict getdef -varname result2 a1 k1 someotherkey default]
    list $r1 $result1 $r2 $result2
} -cleanup {
    unset -nocomplain r1 r2 result1 result2
    nsv_unset -nocomplain a1
} -result {1 value 0 default}


#
# nsv_dict exists
#
test nsv-dict-exists.0 {nsv_dict exists - syntax test} -body {
    nsv_dict exists a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict exists array key dictkeys"}
test nsv-dict-exists.1 {nsv_dict exists - syntax test, nos such nsv key} -body {
    nsv_dict exists a1 k1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict exists array key dictkeys"}

test nsv-dict-exists.1 {nsv_dict exists} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    list [nsv_dict exists a1 k1 x] [nsv_dict exists a1 k1 y] [nsv_dict exists a1 k1 z]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {1 1 0}

test nsv-dict-exists.2 {nsv_dict exists with nested dicts} -body {
    nsv_dict set a1 k1 l1 l2 v1
    list \
        [nsv_dict exists a1 k1 l1] \
        [nsv_dict exists a1 k1 l1 l2] \
        [nsv_dict exists a1 k1 l1 l3] \
        [nsv_dict exists a1 k1 l1 l3 l4] \
        [nsv_dict exists a1 k1 l3]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {1 1 0 0 0}

test nsv-dict-exists.3 {nsv_dict exists with noexisting array and key/value} -body {
    nsv_dict set a1 k1 l1 l2 v1
    list \
        [nsv_dict exists AAA k1 l1] \
        [nsv_dict exists a1 key value]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {0 0}


#
# nsv_dict unset
#
test nsv-dict-unset.0 {nsv_dict unset - syntax test} -body {
    nsv_dict unset a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict unset array key dictkeys"}

test nsv-dict-unset.1 {nsv_dict unset - syntax test} -body {
    nsv_dict unset a1 k1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict unset array key dictkeys"}

test nsv-dict-unset.1 {nsv_dict unset} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict unset a1 k1 x
    nsv_get a1 k1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {y 2}

test nsv-dict-unset.2 {nsv_dict unset non existing value} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict unset a1 k1 z
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x 1 y 2}

test nsv-dict-unset.3 {nsv_dict unset with nested dicts} -body {
    nsv_dict set a1 k1 l1 l2a v1
    nsv_dict set a1 k1 l1 l2b v2
    set _ ""
    lappend _ [nsv_dict unset a1 k1 l1 l2a]
    lappend _ [nsv_get a1 k1]

    nsv_dict set a1 k1 l1 l2a v1
    nsv_dict set a1 k1 l1 l2b v2
    lappend _ [nsv_dict unset a1 k1 l1 l2c]
    lappend _ [nsv_get a1 k1]

    set _
} -cleanup {
    unset -nocomplain _
    nsv_unset -nocomplain a1
} -result {{l1 {l2b v2}} {l1 {l2b v2}} {l1 {l2b v2 l2a v1}} {l1 {l2b v2 l2a v1}}}

#
# nsv_dict incr
#
test nsv-dict-incr.0 {nsv_dict incr - syntax test} -body {
    nsv_dict incr a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict incr array key dictkey ?increment?"}

test nsv-dict-incr.1 {nsv_dict incr create new entry} -body {
    # add dict values for k1
    nsv_dict incr a1 k1 x
    nsv_dict incr a1 k1 y 2
    nsv_dict incr a1 k2 z 5
    nsv_array get a1
} -cleanup {
    nsv_incr -nocomplain a1
} -result {k1 {x 1 y 2} k2 {z 5}}

test nsv-dict-incr.2 {nsv_dict incr} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict incr a1 k1 x
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x 2 y 2}

test nsv-dict-incr.3 {nsv_dict incr non existing value} -body {
    # add dict values for k1
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict incr a1 k1 z1
    nsv_dict incr a1 k1 z2 2
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x 1 y 2 z1 1 z2 2}

#
# nsv_dict append
#
test nsv-dict-append.0 {nsv_dict append - syntax test} -body {
    nsv_dict append a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict append array key dictkey ?args?"}

test nsv-dict-append.1 {nsv_dict append create new entry} -body {
    nsv_dict append a1 k1 x a
    nsv_dict append a1 k1 x b
    nsv_dict append a1 k2 z c
    nsv_array get a1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {k1 {x ab} k2 {z c}}

test nsv-dict-append.2 {nsv_dict append} -body {
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict append a1 k1 x "hello world"
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x {1hello world} y 2}

test nsv-dict-append.3 {nsv_dict append non existing value} -body {
    nsv_dict append a1 k1 x 1
    nsv_dict append a1 k1 y 2
    nsv_dict append a1 k1 x "=one"
    nsv_dict append a1 k1 y "=two"
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x 1=one y 2=two}

test nsv-dict-append.4 {nsv_dict append zero or more arguments} -body {
    lappend _ [nsv_dict append a1 k1 x]
    lappend _ [nsv_dict append a1 k1 x]
    lappend _ [nsv_dict append a1 k1 y 2]
    lappend _ [nsv_dict append a1 k1 x "a1" "a2"]
} -cleanup {
    unset -nocomplain _
    nsv_unset -nocomplain a1
} -result {{x {}} {x {}} {x {} y 2} {x a1a2 y 2}}

#
# nsv_dict lappend
#
test nsv-dict-lappend.0 {nsv_dict lappend - syntax test} -body {
    nsv_dict lappend a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict lappend array key dictkey ?args?"}

test nsv-dict-lappend.1 {nsv_dict lappend create new entry} -body {
    # add dict values for k1
    nsv_dict lappend a1 k1 x a
    nsv_dict lappend a1 k1 x b
    nsv_dict lappend a1 k2 z c
    nsv_array get a1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {k1 {x {a b}} k2 {z c}}

test nsv-dict-lappend.2 {nsv_dict lappend} -body {
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict lappend a1 k1 x "hello world"
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x {1 {hello world}} y 2}

test nsv-dict-lappend.3 {nsv_dict lappend non existing value} -body {
    nsv_dict lappend a1 k1 x 1
    nsv_dict lappend a1 k1 y 2
    nsv_dict lappend a1 k1 x "one"
    nsv_dict lappend a1 k1 y "two"
} -cleanup {
    nsv_unset -nocomplain a1
} -result {x {1 one} y {2 two}}

test nsv-dict-lappend.4 {nsv_dict lappend zero or more arguments} -body {
    lappend _ [nsv_dict lappend a1 k1 x]
    lappend _ [nsv_dict lappend a1 k1 x]
    lappend _ [nsv_dict lappend a1 k1 y 2]
    lappend _ [nsv_dict lappend a1 k1 x "a1" "a2"]
} -cleanup {
    unset -nocomplain _
    nsv_unset -nocomplain a1
} -result {{x {}} {x {}} {x {} y 2} {x {a1 a2} y 2}}

#
# nsv_dict size
#
test nsv-dict-size.0 {nsv_dict size - syntax test} -body {
    nsv_dict size a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict size array key"}

test nsv-dict-size.1 {nsv_dict size} -body {
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_dict size a1 k1
} -cleanup {
    nsv_unset -nocomplain a1
} -result {2}

#
# nsv_dict keys
#
test nsv-dict-keys.0 {nsv_dict keys - syntax test} -body {
    nsv_dict keys a1
} -cleanup {
    nsv_unset -nocomplain a1
} -returnCodes {error} -result {wrong # args: should be "nsv_dict keys array key ?pattern?"}

test nsv-dict-keys.1 {nsv_dict size} -body {
    nsv_dict set a1 k1 x 1
    nsv_dict set a1 k1 y 2
    nsv_set a1 k2 {a 1 b 2}
    list [nsv_dict keys a1 k1] [nsv_dict keys a1 k2]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {{x y} {a b}}

test nsv-dict-keys.2 {nsv_dict size} -body {
    nsv_dict set a1 k1 xx 1
    nsv_dict set a1 k1 yy 2
    nsv_set a1 k2 {aa 1 bb 2}
    list [nsv_dict keys a1 k1 x*] [nsv_dict keys a1 k2 b*]
} -cleanup {
    nsv_unset -nocomplain a1
} -result {xx bb}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
