# -*- Tcl -*-
#
# Configuration file for server to run tests in command mode.
#

#
# Make sure, the testfile runs with an expected locale
#
set ::env(LANG) en_US.UTF-8


#
# Determine available IP addresses and unused ports for the web server
# and nscp.
#
proc __ns_get_free_port {addr startPort maxPort} {
    for {set port $startPort} {$port < $maxPort} {incr port} {
        if {![catch {
            ns_log notice "try $addr $port"
            close [ns_socklisten $addr $port]
        } errorMsg]} {
            return $port
        }
    }
    return ""
}

#
# At least with the debian image from debian-bookworm, we cannot
# lookup "::1", but "127.0.0.1" works. Error for ::1:
#
#  dns: getaddrinfo failed for ::1: Address family for hostname not supported
#
foreach loopback [expr {[ns_info ipv6] && ![catch {ns_addrbyhost ::1}]
                        ? {::1 127.0.0.1}
                        : {127.0.0.1}}] {
    set port [__ns_get_free_port $loopback 8000 8100]
    if {$port ne ""} {
        break
    }
}
set nscp_port [expr {$::tcl_platform(platform) eq "windows" ? "" : [__ns_get_free_port $loopback 4080 4099]}]

#
# Parameters for test scripts.
#
ns_section "test" {
    ns_param home       [pwd]/tests
    ns_param listenport [expr {$port < 8100 ? $port : 0}]
    if {[ns_info ssl] ne ""} {
        ns_param tls_listenport [__ns_get_free_port $loopback 8443 8543]
    }
    ns_param loopback   $loopback

    set loopback_host [expr {[string match *:* $loopback] ? "\[$loopback\]" : $loopback}]
    ns_param listenurl http://$loopback_host:[ns_config test listenport]
    ns_param tls_listenurl https://$loopback_host:[ns_config test tls_listenport]
}

ns_log notice "configure LOOPBACK $loopback LISTENURL [ns_config test listenurl]"

#
# Small helper to allow to share config file with windows
#
proc sharedlibextension {} {
    switch -- $::tcl_platform(os) {
        Darwin {return .so}
        default {return [info sharedlibextension]}
    }
}


#
# The following are for the tests in tests/ns_config.test.
#

ns_section "ns/testconfig" {
    ns_param   trueval    yes
    ns_param   intval     42
    ns_param   notbool    this-is-not-a-bool
    ns_param   notint     this-is-not-an-int
    ns_param   CamelCase  ok
    ns_param   wideint    12345678900
    ns_param   isTestServer true
    ns_param   single     "hello world"
    ns_param   multiple   on
    ns_param   multiple   off
}

#
# Global config.
#

ns_section "ns/modules" {
    if {[ns_config "test" listenport]} {
        ns_param nssock [ns_config "test" home]/../nssock/nssock
    }
    if {[ns_info ssl]} {
        ns_param nsssl  [ns_config "test" home]/../nsssl/nsssl
    }
}

ns_section "ns/module/nssock" {
    ns_param   port            [ns_config "test" listenport]
    ns_param   hostname        localhost
    ns_param   address         [ns_config "test" loopback]
    ns_param   defaultserver   test
    # The following odd buffer sizes chose to flush out bugs...
    ns_param   maxline         1024
    ns_param   maxheaders      16
    ns_param   maxinput        1000001
    ns_param   bufsize         1024
    ns_param   readahead       1025
    ns_param   spoolerthreads  3
    ns_param   uploadsize      1027
    ns_param   writerthreads   3
    ns_param   writersize      1026
    ns_param   writerbufsize   512
    ns_param   deferaccept     0
    ns_param   maxupload       10000
    #ns_param   writerstreaming	true ;# false;  activate writer for streaming HTML output (e.g. ns_writer)
}

ns_section "ns/module/nsssl" {
    ns_param   port            [ns_config "test" tls_listenport]
    ns_param   hostname        localhost
    ns_param   address         [ns_config "test" loopback]
    ns_param   defaultserver   test
    ns_param   ciphers         "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305"
    ns_param   protocols       "!SSLv2:!SSLv3:!TLSv1.0:!TLSv1.1"
    ns_param   certificate     [ns_config "test" home]/testserver/certificates/server.pem
    ns_param   verify          0
    ns_param   writerthreads   2
    ns_param   writersize      2048
}

ns_section "ns/module/nssock/servers" {
    ns_param   test            test
    ns_param   test            example.com
    ns_param   testvhost       testvhost
    ns_param   testvhost2      testvhost2
}
ns_section "ns/module/nsssl/servers" {
    ns_param   test            test
    ns_param   testvhost       testvhost
    ns_param   testvhost2      testvhost2
}

ns_section     "ns/mimetypes" {
    ns_param    .utf_adp          "text/plain"
    ns_param    .iso_adp          "text/plain"
    ns_param    .utf2iso_adp      "text/plain; charset=iso-8859-1"
    ns_param    .iso2iso_adp      "text/plain; charset=iso-8859-1"
    ns_param    .iso-8859-2_adp   "text/plain; charset=iso-8859-2"
    ns_param    .utf2utf_adp      "text/plain; charset=utf-8"
    ns_param    .iso2utf_adp      "text/plain; charset=utf-8"
}

ns_section "ns/encodings" {
    ns_param   default         "utf-8"
    ns_param   .utf_adp        "utf-8"
    ns_param   .iso_adp        "iso-8859-1"
    ns_param   .utf2iso_adp    "utf-8"
    ns_param   .iso2iso_adp    "iso-8859-1"
    ns_param   .iso-8859-2_adp "iso-8859-2"
    ns_param   .utf2utf_adp    "utf-8"
    ns_param   .iso2utf_adp    "iso-8859-1"
}

ns_section "ns/parameters" {
    ns_param   home            [ns_config "test" home]
    ns_param   tcllibrary      [ns_config "test" home]/../tcl
    ns_param   pidfile         [ns_config "test" home]/testserver/nsd.pid
    ns_param   logdebug        false
    ns_param   logdev          false
    ns_param   lognotice       false
    ns_param   reversproxymode  true
    ns_param   progressminsize 1
    ns_param   concurrentinterpcreate true   ;# default: false
    #ns_param  formfallbackcharset iso8859-1
}

ns_section "ns/fastpath" {
    ns_param gzip_static true
    set v cache
    #set v mmap
    #set v none
    switch $v {
        cache {
            ns_param   cache           true
            ns_param   cachemaxsize    2055
            ns_param   cachemaxentry   3200
            ns_param   mmap            false
        }
        mmap {
            ns_param   cache           false
            ns_param   mmap            true
        }
        none {
            ns_param   cache           false
            ns_param   mmap            false
        }
    }
    unset v
}


ns_section "ns/limits" {
    ns_param   confLimit1      "Config File Limit One"
    ns_param   confLimit2      "Config File Limit Two"
}

ns_section "ns/limit/confLimit1" {
    ns_param   maxrun          99
}

ns_section "ns/limit/confLimit2" {
    # unspecified, use defaults.
}

ns_section "ns/servers" {
    ns_param   test            "Main Test Server"
    ns_param   testvhost       "Virtual Host Test Server"
    ns_param   testvhost2      "Virtual Host Test Server with custom procs"
    ns_param   testvhost3      "Virtual Host Test Server with special configuration options"
}

#
# Main test server config.
#

ns_section "ns/server/test" {
    ns_param   serverdir       testserver
    ns_param   enablehttpproxy yes
    ns_param   URLCharset      utf-8
    ns_param   OutputCharset   utf-8

    ns_param   compressenable  true  ;# turned on as needed for tests
    ns_param   compresslevel   4     ;# default
    ns_param   compressminsize 3     ;# for testing, compress almost everything
    ns_param   minthreads 2
    ns_param   maxthreads 10
}

ns_section "ns/server/test/pools" {
    ns_param emergency "Emergency pool"
}

ns_section "ns/server/test/pool/emergency" {
    ns_param   minthreads 1
    ns_param   maxthreads 1
}

ns_section "ns/server/test/fastpath" {
    ns_param   pagedir         pages
}

ns_section "ns/server/test/limits" {
    ns_param   confLimit1      "GET /confLimit1"
}

ns_section "ns/server/test/tcl" {
    ns_param   initfile        ../nsd/init.tcl
    ns_param   library         [ns_config "test" home]/testserver/modules
    ns_param   cachetimeout    360

    ns_param initcmds {
        #
        # The NaviServer internal modules are not "installed" for the
        # testserver, so load it for being able to test the commands
        # defined by these files.
        #
        foreach module {nsdb nsperm revproxy} {
            foreach file [glob [ns_config "test" home]/../$module/*.tcl] {
                source $file
            }
        }
    }
}
ns_section "ns/server/test/httpclient" {
    #ns_param validateCertificates false
    ns_param CAfile [file normalize [ns_config "test" home]/../ca-bundle.crt]
    ns_param CApath [file normalize [ns_config "test" home]/testserver/certificates]
}

ns_section "ns/server/test/adp" {
    ns_param   map             *.adp
    ns_param   map             *_adp
    ns_param   nocache         true
    ns_param   enabletclpages  true
    ns_param   defaultextension .adp
}


ns_section "ns/server/test/redirects" {
    ns_param   400             "/400return.adp"
}

ns_section "ns/server/test/module/nslog" {
    ns_param   file            [ns_config "test" home]/testserver/access.log
    ns_param   formattedtime   true
    ns_param   logreqtime      true
    ns_param   logcombined     true
    ns_param   maxbuffer       0
    ns_param   maxbackup       1
    ns_param   rollhour        0
    ns_param   rolllog         false
    ns_param   rollonsignal    false
    ns_param   suppressquery   false
    ns_param   extendedheaders "X-Test"
}
ns_section "ns/server/test/module/nsssl" {
    ns_param   certificate     [ns_config "test" home]/testserver/certificates/server.pem
    #ns_param   certificate     [ns_config "test" home]/testserver/certificates/openacs.org.pem
}

ns_section "ns/server/test/db" {
    ns_param   pools           a,b
    ns_param   defaultpool     a
}

ns_section "ns/server/test/module/nsproxy" {
    ns_param   exec            [ns_config "test" home]/../nsproxy/test-nsproxy.sh
}

ns_section "ns/server/test/module/nscp" {
    ns_param   port            $nscp_port
    ns_param   address         [ns_config "test" loopback]
}

ns_section "ns/server/test/module/nscp/users" {
    ns_param   user            "::"
    ns_param   user            "nsadmin:t2GqvvaiIUbF2:" ;# sample user="nsadmin", pw="x".
}

ns_section ns/server/test/module/nscgi {
    ns_param    map                 "GET /cgi-wc/*"
    ns_param    map                 "GET /cgi-dir/*.tclcgi [ns_config test home]/testserver/cgi"
    ns_param    map                 "GET *.cgi"
    ns_param    map                 "POST *.cgi"
    ns_param    interps              CGIinterps
    ns_param    allowstaticresources true    ;# default false; serve static resources from cgi directories
    ns_param    systemenvironment    true    ;# default false, provide interpreter environment to script
}

ns_section ns/interps/CGIinterps {
    set tclsh ""
    if {$::tcl_platform(platform) eq "windows"} {
        set pathlist {c:/progra~1/tcl86/bin c:/progra~1/tcl87/bin c:/progra~1/tcl90/bin c:/progra~1/tcl/bin c:/activetcl/bin}
        set versionlist {tclsh86t.exe tclsh87.exe tclsh90.exe tclsh.exe}
    } else {
        set pathlist {/usr/local/ns/bin /usr/local/bin /opt/local/bin /usr/bin}
        set versionlist {tclsh8.6 tclsh8.7 tclsh9 tclsh}
    }
    foreach path $pathlist {
        foreach version $versionlist {
            if {[file executable $path/$version]} {
                set tclsh $path/$version
                break
            }
        }
        if {$tclsh ne ""} break
    }
    ns_log notice "Use tclsh for CGI tests <$tclsh>"
    ns_param .cgi                $tclsh
    ns_param .tclcgi             $tclsh
    ns_param .sh                 "/bin/bash"
}

ns_section "ns/server/test/modules" {
    ns_param   nslog           [ns_config "test" home]/../nslog/nslog[sharedlibextension]
    ns_param   nsdb            [ns_config "test" home]/../nsdb/nsdb[sharedlibextension]
    ns_param   nsproxy         [ns_config "test" home]/../nsproxy/nsproxy[sharedlibextension]
    ns_param   nscgi           [ns_config "test" home]/../nscgi/nscgi[sharedlibextension]
    ns_param   nsperm          [ns_config "test" home]/../nsperm/nsperm[sharedlibextension]
    if {$nscp_port ne ""} {
        ns_param nscp          [ns_config "test" home]/../nscp/nscp[sharedlibextension]
    }
    ns_param   revproxy tcl
}

#
# Virtual host test server config.
#

ns_section "ns/server/testvhost" {
    ns_param   serverdir       testserver
    ns_param   enablehttpproxy yes
    ns_param   enabletclpages  true
    ns_param   minthreads 1
    ns_param   maxthreads 3
    ns_param   logdir logs-testvhost
}
ns_section "ns/server/testvhost/fastpath" {
    #ns_param   serverdir       testserver
    ns_param   pagedir         pages
}

ns_section "ns/server/testvhost/redirects" {
    #
    # Provide custom error pages:
    #
    ns_param   404    /404.tcl
    ns_param   405    /405.tcl
}
ns_section "ns/server/testvhost/modules" {
    ns_param   nslog           [ns_config "test" home]/../nslog/nslog[sharedlibextension]
    ns_param   revproxy        tcl
}
ns_section "ns/server/testvhost/module/nslog" {
    ns_param   file            [ns_config "test" home]/testserver/access.log
}

ns_section "ns/server/testvhost/vhost" {
    ns_param   enabled         true
    ns_param   hostprefix      vhosts
    ns_param   hosthashlevel   3
    ns_param   stripport       yes
    ns_param   stripwww        yes
}

ns_section "ns/server/testvhost/tcl" {
    ns_param   initfile        ../nsd/init.tcl
    ns_param   library         [ns_config "test" home]/testserver/modules
}


#
# Custom location/serverroot proc test server config.
#

ns_section "ns/server/testvhost2" {
    ns_param   serverdir       testserver
    ns_param   enabletclpages  true
    ns_param   minthreads 1
    ns_param   maxthreads 4
}

ns_section "ns/server/testvhost2/fastpath" {
    #ns_param   serverdir       testserver
    ns_param   pagedir         pages
}

ns_section "ns/server/testvhost2/tcl" {
    ns_param   initfile        ../nsd/init.tcl
    ns_param   library         [ns_config "test" home]/testserver/modules
}

#
# Virtual Host Test Server with special configuration options
#

ns_section "ns/server/testvhost3" {
    ns_param logdir /var/logs
}
ns_section "ns/server/testvhost3/tcl" {
    ns_param   initfile        ../nsd/init.tcl
}



#
# nsdb module testing.
#

ns_section "ns/db/drivers" {
    ns_param   nsdbtest        [ns_config "test" home]/../nsdbtest/nsdbtest[sharedlibextension]
}

ns_section "ns/db/pools" {
    ns_param   a  A
    ns_param   b  B
}

ns_section "ns/db/pool/a" {
    ns_param   verbose         off
    ns_param   driver          nsdbtest
    ns_param   connections     2
    ns_param   user            username
    ns_param   password        password
    ns_param   logsqlerrors    off
    ns_param   datasource      datasource_poola
    ns_param   maxidle         1
    ns_param   maxopen         1
}

ns_section "ns/db/pool/b" {
    ns_param   verbose         off
    ns_param   driver          nsdbtest
    ns_param   connections     2
    ns_param   user            username
    ns_param   password        password
    ns_param   logsqlerrors    off
    ns_param   datasource      datasource_poolb
    ns_param   maxidle         1
    ns_param   maxopen         1
}
puts stderr "=================================="
ns_logctl severity notice off
ns_logctl severity warning off
