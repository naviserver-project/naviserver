# -*- Tcl -*-
#
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://aolserver.com/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is AOLserver Code and related documentation
# distributed by AOL.
#
# The Initial Developer of the Original Code is America Online,
# Inc. Portions created by AOL are Copyright (C) 1999 America Online,
# Inc. All Rights Reserved.
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
#

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

testConstraint curl [expr {![catch {exec curl -V}]}]
testConstraint iconv [expr {![catch {exec iconv --version}]}]

# testConstraint pairsTest true ;# test characters pairs, long time process
# testConstraint usingExternalToUtf true ;# true if HttpGetResult uses ExternalToUtf; will be assigned in http_charsets-0.0


test http_charsets-0.0 "test whether HttpGetResult uses ExternalToUtf" -constraints !usingExternalToUtf -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "Ł"}
} -body {
    set result [ns_http run [ns_config test listenurl]/get]
    if {[dict get $result body] eq "Ł"} {
        testConstraint usingExternalToUtf true
    }
    return {}
} -cleanup {
    ns_unregister_op GET /get
} -result {}


test http_charsets-1.0 "simple iso8859-2 text, ns_http decoded by 'encoding converfrom'" -constraints !usingExternalToUtf -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "äöüŁ"}
} -body {
    set result [ns_http run -binary [ns_config test listenurl]/get]
    encoding convertfrom iso8859-2 [dict get $result body]
} -cleanup {
    ns_unregister_op GET /get
} -result {äöüŁ}


test http_charsets-2.0 "another iso8859-2 text, ns_http decoded by 'encoding converfrom'" -constraints !usingExternalToUtf -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "ÄÖÜŁ"}
} -body {
    set result [ns_http run -binary [ns_config test listenurl]/get]
    encoding convertfrom iso8859-2 [dict get $result body]
} -cleanup {
    ns_unregister_op GET /get
} -result {ÄÖÜŁ}


test http_charsets-2.1 "another iso8859-2 text, curl decoded by iconv" -constraints {curl iconv} -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "ÄÖÜŁ"}
} -body {
    exec curl -gs [ns_config test listenurl]/get | iconv -f iso-8859-2 -t utf-8
} -cleanup {
    ns_unregister_op GET /get
} -result {ÄÖÜŁ}


test http_charsets-2.2 "another iso8859-2 text, ns_http -binary decoded by 'encoding converfrom'" -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "ÄÖÜŁ"}
} -body {
    set result [ns_http run -binary [ns_config test listenurl]/get]
    encoding convertfrom iso8859-2 [dict get $result body]
} -cleanup {
    ns_unregister_op GET /get
} -result {ÄÖÜŁ}


test http_charsets-2.3 "another iso8859-2 text, ns_http with autodecoding"  -constraints usingExternalToUtf -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "ÄÖÜŁ"}
} -body {
    set result [ns_http run [ns_config test listenurl]/get]
    dict get $result body
} -cleanup {
    ns_unregister_op GET /get
} -result {ÄÖÜŁ}


set charsets {
    iso-8859-1 iso-8859-2 iso-8859-3 iso-8859-4 iso-8859-5 iso-8859-6 iso-8859-7 iso-8859-8 iso-8859-9
    windows-1250 windows-1251 windows-1252 windows-1253 windows-1254 windows-1256 windows-1257
    koi8-r
}

foreach charset $charsets {
    set encoding [ns_encodingforcharset $charset]
    set content ""
    for {set i 0x80} {$i <= 0xFF} {incr i} {
        set char [encoding convertfrom $encoding [format %c $i]]
        if {[string is print $char] && [encoding convertfrom $encoding [encoding convertto $encoding $char]] ne "?"} {
            append content $char
        } else {
            append content "."
        }
    }
#   puts $content

    test http_charsets-3.$charset.ns_http-and-utf "8-bit chars from $charset, ns_http gets utf-8 text" -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} "utf-8" $content]
    } -body {
        set result [ns_http run [ns_config test listenurl]/get]
        dict get $result body
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.ns_http-default "8-bit chars from $charset, ns_http and 'encoding convertfrom'" -constraints !usingExternalToUtf -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        set result [ns_http run [ns_config test listenurl]/get]
        encoding convertfrom $encoding [dict get $result body]
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.ns_http-externl "8-bit chars from $charset, ns_http autodecode" -constraints usingExternalToUtf -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        set result [ns_http run [ns_config test listenurl]/get]
        dict get $result body
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.ns_http-1binary "8-bit chars from $charset, ns_http run -binary and 'encoding convertfrom'" -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        set result [ns_http run -binary [ns_config test listenurl]/get]
        encoding convertfrom $encoding [dict get $result body]
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.ns_http-2binary "8-bit chars from $charset, ns_http queue -binary and 'encoding convertfrom'" -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        set result [ns_http wait [ns_http queue -binary [ns_config test listenurl]/get]]
        encoding convertfrom $encoding [dict get $result body]
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.ns_http--binary "8-bit chars from $charset, ns_http wait -binary and 'encoding convertfrom'" -setup {
         ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        set result [ns_http wait [ns_http queue -binary [ns_config test listenurl]/get]]
        encoding convertfrom $encoding [dict get $result body]
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


    test http_charsets-3.$charset.curl-pipe-iconv "8-bit chars from $charset, curl decoded by iconv" -constraints {curl iconv} -setup {
        ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
    } -body {
        exec curl -gs [ns_config test listenurl]/get | iconv -f $charset -t utf-8
    } -cleanup {
        ns_unregister_op GET /get
    } -result $content


}
unset -nocomplain charset encoding char content i


if {![testConstraint pairsTest]} {

puts "pairsTest not set, tests skipped"

}  else {

foreach charset $charsets {
    set encoding [ns_encodingforcharset $charset]
    for {set i 0x80} {$i <= 0xFF} {incr i} {
        set char1 [encoding convertfrom $encoding [format %c $i]]
        if {!([string is print $char1] && [encoding convertfrom $encoding [encoding convertto $encoding $char1]] ne "?")} {
            continue
        }
        set content ""
        for {set j 0x80} {$j <= 0xFF} {incr j} {
            set char2 [encoding convertfrom $encoding [format %c $j]]
            if {!([string is print $char2] && [encoding convertfrom $encoding [encoding convertto $encoding $char2]] ne "?")} {
                continue
                append content " " $char1 "."
            } else {
                append content " " $char1 $char2
            }
        }
        set x [format %2X $i]
#       puts $content

        test http_charsets-4.$charset.$x.ns_http-and-utf "8-bit pairs starting with '$char1' from $charset, ns_http gets utf-8 text" -constraints !usingExternalToUtf -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} "utf-8" $content]
        } -body {
            set result [ns_http run [ns_config test listenurl]/get]
            dict get $result body
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.ns_http-default "8-bit pairs starting with '$char1' from $charset, ns_http and 'encoding convertfrom'" -constraints !usingExternalToUtf -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            set result [ns_http run [ns_config test listenurl]/get]
            encoding convertfrom $encoding [dict get $result body]
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.ns_http-externl "8-bit pairs starting with '$char1' from $charset, ns_http autodecode" -constraints usingExternalToUtf -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            set result [ns_http run [ns_config test listenurl]/get]
            dict get $result body
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.ns_http--binary "8-bit pairs starting with '$char1' from $charset, 'ns_http run -binary' and 'encoding convertfrom'" -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            set result [ns_http run -binary [ns_config test listenurl]/get]
            encoding convertfrom $encoding [dict get $result body]
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.ns_http-1binary "8-bit pairs starting with '$char1' from $charset, ns_http queue -binary and 'encoding convertfrom'" -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            set result [ns_http wait [ns_http queue -binary [ns_config test listenurl]/get]]
            encoding convertfrom $encoding [dict get $result body]
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.ns_http-2binary "8-bit pairs starting with '$char1' from $charset, ns_http wait -binary and 'encoding convertfrom'" -setup {
             ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            set result [ns_http wait [ns_http queue -binary [ns_config test listenurl]/get]]
            encoding convertfrom $encoding [dict get $result body]
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


        test http_charsets-4.$charset.$x.curl-pipe-iconv "8-bit pairs starting with '$char1' from $charset, curl decoded by iconv" -constraints {curl iconv} -setup {
            ns_register_proc GET /get [format {ns_return 200 "text/plain; charset=%s" "%s"} $charset $content]
        } -body {
            exec curl -gs [ns_config test listenurl]/get | iconv -f $charset
        } -cleanup {
            ns_unregister_op GET /get
        } -result $content


    }
}

unset -nocomplain charset encoding char1 char2 content i j

}

unset charsets


#
# test ns_return with different charsets (also default)
#

test encoding_ns_http-1.1 {
    Send body with ns_return and charset utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" "äöü😃"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 10 "äöü😃"]


test encoding_ns_http-1.2 {
    send body with ns_return and charset iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=iso-8859-1" [encoding convertto iso8859-1 "äöü"]
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


test encoding_ns_http-1.3 {
    Send body with ns_return and default charset.
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain" [encoding convertto iso8859-1 "äöü"]
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain" "äöü"]


#
# test ns_write (and ns_headers) with different charsets (also default)
#

test encoding_ns_http-2.1 {
    ns_headers encoding from charset: utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/plain; charset=utf-8"
        ns_write "äöü"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 äöü"


test encoding_ns_http-2.2 {
    ns_headers: encoding from mime-type: utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/html; charset=utf-8"
        ns_write "äöü"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 äöü"


test encoding_ns_http-2.3 {
    ns_headers: encoding from charset: iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/plain; charset=iso-8859-1"
        ns_write "äöü"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 äöü"


test encoding_ns_http-2.4 {
    ns_headers: encoding from mime-type: iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/html; charset=iso-8859-1"
        ns_write "äöü"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 äöü"

test encoding_ns_http-2.5 {
    ns_headers: default encoding
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 text/plain
        ns_write "äöü"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 äöü"


#
# The following test both reading the bytes from the disk in a
# specific encoding, according to ns/encodings, and converting
# the resulting utf-8 to a specific encoding, according to
# ns/mimetypes.
#

test encoding_ns_http-3.1 {
    File in iso-8859-1 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding_ns_http-3.2 {
    File in utf-8 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding_ns_http-3.3 {
    File in iso-8859-1 encoding should produce iso-8859-1 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding_ns_http-3.3.1 {
    File in iso-8859-2 encoding should produce iso-8859-2 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso-8859-2_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -result {200 {text/plain; charset=iso-8859-2} 4 äöüŁ}


test encoding_ns_http-3.3.2 {
    File in iso-8859-2 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso-8859-2_adp?mime=utf]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -result {200 {text/plain; charset=utf-8} 8 äöüŁ}


test encoding_ns_http-3.4 {
    File in utf-8 encoding should produce iso-8859-1 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding_ns_http-3.5 {
    File in iso-8859-1 encoding should produce output with default OutputCharset;
    Content-Type-Header will be changed
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 \
#       -getheaders {Content-Type Content-Length} \
#       GET "/encoding.iso_adp"
    set result [ns_http run [ns_config test listenurl]/encoding.iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding_ns_http-3.6 {
    File in utf-8 encoding should produce output with default OutputCharset;
    Content-Type-Header will be changed
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 \
#       -getheaders {Content-Type Content-Length} \
#       GET "/encoding.utf_adp"
    set result [ns_http run [ns_config test listenurl]/encoding.utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


#
# test of ns_adp_mimetype
#

test encoding_ns_http-4.0 {
    Output charset changed to iso-8859-1 with ns_adp_mimetype
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2utf_adp?mime=iso]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding_ns_http-4.1 {
    Output charset changed to utf-8 with ns_adp_mimetype
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2iso_adp?mime=utf]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


#
# test urlencoding
#

test encoding_ns_http-5.1 {
    Decode url with iso-8859-1 charset
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding iso8859-1
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding?x=%e4%f6%fc]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 äöü}


test encoding_ns_http-5.2 {
    Decode url with utf-8 charset
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding utf-8
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding?x=%c3%a4%c3%b6%c3%bc]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 äöü}


#
# Test buffer handling during conversion.
#

test encoding_ns_http-6.1 {
    Return a string larger than IOBUFSZ as used in Ns_ConnWriteVChars()
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" [string repeat x 8193]
    }
} -body {
#   set result [nstest::http -getbody 1 -getheaders content-type GET /encoding]
#       list [lindex $result 0] [lindex $result 1] [string length [lindex $result 2]]
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length]
} -cleanup {
        unset -nocomplain result
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 8193}


#
# Make sure static files served directly from disk don't have their
# mime-types charset munged.
#

test encoding_ns_http-7.1 {
    A text/* mime-type.
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 -getheaders content-type GET /hello.html
    set result [ns_http run [ns_config test listenurl]/hello.html]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -result {200 text/html {Hello World!}}

test encoding_ns_http-7.2 {
    An application/* mime-type for a text document.
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 -getheaders content-type GET /hello.xhtml
    set result [ns_http run [ns_config test listenurl]/hello.xhtml]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -result {200 application/xhtml+xml {Hello World!}}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
