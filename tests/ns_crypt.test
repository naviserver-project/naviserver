# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test ns_crypt-1.1 {basic syntax: plain call} -body {
     ns_crypt
} -returnCodes error -result {wrong # args: should be "ns_crypt /key/ /salt/"}

test ns_crypt-1.2 {basic syntax: only key} -body {
     ns_crypt 123
} -returnCodes error -result {wrong # args: should be "ns_crypt /key/ /salt/"}

test ns_crypt-1.3 {basic syntax: key but empty salt argument (salt must be 2 chars)} -body {
     ns_crypt 123 ""
} -returnCodes error -result {salt string must be 2 characters long}

test ns_crypt-1.4 {basic syntax: empty key but salt argument} -body {
     ns_crypt "" 12
} -result "12UFlHxel6uMM"

test ns_crypt-1.5 {basic syntax: empty args (salt must be 2 chars)} -body {
     ns_crypt "" ""
} -returnCodes error -result {salt string must be 2 characters long}


test ns_crypt-2.1 {basic operation} -body {
     ns_crypt foo ba
} -result "ba4TuD1iozTxw"

test ns_crypt-2.2 {basic operation} -body {
     for {set i 0} {$i < 999} {incr i +1} {
         set nscrypt([ns_crypt foo ba]) .
     }
     llength [array names nscrypt]
} -cleanup {
     array unset nscrypt
} -result 1

test ns_crypt-2.3 {basic operation} -body {
     for {set i 10} {$i < 99} {incr i +1} {
         set nscrypt([ns_crypt "foo" $i]) .
     }
     llength [array names nscrypt]
} -cleanup {
     array unset nscrypt
} -result 89

test ns_crypt-3.1 {usability for *nix like passwords: basic} -body {
     ns_crypt mypassword XL
} -result "XL/CpuZPF/frI"

test ns_crypt-3.1 {usability for *nix like passwords: length} -body {
     string length [ns_crypt mypassword XL]
} -result 13

test ns_crypt-3.1 {usability for *nix like passwords: salt} -body {
     string range [ns_crypt mypassword XL] 0 1
} -result "XL"



cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
