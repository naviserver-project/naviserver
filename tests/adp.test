# -*- Tcl -*-
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code and related documentation
# is America Online, Inc. Portions created by AOL are Copyright (C) 1999
# America Online, Inc. All Rights Reserved.
#
#

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv
if {$::tcl_version < 8.6} {package require try}

if {[ns_config test listenport]} {
    testConstraint serverListen true
}

#
# The following allows us to use ADP without a connection.
#

ns_adp_ctl channel stdout

#
# Syntax tests
#
test ns_adp_ctl-1.0 {basic syntax} -body {
    ns_adp_ctl
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl /subcommand/ ?/arg .../?"}

test ns_adp_ctl-1.1 {basic syntax} -body {
    ns_adp_ctl ?
} -returnCodes error -result {bad subcommand "?": must be bufsize, channel, autoabort, cache, detailerror, displayerror, expire, safe, singlescript, stream, stricterror, trace, or trimspace}


test ns_adp_ctl-1.2 {syntax: ns_adp_ctl autoabort} -body {
    ns_adp_ctl autoabort 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl autoabort ?true|false?"}

test ns_adp_ctl-1.3 {syntax: ns_adp_ctl bufsize} -body {
    ns_adp_ctl bufsize 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl bufsize ?/size[1,MAX]/?"}

test ns_adp_ctl-1.4 {syntax: ns_adp_ctl cache} -body {
    ns_adp_ctl cache 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl cache ?true|false?"}

test ns_adp_ctl-1.5 {syntax: ns_adp_ctl channel} -body {
    ns_adp_ctl channel "" x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl channel /channel/"}

test ns_adp_ctl-1.6 {syntax: ns_adp_ctl detailerror} -body {
    ns_adp_ctl detailerror 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl detailerror ?true|false?"}

test ns_adp_ctl-1.7 {syntax: ns_adp_ctl displayerror} -body {
    ns_adp_ctl displayerror 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl displayerror ?true|false?"}

test ns_adp_ctl-1.8 {syntax: ns_adp_ctl expire} -body {
    ns_adp_ctl expire 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl expire ?true|false?"}

test ns_adp_ctl-1.9 {syntax: ns_adp_ctl safe} -body {
    ns_adp_ctl safe 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl safe ?true|false?"}

test ns_adp_ctl-1.10 {syntax: ns_adp_ctl singlescript} -body {
    ns_adp_ctl singlescript 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl singlescript ?true|false?"}

test ns_adp_ctl-1.11 {syntax: ns_adp_ctl stream} -body {
    ns_adp_ctl stream 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl stream ?true|false?"}

test ns_adp_ctl-1.12 {syntax: ns_adp_ctl stricterror} -body {
    ns_adp_ctl stricterror 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl stricterror ?true|false?"}

test ns_adp_ctl-1.13 {syntax: ns_adp_ctl trace} -body {
    ns_adp_ctl trace 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl trace ?true|false?"}

test ns_adp_ctl-1.14 {syntax: ns_adp_ctl trimspace} -body {
    ns_adp_ctl trimspace 1 x
} -returnCodes error -result {wrong # args: should be "ns_adp_ctl trimspace ?true|false?"}



test ns_adp_abort-1.0 {syntax: ns_adp_abort} -body {
    ns_adp_abort ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_abort ?/retval/?"}

test ns_adp_argv-1.0 {syntax: ns_adp_argv} -body {
    ns_adp_argv 1 ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_argv ?/index[0,MAX]/? ?/default/?"}

test ns_adp_close-1.0 {syntax: ns_adp_close} -body {
    ns_adp_close ?
} -returnCodes error -result {wrong # args: should be "ns_adp_close"}

test ns_adp_dir-1.0 {syntax: ns_adp_dir} -body {
    ns_adp_dir ?
} -returnCodes error -result {wrong # args: should be "ns_adp_dir"}

test ns_adp_dump-1.0 {syntax: ns_adp_dump} -body {
    ns_adp_dump ?
} -returnCodes error -result {wrong # args: should be "ns_adp_dump"}

test ns_adp_info-1.0 {syntax: ns_adp_info} -body {
    ns_adp_info ?
} -returnCodes error -result {wrong # args: should be "ns_adp_info"}

test ns_adp_registeradp-1.0 {syntax: ns_adp_registeradp} -body {
    ns_adp_registeradp
} -returnCodes error -result {wrong # args: should be "ns_adp_registeradp /tag/ ?/endtag/? adp|proc"}

test ns_adp_registerproc-1.0 {syntax: ns_adp_registerproc} -body {
    ns_adp_registerproc
} -returnCodes error -result {wrong # args: should be "ns_adp_registerproc /tag/ ?/endtag/? adp|proc"}

test ns_adp_registerscript-1.0 {syntax: ns_adp_registerscript} -body {
    ns_adp_registerscript
} -returnCodes error -result {wrong # args: should be "ns_adp_registerscript /tag/ ?/endtag/? adp|proc"}

test ns_adp_return-1.0 {syntax: ns_adp_return} -body {
    ns_adp_return ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_return ?/retval/?"}


test ns_adp_append-1.0 {syntax: ns_adp_append} -body {
    ns_adp_append
} -returnCodes error -result {wrong # args: should be "ns_adp_append /string/ ?/string/ ...?"}

test ns_adp_argc-1.0 {syntax: ns_adp_argc} -body {
    ns_adp_argc ?
} -returnCodes error -result {wrong # args: should be "ns_adp_argc"}

test ns_adp_bind_args-1.0 {syntax: ns_adp_bind_args} -body {
    ns_adp_bind_args
} -returnCodes error -result {wrong # args: should be "ns_adp_bind_args /varName/ ?/varName/ ...?"}

test ns_adp_break-1.0 {syntax: ns_adp_break} -body {
    ns_adp_break ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_break ?/retval/?"}

test ns_adp_debug-1.0 {syntax: ns_adp_debug} -body {
    ns_adp_debug ? ? ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_debug ?-host /string/? ?-port /string/? ?-procs /string/? ?--? ?/host/? ?/port/? ?/procs/?"}

test ns_adp_exception-1.0 {syntax: ns_adp_exception} -body {
    ns_adp_exception ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_exception ?/varName/?"}

test ns_adp_flush-1.0 {syntax: ns_adp_flush} -body {
    ns_adp_flush ?
} -returnCodes error -result {wrong # args: should be "ns_adp_flush"}

test ns_adp_include-1.0 {syntax: ns_adp_include} -body {
    ns_adp_include
} -returnCodes error -result {wrong # args: should be "_ns_adp_include ?-cache /time/? ?-nocache? ?-tcl? ?--? /fileName/ ?/arg .../?"}
# ns_adp_include is a Tcl proc: message should be {wrong # args: should be "ns_adp_include ?-cache /cache/? ?-nocache? ?-tcl? ?--? /fileName/ ?args?"}

test ns_adp_mimetype-1.0 {syntax: ns_adp_mimetype} -body {
    ns_adp_mimetype ? ?
} -returnCodes error -result {wrong # args: should be "ns_adp_mimetype ?/mimetype/?"}

test ns_adp_parse-1.0 {syntax: ns_adp_parse} -body {
    ns_adp_parse
} -returnCodes error -result {wrong # args: should be "ns_adp_parse ?-cwd /string/? ?-file? ?-safe? ?-string? ?-tcl? ?--? /arg .../"}

test ns_adp_puts-1.0 {syntax: ns_adp_puts} -body {
    ns_adp_puts
} -returnCodes error -result {wrong # args: should be "ns_adp_puts ?-nonewline? ?--? /string/"}

test ns_adp_stats-1.0 {syntax: ns_adp_stats} -body {
    ns_adp_stats ?
} -returnCodes error -result {wrong # args: should be "ns_adp_stats"}

test ns_adp_tell-1.0 {syntax: ns_adp_tell} -body {
    ns_adp_tell ?
} -returnCodes error -result {wrong # args: should be "ns_adp_tell"}

test ns_adp_trunc-1.0 {syntax: ns_adp_trunc} -body {
    ns_adp_trunc 1 ?
} -returnCodes error -result {wrong # args: should be "ns_adp_trunc ?/length[0,MAX]/?"}

test ns_register_adp-1.0 {syntax: ns_register_adp} -body {
    ns_register_adp
} -returnCodes error -result {wrong # args: should be "ns_register_adp ?-noinherit? ?-expires /time/? ?-options /options/? ?--? /method/ /url/ ?/file/?"}




#
# Functional tests
#

#ns_logctl severity Debug(task) on

test adp-1.1 {Simple Tcl page} -body {
    nstest::http -getbody 1 GET /helloworld.tcl
} -returnCodes {ok error} -result {200 {Hello World!}}


test adp-1.2 {Simple Tcl page returning large data} -body {
    set result [nstest::http -getbody 1 GET /helloworld.tcl?data=x&repeat=8666]
    list [lindex $result 0] [string length [lindex $result 1]]
} -cleanup {
    unset -nocomplain result
} -result {200 8666}


test adp-1.3 {Simple ADP page} -body {
    nstest::http -getbody 1 GET /helloworld.adp
} -result {200 {Hello World!}}


test adp-1.4 {Simple ADP page returning large data} -body {
    set result [nstest::http -getbody 1 GET /helloworld.adp?data=x&repeat=8666]
    list [lindex $result 0] [string length [lindex $result 1]]
} -cleanup {
    unset -nocomplain result
} -result {200 8666}


test adp-2.1 {ADP page map} -setup {
    ns_register_adp GET /dejavu helloworld.adp
} -body {
    nstest::http -getbody 1 GET /dejavu
} -cleanup {
    ns_unregister_op GET /dejavu
} -result {200 {Hello World!}}


test adp-2.2 {Tcl page map} -setup {
    ns_register_tcl GET /dejavu helloworld.tcl
} -body {
    nstest::http -getbody 1 GET /dejavu
} -cleanup {
    ns_unregister_op GET /dejavu
} -result {200 {Hello World!}}



test adp-3.1 {ns_adp_ctl} -body {
    # (enabled by default)
    list [ns_adp_ctl autoabort 0] [ns_adp_ctl autoabort]
} -result {1 0}

test adp-3.2 {ns_adp_ctl bufsize} -body {
    set orig [ns_adp_ctl bufsize 1666]
    ns_adp_ctl bufsize $orig
} -cleanup {
    unset -nocomplain orig
} -result {1666}



test adp-4.1a {ns_adp_append} -body {
    ns_adp_parse {<% ns_adp_append adp-4.1 %>}
} -result {adp-4.1}

test adp-4.1b {ns_adp_append} -body {
    ns_adp_parse {<% ns_adp_append adp-4.1' %>}
} -result {adp-4.1'}


test adp-4.2 {ns_adp_puts} -body {
    ns_adp_parse {<% ns_adp_puts adp-4.2 %>}
} -result "adp-4.2\n"

test adp-4.3 {ns_adp_puts} -body {
    ns_adp_parse {<% ns_adp_puts -nonewline adp-4.3 %>}
} -result {adp-4.3}

test adp-4.4 {ns_adp_dir (unset)} -body {
    ns_adp_dir
} -result {}


test adp-5.1 {Nested ADP tags} -body {
    string map {\r ""} [nstest::http -getbody 1 GET /nested.adp]
} -result {200 {anything
}}

test adp-5.2 {Deeply nested ADP tags} -body {
    string map {\r ""} [nstest::http -getbody 1 GET /deepnest.adp]
} -result {200 {deep
}}


#
# ns_adp_parse
#

test adp-6.1 {adp-parse string} -body {
    ns_adp_parse {2 + 2 = <%= [expr {2 + 2}] %> !!!}
} -result {2 + 2 = 4 !!!}

test adp-6.2 {adp-parse string} -body {
    ns_adp_parse -string {2 + 2 = <%= [expr {2 + 2}] %> !!!}
} -result {2 + 2 = 4 !!!}


test adp-6.3 {adp-parse file} -body {
    string map {\r ""} [ns_adp_parse -file adp1.adp]
} -result {2 + 2 = 4 !!!
}

test adp-6.4 {adp-parse file with arguments} -body {
    string map {\r ""} [ns_adp_parse -file adp2.adp hello world]
} -result {2 + 2 = 4 !!!
argc 3
argv adp2.adp hello world
}

test adp-7.1 {adp-parse string with tag, quoted and unquoted} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test71 ::test_tag_proc
    ns_adp_parse -string {<test71 a="1" b=2>}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {a 1 b 2}

test adp-7.2a {adp-parse string with tag, with less sign} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test72 ::test_tag_proc
    ns_adp_parse -string {<test72 a="1" title="<" b=2>}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {a 1 title < b 2}

test adp-7.2b {adp-parse string with tag with greater sign} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test72 ::test_tag_proc
    ns_adp_parse -string {<test72 a="1" title=">" b=2>}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {a 1 title > b 2}

test adp-7.3 {adp-parse string with tag, with markup in attribute} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test73 ::test_tag_proc
    ns_adp_parse -string {<test73 a="1" title="<i class='fa fa-link'></i>" b=2>}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {a 1 title {<i class='fa fa-link'></i>} b 2}

#
# When parsing fails, the result is literally the input
#
test adp-7.4a {adp-parse string with tag, attribute quote not terminated} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test74 ::test_tag_proc
    ns_adp_parse -string {<test74 a="1" b=2}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {<test74 a="1" b=2}

test adp-7.4b {adp-parse string with tag, attribute quote not terminated} -body {
    proc ::test_tag_proc {params} {return [ns_set array $params]}
    ns_adp_registerscript test74 ::test_tag_proc
    ns_adp_parse -string {<test74 a="1" title=" b=2>}  ;#"
} -cleanup {
    rename  ::test_tag_proc ""
} -result {a 1 title {" b=2>}} ;#"

test adp-7.5.1 {adp-parse string with non-registered tag, attribute quote not terminated} -body {
    ns_adp_parse -string {<test75 a="1" title=" b=2>}  ;#"
} -result {<test75 a="1" title=" b=2>} ;#"

test adp-7.5.2 {adp-parse string with non-registered tag, plain less sign in text} -body {
    ns_adp_parse -string {a < b & x=1, <test75 a="1" b=2> ...}
} -result {a < b & x=1, <test75 a="1" b=2> ...}

test adp-7.5.3 {adp-parse string with non-registered tag, plain less and gt sign in text} -body {
    ns_adp_parse -string {a < b & x=1, <test75 a="1" b=2> .>.}
} -result {a < b & x=1, <test75 a="1" b=2> .>.}

#
# <script> tags (lang=tcl)
#
test adp-8.1.0 {adp-parse script base case} -body {
    ns_adp_parse {begin <script>hello word</script> end}
} -returnCodes {ok error} -result {begin <script>hello word</script> end}

test adp-8.1.1 {adp-parse script runat="server" and default language} -body {
    set r [ns_adp_parse {begin <script runat="server">set ::result ok</script> end}]
    list $r $::result
} -cleanup {
    unset -nocomplain ::result
} -returnCodes {ok error} -result {{begin  end} ok}

test adp-8.1.2 {adp-parse script runat="server" and language tcl} -body {
    set r [ns_adp_parse {begin <script language=tcl runat=server>set ::result ok</script> end}]
    list $r $::result
} -cleanup {
    unset -nocomplain ::result
} -returnCodes {ok error} -result {{begin  end} ok}

test adp-8.1.3a {adp-parse script runat="server" and language tcl, tag inside script} -body {
    set r [ns_adp_parse {begin <script language=tcl runat=server>set ::result <br></script> end}]
    list $r $::result
} -cleanup {
    unset -nocomplain ::result
} -returnCodes {ok error} -result {{begin  end} <br>}

test adp-8.1.3b {adp-parse script runat="server" and language tcl, broken tag inside script} -body {
    set r [ns_adp_parse {begin <script language=tcl runat=server>set ::result "<a '>"</script> end}]
    list $r $::result
} -cleanup {
    unset -nocomplain ::result
} -returnCodes {ok error} -result {{begin  end} {<a '>}}

# <%= .. %> is NOT executed in "<script language=tcl runat=server>...</script>"
test adp-8.1.4 {adp-parse script runat="server" and language tcl, <%...%> inside script} -body {
    set r [ns_adp_parse {begin <script language=tcl runat=server>set ::result {<%= [expr {2 + 2}] %>}</script> end}]
    list $r $::result
} -cleanup {
    unset -nocomplain ::result
} -returnCodes {ok error} -result {{begin  end} {<%= [expr {2 + 2}] %>}}

#
# <script> tags (type="text/javascript")
#
test adp-8.2.0 {adp-parse script classical javascript case} -body {
    ns_adp_parse {begin <script type="text/javascript">alert('hi');</script> end}
} -result {begin <script type="text/javascript">alert('hi');</script> end}

test adp-8.2.1 {adp-parse script javascript case, tag inside script} -body {
    ns_adp_parse {begin <script type="text/javascript">x = '<br>';</script> end}
} -result {begin <script type="text/javascript">x = '<br>';</script> end}

test adp-8.2.2a {adp-parse script javascript case, broken tag inside script} -body {
    ns_adp_parse {begin <script type="text/javascript"> begin < ' end</script> end}
} -result {begin <script type="text/javascript"> begin < ' end</script> end}

test adp-8.2.2b {adp-parse script javascript case, broken tag inside script} -body {
    ns_adp_parse {begin <script type="text/javascript"> x= '<a "';</script> end} ;#"
} -result {begin <script type="text/javascript"> x= '<a "';</script> end}    ;#"

test adp-8.2.2c {adp-parse script javascript case, broken tag inside script, trailing tag} -body {
    ns_adp_parse {begin <script type="text/javascript"> begin <a ' end</script> <tag t=foo'> end}
} -result {begin <script type="text/javascript"> begin <a ' end</script> <tag t=foo'> end}

test adp-8.2.2d {adp-parse script javascript case, broken tag inside script, trailing registered tag, invalid tag name before} -body {
    proc ::test_tag_proc {params} {return RESULT}
    ns_adp_registerscript test822 ::test_tag_proc
    ns_adp_parse {begin <script type="text/javascript"> begin <a. ' end</script> <test822> t=foo' end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {begin <script type="text/javascript"> begin <a. ' end</script> RESULT t=foo' end}

test adp-8.2.2e {adp-parse script javascript case, broken tag inside script, trailing registered tag, no attribute} -body {
    proc ::test_tag_proc {params} {return RESULT}
    ns_adp_registerscript test822 ::test_tag_proc
    ns_adp_parse {begin <script type="text/javascript"> begin <a ' end</script> <test822> t=foo' end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {begin <script type="text/javascript"> begin <a ' end</script> RESULT t=foo' end}


# Not sure, the following is a good idea, since adp inline code <% .. %>
# substitution can interfere with JavaScript Templates (JST).
# Execute  <%= .. %> in "<script type="text/javascript>...</script>"?
test adp-8.2.3 {adp-parse script javascript case, <% .. %> inside script} -body {
    ns_adp_parse {begin <script type="text/javascript"> x= '<%= [expr {2 + 2}] %>';</script> end}
} -result {begin <script type="text/javascript"> x= '4';</script> end}

test adp-8.2.4a {adp-parse script javascript case, nested <script>} -body {
    ns_adp_parse {begin <script type="text/javascript">document.write("<script>alert('Hi')</script>");</script> end}
} -result {begin <script type="text/javascript">document.write("<script>alert('Hi')</script>");</script> end}

test adp-8.2.4b {adp-parse script javascript case, nested <script> unbalanced} -body {
    ns_adp_parse {begin <script type="text/javascript">document.write("<script>alert('Hi')");</script> end}
} -result {begin <script type="text/javascript">document.write("<script>alert('Hi')");</script> end}

test adp-8.2.5a {adp-parse script javascript case, </script> inside script} -body {
    ns_adp_parse {begin <script type="text/javascript"> x= '</script>';</script> end}
} -result {begin <script type="text/javascript"> x= '</script>';</script> end}

test adp-8.2.5b {adp-parse script javascript case, </script> inside script} -body {
    ns_adp_parse {begin <script type="text/javascript"> x= '</script>'; end}
} -result {begin <script type="text/javascript"> x= '</script>'; end}



test adp-8.3.0a {adp-parse string with tag and script} -body {
    proc ::test_tag_proc {params} {return RESULT}
    ns_adp_registerscript test831 ::test_tag_proc
    ns_adp_parse -string {start <foo arg="<test831>"> end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {start <foo arg="RESULT"> end}

test adp-8.3.0b {adp-parse string with tag and script} -body {
    proc ::test_tag_proc {params} {return RESULT}
    ns_adp_registerscript test831 ::test_tag_proc
    ns_adp_parse -string {start <script arg="<test831>"></script> end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {start <script arg="RESULT"></script> end}


test adp-8.3.1 {adp-parse string with tag and script} -body {
    proc ::test_tag_proc {params} {return RESULT}
    ns_adp_registerscript test831 ::test_tag_proc
    ns_adp_parse -string {start <foo arg="<test831>"> <script arg="<test831>"> end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {start <foo arg="RESULT"> <script arg="RESULT"> end}

test adp-8.3.2 {adp-parse string with tag and script} -body {
    proc ::test_tag_proc {params} {return bar}
    ns_adp_registerscript test832 ::test_tag_proc
    ns_adp_parse -string {start <foo<test831>> end}
} -cleanup {
    rename  ::test_tag_proc ""
} -result {start <foobar> end}

if {0} {
    #
    # some cases from OpenACS (require <if> tag)
    #
    <script type="<%=@headscript.type;literal@"<if @headscript.src@ not nil> src="@headscript.src;literal@"</if>><if @headscript.content@ not nil>@headscript.content;noquote@</if></script>
    <html<if @doc.lang@ not nil> lang="@doc.lang;literal@"</if>>
}


test http_adp-2.0 {simple ADP page} -body {
    nstest::http -getbody 1 GET /helloworld.adp
} -result {200 {Hello World!}}

test http_adp-2.1.1 {ADP page with timed out ns_http request} -body {
    #
    # Here the invocation of the testcase times out
    #
    #ns_logctl severity Debug(task) on
    nstest::http -timeout 2s -getbody 1 GET /http_nonexistent.adp
} -returnCodes {ok return error} -match glob -result {000 {testcase NS_TIMEOUT: http request timeout}}

test http_adp-2.1.2 {ADP page with timed out ns_http request followed by simple ADP page} -body {
    try {ns_http run -timeout .5s http://192.0.2.1/} on error {errorMsg} {ns_log notice "run ends in $::errorCode '$errorMsg'"}
    try {ns_http run http://192.0.2.1/} on error {errorMsg} {ns_log notice "run ends in $::errorCode '$errorMsg'"}
    nstest::http -getbody 1 GET /helloworld.adp
} -returnCodes {ok return error} -result {200 {Hello World!}}


test http_adp-2.2 {ADP page with timed out ns_http request followed by simple ADP page} -body {
    nstest::http -getbody 1 GET /http_returntimeout.adp
} -returnCodes {ok return error} -match glob -result {503 *Service Unavailable*}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
