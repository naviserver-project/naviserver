# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv


if {[ns_config test listenport]} {
    testConstraint serverListen true
}
testConstraint http09 true



test tclresp-1.1.1 {basic syntax} -body {
    ns_headers
} -returnCodes error -result {wrong # args: should be "ns_headers ?-binary? ?--? status[100,599] ?type? ?length[0,2147483647]?"}

test tclresp-1.1.2 {basic syntax} -body {
    ns_headers 200
} -returnCodes error -result {no connection}

test tclresp-1.2.1 {basic syntax} -body {
    ns_return
} -returnCodes error -result {wrong # args: should be "ns_return ?-binary? status[100,599] type data"}

test tclresp-1.2.2 {basic syntax} -body {
    ns_return 200 text/plain x
} -returnCodes error -result {no connection}

test tclresp-1.3.1 {basic syntax} -body {
    ns_respond -x
} -returnCodes error -result {wrong # args: should be "ns_respond ?-status status[100,599]? ?-type type? ?-length length[0,2147483647]? ?-headers headers? ?-string string? ?-file file? ?-fileid fileid? ?-binary binary?"}

test tclresp-1.3.2 {basic syntax} -body {
    ns_respond -string x
} -returnCodes error -result {no connection}


test tclresp-1.3.3 {basic syntax} -body {
    ns_respond -string x -file y
} -returnCodes error -result {no connection}

test tclresp-1.3.3-c {basic syntax connected} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        catch {ns_respond -string x -file y} errorMsg
        ns_return 200 text/plain $errorMsg
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 {must specify only one of -string, -file, -binary or -fileid}}


test tclresp-1.3.4 {basic syntax} -body {
    ns_respond -fileid x
} -returnCodes error -result {no connection}

test tclresp-1.3.4-c {basic syntax connected} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        catch {ns_respond -fileid x} errorMsg
        ns_return 200 text/plain $errorMsg
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 {length required when -fileid is used}}


test tclresp-1.3.5 {basic syntax} -body {
    ns_respond -headers h -string x
} -returnCodes error -result {no connection}

test tclresp-1.3.5-c {basic syntax connected} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        catch {ns_respond -headers h -string x} errorMsg
        ns_return 200 text/plain $errorMsg
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 {invalid ns_set id: "h"}}



test tclresp-1.4.1 {basic syntax} -body {
    ns_returnfile
} -returnCodes error -result {wrong # args: should be "ns_returnfile status[100,599] type filename"}

test tclresp-1.4.2 {basic syntax} -body {
    ns_returnfile 200 text/plain x
} -returnCodes error -result {no connection}

test tclresp-1.5.1 {basic syntax} -body {
    ns_returnfp
} -returnCodes error -result {wrong # args: should be "ns_returnfp status[100,599] type channel length[0,2147483647]"}

test tclresp-1.5.2 {basic syntax} -body {
    ns_returnfp 200 text/plain x 0
} -returnCodes error -result {no connection}

test tclresp-1.6.1 {basic syntax} -body {
    ns_returnbadrequest
} -returnCodes error -result {wrong # args: should be "ns_returnbadrequest reason"}

test tclresp-1.6.2 {basic syntax} -body {
    ns_returnbadrequest x
} -returnCodes error -result {no connection}

test tclresp-1.7.1 {basic syntax} -body {
    ns_returnnotfound
} -returnCodes error -result {no connection}

test tclresp-1.8.1 {basic syntax} -body {
    ns_returnunauthorized
} -returnCodes error -result {no connection}

test tclresp-1.9.1 {basic syntax} -body {
    ns_returnforbidden
} -returnCodes error -result {no connection}

test tclresp-1.10.1 {basic syntax} -body {
    ns_returnerror
} -returnCodes error -result {wrong # args: should be "ns_returnerror status[100,599] message"}

test tclresp-1.10.2 {basic syntax} -body {
    ns_returnerror 200 x
} -returnCodes error -result {no connection}

test tclresp-1.11.1 {basic syntax} -body {
    ns_returnnotice
} -returnCodes error -result {wrong # args: should be "ns_returnnotice status[100,599] title message"}

test tclresp-1.11.2 {basic syntax} -body {
    ns_returnnotice 200 x y
} -returnCodes error -result {no connection}

test tclresp-1.12.1 {basic syntax} -body {
    ns_returnredirect
} -returnCodes error -result {wrong # args: should be "ns_returnredirect location"}

test tclresp-1.12.2 {basic syntax} -body {
    ns_returnredirect http://example.com/
} -returnCodes error -result {no connection}

test tclresp-1.13.1 {basic syntax} -body {
    ns_write
} -returnCodes error -result {wrong # args: should be "ns_write data ?data ...?"}

test tclresp-1.13.2 {basic syntax} -body {
    ns_write x
} -returnCodes error -result {no connection}

test tclresp-1.14.1 {basic syntax} -body {
    ns_connsendfp
} -returnCodes error -result {wrong # args: should be "ns_connsendfp channel length[0,2147483647]"}

test tclresp-1.14.2 {basic syntax} -body {
    ns_connsendfp x 0
} -returnCodes error -result {no connection}

test tclresp-1.15.1 {basic syntax} -body {
    ns_writefp
} -returnCodes error -result {wrong # args: should be "ns_writefp fileid ?nbytes?"}

test tclresp-1.15.2 {basic syntax} -body {
    ns_writefp junk
} -returnCodes error -result {can not find channel named "junk"}

test tclresp-1.15.3 {basic syntax} -body {
    ns_writefp stdout
} -returnCodes error -result {channel "stdout" not open for reading}

test tclresp-1.15.4 {basic syntax} -body {
    ns_writefp stdin x
} -returnCodes error -result {expected integer but got "x"}

#
# The following tests various combinations of
# ns_headers and ns_write for:
#
#   HTTP / raw
#   HTTP 1.0 / 1.1
#   keep-alive / close
#   length / no-length
#   text / binary
#
# etc...
#

test tclresp-2.1 {ns_headers, status, HTTP/1.0} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_headers 599
        ns_write x
    }
} -body {
    nstest::http -http 1.0 -setheaders {Connection keep-alive} \
        -getbody 1 -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {599 {} close {} {} x}

test tclresp-2.2 {ns_headers, status, type, HTTP/1.0} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200 text/plain
        ns_write x
    }
} -body {
    nstest::http -http 1.0 -setheaders {Connection keep-alive} \
        -getbody 1 -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} close {} {} x}

test tclresp-2.3 {ns_headers, status, type, length, HTTP/1.0 keep-alive} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200 text/plain 9
        ns_write abcdefghi
    }
} -constraints http09 -body {
    nstest::http-0.9 -http 1.0 -setheaders {Connection keep-alive} \
        -getbody 1 -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} keep-alive {} 9 abcdefghi}

test tclresp-2.3.1 {ns_headers, status, type, length, HTTP/1.0 close} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200 text/plain 9
        ns_write abcdefghi
    }
} -body {
    nstest::http -http 1.0 -getbody 1 \
        -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} close {} 9 abcdefghi}

test tclresp-2.4 {ns_headers, status, type, length, HTTP/1.1} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200 text/plain 9
        ns_write abcde
        ns_write fghi
    }
} -constraints http09 -body {
    nstest::http-0.9 -http 1.1 -setheaders {Connection keep-alive} \
        -getbody 1 -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} keep-alive {} 9 abcdefghi}

test tclresp-2.5 {ns_headers, status, type, HTTP/1.1} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200 text/plain
        ns_write abcde
        ns_write fghi
    }
} -constraints http09 -body {
    nstest::http-0.9 -http 1.1 -setheaders {Connection keep-alive} \
        -getbody 1 -getheaders {content-type connection transfer-encoding content-length} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} keep-alive chunked {} {5
abcde
4
fghi
0

}}

test tclresp-2.6 {ns_return and alter output headers} -setup {
    ns_register_proc GET /tclresp {
        ns_set update [ns_conn outputheaders] content-type "text/html"
        ns_return 200 text/plain "hello world"
    }
}  -body {
    nstest::http -getbody 1 -getheaders {content-type} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=utf-8} {hello world}}



test tclresp-3.1 {ns_return} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_return 200 text/plain x}
} -body {
    nstest::http -getbody 1 -getheaders {content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 1 x}

test tclresp-3.2 {ns_return via spooler thread} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_return 200 text/plain [string repeat x 1027]
    }
} -body {
    nstest::http -getbody 1 -getheaders {content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result [list 200 1027 [string repeat x 1027]]

test tclresp-3.3 {ns_return large string} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_return 200 text/plain [string repeat x 48982]
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result [list 200 [string repeat x 48982]]

test tclresp-3.4 {ns_return larger string than can be sent in one write} \
    -constraints serverListen -setup {

    ns_register_proc GET /tclresp {
        ns_return 200 text/plain [string repeat x 48983]
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result [list 200 [string repeat x 48983]]



test tclresp-4.1 {ns_respond implicit text type} -setup {
    ns_register_proc GET /tclresp {ns_respond -string x}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {\*/\*; charset=*} 1 x}

test tclresp-4.2 {ns_respond explicit text type} -setup {
    ns_register_proc GET /tclresp {ns_respond -type text/plain -string x}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {text/plain; charset=*} 1 x}

test tclresp-4.3 {ns_respond implicit text type w/status} -setup {
    ns_register_proc GET /tclresp {ns_respond -status 200 -string x}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {\*/\*; charset=*} 1 x}

test tclresp-4.4 {ns_respond implicit text type w/length} -setup {
    ns_register_proc GET /tclresp {ns_respond -length 2 -string xxx}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 {\*/\*; charset=*} 2 xx}

test tclresp-4.5 {ns_respond} -setup {
    ns_register_proc GET /tclresp {
        set hdrs [ns_set create]
        ns_set put $hdrs k v
        ns_respond -headers $hdrs -string x
    }
} -body {
    nstest::http -getbody 1 -getheaders k GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 v x}

test tclresp-4.6 {ns_respond} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_respond -file [ns_pagepath 10bytes] ;#}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 */* 10 0123456789}

test tclresp-4.7 {ns_respond} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_respond -file noexist ;#}
} -body {
    nstest::http GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result 404

test tclresp-4.8 {ns_respond} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_respond -length 5 -fileid [open [ns_pagepath 10bytes]] ;#}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 */* 5 01234}



test tclresp-5.1 {ns_returnfile} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnfile 200 text/plain [ns_pagepath 10bytes] ;#}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 text/plain 10 0123456789}

test tclresp-5.2 {ns_returnfile} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnfile 200 text/plain noexist ;#}
} -body {
    nstest::http GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result 404

test tclresp-5.3 {ns_returnfile fastpath cache collision} -constraints serverListen -setup {
    nsv_set fast_coll count 0
    # this mutex isn't necessary; it only serves as an assurance that
    # the problem is in fact a cache collision and not a race condition
    nsv_set fast_coll lock [ns_mutex create]
    ns_eval -sync [list proc fast_coll {} {
        set filename [ns_mktemp]
        ns_mutex lock [nsv_get fast_coll lock]
        set fd [open $filename w]
        puts -nonewline $fd [nsv_incr fast_coll count]
        close $fd
        ns_returnfile 200 text/plain $filename
        file delete $filename
        ns_mutex unlock [nsv_get fast_coll lock]
    }]
    ns_register_proc GET /fastresp fast_coll
} -cleanup {
    ns_unregister_op GET /fastresp
    set mutex [nsv_get fast_coll lock]
    ns_mutex lock $mutex
    nsv_unset fast_coll
    ns_mutex unlock $mutex
    ns_mutex destroy $mutex
    ns_eval [list rename fast_coll {}]
} -body {
    set actual {}
    for {set c 1} {$c <= 5} {incr c} {
        lappend actual [nstest::http -getbody 1 GET /fastresp]
    }
    return $actual
} -result {{200 1} {200 2} {200 3} {200 4} {200 5}}

test tclresp-5.4 {ns_eval of proc with comment} -constraints serverListen -setup {
    #
    # Define a cmd which create a Tcl proc and contains a comment
    #
    set cmd [list proc ::foo {} {
        # some comment
        ns_return 200 text/plain ok
    }]
    #
    # test the $cmd with eval ...
    #
    eval $cmd
    #
    # ... and ns_eval single argument and expanded form
    #
    ns_eval $cmd
    ns_eval {*}$cmd
    ns_eval -sync $cmd
    ns_register_proc GET /foo ::foo
} -cleanup {
    ns_unregister_op GET /foo
    ns_eval [list rename ::foo {}]
} -body {
    return [nstest::http -getbody 1 GET /foo]
} -result {200 ok}


test tclresp-6.1 {ns_returnfp} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnfp 200 text/plain [open [ns_pagepath 10bytes]] 5 ;#}
} -body {
    nstest::http -getbody 1 -getheaders {content-type content-length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 text/plain 5 01234}



test tclresp-7.1 {ns_returnbadrequest} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnbadrequest oops}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {400 *oops*}



test tclresp-8.1 {ns_returnnotfound} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnnotfound}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {404 *Not Found*}

test tclresp-8.2 {ns_returnunauthorized} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnunauthorized}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {401 *Access Denied*}

test tclresp-8.3 {ns_returnforbidden} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnforbidden}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {403 *Forbidden*}



test tclresp-9.1 {ns_returnerror} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnerror 400 oops}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {400 *oops*}



test tclresp-10.1 {ns_returnnotice} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnnotice 200 TITLE MESSAGE ;#}
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {200 *TITLE*MESSAGE*}



test tclresp-11.1 {ns_returnredirect} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnredirect http://example.com/x ;#}
} -body {
    nstest::http -getbody 1 -getheaders location GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {302 http://example.com/x *Redirection*http://example.com/x*}

test tclresp-11.2 {ns_returnmoved} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {ns_returnmoved http://example.com/x ;#}
} -body {
    nstest::http -getbody 1 -getheaders location GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -match glob -result {301 http://example.com/x *Redirection*http://example.com/x*}

test tclresp-12.1 {ns_write} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200
        ns_write x
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 x}

test tclresp-12.2 {ns_write multiple buffers, encoded} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200
        ns_write x x x
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 xxx}

test tclresp-12.3 {ns_write multiple binary buffers} -setup {
    ns_register_proc GET /tclresp {
        ns_headers 200
        ns_write [binary format a x] [binary format a x] [binary format a x]
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 xxx}

test tclresp-12.3.1 {
    ns_write stream binary buffers, suppress chunking w/specific length
} -constraints serverListen -setup {
    ns_register_proc GET /tclresp {
        ns_headers -binary 200 foo/bar 3
        ns_write [binary format a x]
        ns_write [binary format a x]
        ns_write [binary format a x]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 -getheaders {Content-Length Content-Type} \
        GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 3 foo/bar xxx}

test tclresp-12.4 {
    ns_write many buffers (more than OS limit of UIO_MAXIOV)
} -constraints serverListen -setup {

    ns_register_proc GET /tclresp {
        ns_headers 200
        eval ns_write [split [string repeat x 750][string repeat y 750][string repeat z 750] ""]
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result "200 [string repeat x 750][string repeat y 750][string repeat z 750]"

test tclresp-12.5 {
    ns_write multiple buffers, some with odd sizes
} -constraints serverListen -setup {

    ns_register_proc GET /tclresp {
        ns_headers 200
        ns_write x xx "" x ""
    }
} -body {
    nstest::http -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 xxxx}



test tclresp-13.1 {ns_write without headers} -setup {
    ns_register_proc GET /tclresp ns_write x
} -constraints http09  -body {
    nstest::http-0.9 -getbody 1 -getheaders {Content-Type} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {{} x}

test tclresp-13.2 {ns_write w/ manual headers} -setup {
    ns_register_proc GET /tclresp {
        ns_write "HTTP/1.0 200 OK\r\nContent-Length: 1\r\n\r\n"
        ns_write x
    }
} -constraints http09 -body {
    nstest::http-0.9 -getbody 1 -getheaders {Content-Length} GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 1 x}



test tclresp-14.1 {ns_writefp Tcl channel, stream} -setup {
    ns_register_proc GET /tclresp {
        set file tclresp-14
        file delete $file
        set chan [open $file a+]
        puts -nonewline $chan 01234
        seek $chan 0
        ns_headers -binary 200 application/octet-stream
        ns_writefp $chan
        close $chan
        file delete $file
    }
} -body {
    nstest::http -http 1.0 -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 01234}

test tclresp-14.2 {ns_writefp Tcl channel, byte count} -setup {
    ns_register_proc GET /tclresp {
        set file tclresp-14
        file delete $file
        set chan [open $file a+]
        puts -nonewline $chan 01234
        seek $chan 0
        ns_headers -binary 200 application/octet-stream 5
        ns_writefp $chan 5
        close $chan
        file delete $file
    }
} -body {
    nstest::http -http 1.0 -getbody 1 GET /tclresp
} -cleanup {
    ns_unregister_op GET /tclresp
} -result {200 01234}

#### ns_startcontent is deprecated
# test tclresp-13.3 {ns_startcontent w/ manual headers} -setup {
#     ns_register_proc GET /tclresp {
#         ns_write "HTTP/1.0 200 OK\r\nContent-Length: 1\r\n\r\n"
#         ns_startcontent
#         ns_write x
#     }
# } -body {
#     nstest::http -getbody 1 -getheaders {Content-Length} GET /tclresp
# } -cleanup {
#     ns_unregister_op GET /tclresp
# } -result {200 1 x}




cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
