# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

if {[ns_config test listenport] ne ""} {
    testConstraint serverListenHTTP true
}
if {[ns_info ssl] ne ""} {
    testConstraint serverListenHTTPS true
}

::tcltest::configure {*}$argv

#
# ns_connchan
#
test ns_connchan-1.0 {basic operation} -body {
     ns_connchan
} -returnCodes error -result {wrong # args: should be "ns_connchan command ?args?"}

test ns_connchan-1.1 {basic operation} -body {
     ns_connchan x
} -returnCodes error -result {bad subcmd "x": must be callback, connect, close, detach, exists, list, listen, open, read, status, write, or wsencode}

test ns_connchan-1.2 {detach without connection} -body {
     ns_connchan detach
} -returnCodes error -result {no current connection}

test ns_connchan-1.3 {detach connection} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        set list [ns_connchan list]
        #ns_log notice "ns_connchan list -> [list $list] // [list [lindex $list 0]]"
        #
        # Since we detach the console and close it manually, we use
        # nsvs for result communication
        #
        nsv_set connchan result $handle-[llength $list]-[llength [lindex $list 0]]
        # finish the connection
        ns_connchan close $handle
    }
    nsv_unset -nocomplain connchan
} -body {
    catch {nstest::http -getbody 1 -- GET /conn}
    nsv_get connchan result
} -cleanup {
    nsv_unset -nocomplain connchan
    ns_unregister_op GET /conn
} -result {conn0-1-10}

test ns_connchan-1.4 {detached connection, return result via "ns_connchan write"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        set list [ns_connchan list]
        #
        # ns_connchan is not made for writing to the current
        # connection (like e.g. ns_write) thread, but we can use this
        # for testing.
        #
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\nHandle = $handle, lengths [llength $list]-[llength [lindex $list 0]]"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {Handle = conn1, lengths 1-10}}


test ns_connchan-1.5 {detached connection, return error from ns_write via "ns_connchan write"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_write foo} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {connection socket is detached}}


test ns_connchan-1.6 {detach connection, return error from "ns_return"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_return 200 text/plain ok?} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {connection socket is detached}}


test ns_connchan-1.7 {detach connection, return error "ns_returnredirect"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_returnredirect /foo} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {connection socket is detached}}

test ns_connchan-1.8.1 {detach connection, return error "ns_conn channel"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_conn channel} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {connection already closed}}


test ns_connchan-1.8.1 {detach connection, return success "ns_conn url"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_conn url} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /conn}

test ns_connchan-1.8.2 {detach connection, return success "ns_conn headers"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_set iget [ns_conn headers] User-Agent} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -match glob -result {200 NaviServer*}

test ns_connchan-1.8.3 {detach connection, return success "ns_conn method"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_conn method} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 GET}


test ns_connchan-1.8.4 {detach connection, return success "ns_conn proto"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_conn proto} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 http}


test ns_connchan-1.8.5 {detach connection, return success "ns_conn driver"} -setup {
    ns_register_proc GET /conn {
        set handle [ns_connchan detach]
        catch {ns_conn driver} errorMsg
        ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
        ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 nssock}

#
# ns_connchan connect
#
test ns_connchan-1.9.0 {connect to listenport with plain http} -constraints serverListenHTTP -body {
    set conf [ns_parseurl [ns_config test listenurl]]
    set chan [ns_connchan connect [dict get $conf host] [dict get $conf port]]
    ns_connchan write $chan "GET / HTTP/1.0\r\n\r\n"
    set result [ns_connchan read $chan]
    ns_connchan close $chan
    #
    # Return just the first line of the reply
    #
    string trimright [lindex [split $result \n] 0] \r
} -returnCodes {error ok} -result {HTTP/1.0 200 OK}

test ns_connchan-1.9.1 {connect to listenport via TLS} -constraints serverListenHTTPS -body {
    set conf [ns_parseurl [ns_config test tls_listenurl]]
    set chan [ns_connchan connect -tls [dict get $conf host] [dict get $conf port]]
    ns_connchan write $chan "GET / HTTP/1.0\r\n\r\n"
    set result [ns_connchan read $chan]
    ns_connchan close $chan
    #
    # return just the first line of the reply
    #
    string trimright [lindex [split $result \n] 0] \r
} -returnCodes {error ok} -result {HTTP/1.0 200 OK}


#
# WebSocket
#
test ns_connchan-2.0 {ns_connchan wsencode, basic command flags} -body {
    ns_connchan wsencode
} -cleanup {
    ns_unregister_op GET /conn
} -returnCodes {error ok
} -result {wrong # args: should be "ns_connchan wsencode ?-binary? ?-fin fin[0,1]? ?-mask? ?-opcode opcode? message"}

test ns_connchan-2.1.1 {ns_connchan wsencode with text} -body {
    binary encode hex [ns_connchan wsencode -opcode text "Hello WÃ¶rld"]
} -returnCodes {error ok
} -result {810c48656c6c6f2057c3b6726c64}

test ns_connchan-2.1.2 {ns_connchan wsencode with binary data fin bit cleared} -body {
    binary encode hex [ns_connchan wsencode -fin 0 -opcode binary "Hello World"]
} -returnCodes {error ok
} -result {020b48656c6c6f20576f726c64}
cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
