# -*- Tcl -*-
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://mozilla.org/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is AOLserver Code and related documentation
# distributed by AOL.
#
# The Initial Developer of the Original Code is America Online,
# Inc. Portions created by AOL are Copyright (C) 1999 America Online,
# Inc. All Rights Reserved.
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
#

package require tcltest 2.2
namespace import -force ::tcltest::*
if {$::tcl_version < 8.6} {package require try}

::tcltest::configure {*}$argv

if {[ns_config test listenport]} {
    testConstraint serverListen true
}
testConstraint http09 true

#ns_logctl severity Debug(ns:driver) on

test http_chunked-1.1 {
    ADP streaming w/chunks to HTTP/1.1 client
} -constraints {serverListen http09} -body {
    nstest::http-0.9 -http 1.1 -setheaders {Connection keep-alive} \
                -getbody 1 -getheaders {Transfer-Encoding Connection Content-Length} \
        GET /http_chunked.adp?stream=1
} -result "200 chunked keep-alive {} {a\n0123456789\n5\n01234\n0\n\n}"

test http_chunked-1.2 {
    ADP with short buffered response
} -constraints {serverListen http09} -body {
    nstest::http-0.9 -http 1.1 -setheaders {Connection keep-alive} \
                -getheaders {Transfer-Encoding Connection Content-Length} -getbody t \
        GET /http_chunked.adp?stream=0
} -result "200 {} keep-alive 15 012345678901234"

test http_chunked-1.3 {
    ADP with longer partly-buffered response and auto-streaming
} -constraints {serverListen http09} -body {
    nstest::http-0.9 -http 1.1 -setheaders {Connection keep-alive} \
                -getheaders {Transfer-Encoding Connection Content-Length} -getbody t \
        GET /http_chunked.adp?stream=0&bufsize=8
} -result "200 chunked keep-alive {} {a\n0123456789\n5\n01234\n0\n\n}"


test http_chunked-1.4 {
    ADP auto-streaming to HTTP/1.0 client
} -constraints serverListen -body {
    nstest::http -http 1.0 -setheaders {Connection keep-alive} \
        -getheaders {Transfer-Encoding Connection Content-Length} -getbody t \
        GET /http_chunked.adp?stream=1&bufsize=8
} -result {200 {} close {} 012345678901234}


test http_chunked-2.1 {
    Tcl streaming w/chunks to HTTP/1.1 client
} -constraints {serverListen http09} -setup {
    ns_register_proc GET /tclchunked {
        ns_headers 200 text/plain
        ns_write 0123456789
        ns_write 01234
    }
} -body {
    nstest::http-0.9 -http 1.1 -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        GET /tclchunked
} -cleanup {
    ns_unregister_op GET /tclchunked
} -result "200 chunked {} {a\n0123456789\n5\n01234\n0\n\n}"


test http_chunked-2.1.1 {
    Tcl streaming multiple binary buffers w/chunks to HTTP/1.1 client
} -constraints {serverListen http09} -setup {
    ns_register_proc GET /tclchunked {
        ns_headers 200 text/plain
        ns_write [binary format a5 01234] [binary format a5 56789]
        ns_write [binary format a5 01234]
    }
} -body {
    nstest::http-0.9 -http 1.1 -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        GET /tclchunked
} -cleanup {
    ns_unregister_op GET /tclchunked
} -result "200 chunked {} {a\n0123456789\n5\n01234\n0\n\n}"


test http_chunked-2.2 {Tcl streaming to HTTP/1.0 client} -constraints serverListen -setup {
    ns_register_proc GET /tclchunked {
        ns_headers 200 text/plain
        ns_write 0123456789
        ns_write 01234
    }
} -body {
    nstest::http -http 1.0 -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        GET /tclchunked
} -cleanup {
    ns_unregister_op GET /tclchunked
} -result {200 {} {} 012345678901234}


test http_chunked-2.3 {
    Tcl response of known size to HTTP/1.1 client
} -constraints serverListen -setup {
    ns_register_proc GET /tclchunked {ns_return 200 text/plain 01234}
} -body {
    nstest::http -http 1.1 -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        GET /tclchunked
} -cleanup {
    ns_unregister_op GET /tclchunked
} -result {200 {} 5 01234}


test http_chunked-2.4.0 {

    PUT request with invalid chunked content.
    providing a negative length

} -constraints {serverListen http09} -setup {
    ns_register_proc PUT /tclchunked {
        set content [ns_conn content]
        #ns_log notice "PUT received <$content>"
        ns_return 200 text/plain $content
    }
} -body {
    nstest::http-0.9 -http 1.1 \
        -omitcontentlength 1 \
        -setheaders {Transfer-Encoding Chunked} \
        -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        PUT /tclchunked "-1\r\nchunk\r\n0\r\n\r\n"
} -cleanup {
    ns_unregister_op PUT /tclchunked
} -result {400 {} {}}


test http_chunked-2.4.1 {

    PUT request with chunked data and invalid length
    (no hex encoded data)

} -constraints {serverListen http09} -setup {
    ns_register_proc PUT /tclchunked {
        set content [ns_conn content]
        #ns_log notice "PUT received <$content>"
        ns_return 200 text/plain $content
    }
} -body {
    nstest::http-0.9 -http 1.1 \
        -omitcontentlength 1 \
        -setheaders {Transfer-Encoding Chunked} \
        -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        PUT /tclchunked "x\r\nD\r\n0\r\n\r\n"
} -cleanup {
    ns_unregister_op PUT /tclchunked
} -result {400 {} {}}


test http_chunked-2.4.2 {

    PUT request with invalid chunked content. Server receives much
    less data than announced via chunk lengthw. Server will wait for
    more data, and runs after some time into a timeout.

} -constraints {serverListen http09} -setup {
    ns_register_proc PUT /tclchunked {
        set content [ns_conn content]
        #ns_log notice "PUT received <$content>"
        ns_return 200 text/plain $content
    }
} -body {
    set result {}
    set errorMsg {}
    try {
        nstest::http-0.9 -http 1.1 \
            -omitcontentlength 1 \
            -setheaders {Transfer-Encoding Chunked Connections close} \
            -getheaders {Transfer-Encoding Content-Length} \
            PUT /tclchunked "ffffffff\r\nchunk\r\n0\r\n\r\n"
    } on error {errorMsg} {
    } on ok {result} {
    }
    list errorMsg $errorMsg result $result
} -cleanup {
    ns_unregister_op PUT /tclchunked
    unset result errorMsg
} -result {errorMsg {} result {}}


test http_chunked-2.4.3 {

    PUT request with chunked data and a chunk extension.

} -constraints {serverListen http09} -setup {
    ns_register_proc PUT /tclchunked {
        set content [ns_conn content]
        #ns_log notice "PUT received <$content>"
        ns_return 200 text/plain $content
    }
} -body {
    nstest::http-0.9 -http 1.1 \
        -omitcontentlength 1 \
        -setheaders {Transfer-Encoding Chunked} \
        -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        PUT /tclchunked "1;last\r\nD\r\n0\r\n\r\n"
} -cleanup {
    ns_unregister_op PUT /tclchunked
} -returnCodes {ok} -result {200 {} 1 D}



test http_chunked-3.1 {

    PUT with Transfer-Encoding Chunked and unknown Content-Length (but
    provided X-Expected-Entity-Length). This is the format that WebDAV
    client of macOS uses (via Finder).

} -constraints {serverListen http09} -setup {
    ns_register_proc PUT /tclchunked {
        set content [ns_conn content]
        #ns_log notice "PUT received <$content>"
        ns_return 200 text/plain $content
    }
} -body {
    nstest::http-0.9 -http 1.1 \
        -omitcontentlength 1 \
        -setheaders {Transfer-Encoding Chunked X-Expected-Entity-Length 13} \
        -getheaders {Transfer-Encoding Content-Length} -getbody 1 \
        PUT /tclchunked "0A\r\n1234567890\r\n03\r\nabc"
} -cleanup {
    ns_unregister_op PUT /tclchunked
} -result {200 {} 13 1234567890abc}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
