# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test ns_server-1.0 {basic syntax: plain call} -body {
    ns_server
} -returnCodes error -result {wrong # args: should be "ns_server ?-server /server/? ?-pool /string/? ?--? /subcmd/ ?args?"}

test ns_server-1.1 {basic syntax: wrong argument} -body {
    ns_server ?
} -returnCodes error -result {bad option "?": must be active, all, connectionratelimit, connections, filters, hosts, keepalive, map, mapped, maxthreads, minthreads, pagedir, poolratelimit, pools, queued, requestprocs, serverdir, stats, tcllib, threads, traces, unmap, url2file, vhostenabled, or waiting}


test ns_server-1.2.1 {syntax: ns_server active} -body {
    ns_server active "" -
} -returnCodes error -result {wrong # args: should be "ns_server active ?-checkforproxy?"}

test ns_server-1.2.2 {syntax: ns_server all} -body {
    ns_server all "" -
} -returnCodes error -result {wrong # args: should be "ns_server all ?-checkforproxy?"}

test ns_server-1.2.3 {syntax: ns_server connectionratelimit} -body {
    ns_server connectionratelimit 1 -
} -returnCodes error -result {wrong # args: should be "ns_server connectionratelimit ?connectionratelimit[-1,MAX]?"}

test ns_server-1.2.4 {syntax: ns_server connections} -body {
    ns_server connections "" -
} -returnCodes error -result {wrong # args: should be "ns_server connections"}

test ns_server-1.2.5 {syntax: ns_server filters} -body {
    ns_server filters "" -
} -returnCodes error -result {wrong # args: should be "ns_server filters"}

test ns_server-1.2.6 {syntax: ns_server hosts} -body {
    ns_server hosts -
} -returnCodes error -result {wrong # args: should be "ns_server hosts"}

test ns_server-1.2.7 {syntax: ns_server keepalive} -body {
    ns_server keepalive "" -
} -returnCodes error -result {wrong # args: should be "ns_server keepalive"}

test ns_server-1.2.8 {syntax: ns_server map} -body {
    ns_server map - -
} -returnCodes error -result {wrong # args: should be "ns_server map ?-noinherit? ?mapspec?"}

test ns_server-1.2.9 {syntax: ns_server mapped} -body {
    ns_server mapped
} -returnCodes error -result {wrong # args: should be "ns_server mapped ?-all? ?-exact? ?-noinherit? /mapspec/"}

test ns_server-1.2.10 {syntax: ns_server maxthreads} -body {
    ns_server maxthreads 2 2 -
} -returnCodes error -result {wrong # args: should be "ns_server maxthreads ?maxthreads[2,100]?"}

test ns_server-1.2.11 {syntax: ns_server minthreads} -body {
    ns_server minthreads 2 2 -
} -returnCodes error -result {wrong # args: should be "ns_server minthreads ?minthreads[1,10]?"}

test ns_server-1.2.12 {syntax: ns_server pagedir} -body {
    ns_server pagedir -
} -returnCodes error -result {wrong # args: should be "ns_server pagedir"}

test ns_server-1.2.13 {syntax: ns_server poolratelimit} -body {
    ns_server poolratelimit 1000 -
} -returnCodes error -result {wrong # args: should be "ns_server poolratelimit ?poolratelimit[-1,MAX]?"}

test ns_server-1.2.14 {syntax: ns_server pools} -body {
    ns_server pools "" -
} -returnCodes error -result {wrong # args: should be "ns_server pools"}

test ns_server-1.2.16 {syntax: ns_server requestprocs} -body {
    ns_server requestprocs -
} -returnCodes error -result {wrong # args: should be "ns_server requestprocs"}

test ns_server-1.2.17 {syntax: ns_server serverdir} -body {
    ns_server serverdir -
} -returnCodes error -result {wrong # args: should be "ns_server serverdir"}

test ns_server-1.2.18 {syntax: ns_server stats} -body {
    ns_server stats -
} -returnCodes error -result {wrong # args: should be "ns_server stats"}

test ns_server-1.2.19 {syntax: ns_server tcllib} -body {
    ns_server tcllib -
} -returnCodes error -result {wrong # args: should be "ns_server tcllib"}

test ns_server-1.2.20 {syntax: ns_server threads} -body {
    ns_server threads "" x
} -returnCodes error -result {wrong # args: should be "ns_server threads"}

test ns_server-1.2.21 {syntax: ns_server traces} -body {
    ns_server traces -
} -returnCodes error -result {wrong # args: should be "ns_server traces"}

test ns_server-1.2.22 {syntax: ns_server unmap} -body {
    ns_server unmap
} -returnCodes error -result {wrong # args: should be "ns_server unmap ?-noinherit? /mapspec/"}

test ns_server-1.2.23 {syntax: ns_server url2file} -body {
    ns_server url2file -
} -returnCodes error -result {wrong # args: should be "ns_server url2file"}

test ns_server-1.2.24 {syntax: ns_server vhostenabled} -body {
    ns_server vhostenabled -
} -returnCodes error -result {wrong # args: should be "ns_server vhostenabled"}

test ns_server-1.2.25 {syntax: ns_server waiting} -body {
    ns_server waiting - x
} -returnCodes error -result {wrong # args: should be "ns_server waiting"}





test ns_server-1.3.1 {plain call, option but no argument} -body {
    ns_server -pool {}
} -returnCodes error -result {wrong # args: should be "ns_server ?-server /server/? ?-pool /string/? ?--? /subcmd/ ?args?"}

test ns_server-1.3.2 {plain call, option but no argument} -body {
    ns_server -pool {} --
} -returnCodes error -result {wrong # args: should be "ns_server ?-server /server/? ?-pool /string/? ?--? /subcmd/ ?args?"}

test ns_server-1.4.1 {plain call, option but no argument} -body {
    ns_server -server test
} -returnCodes error -result {wrong # args: should be "ns_server ?-server /server/? ?-pool /string/? ?--? /subcmd/ ?args?"}

test ns_server-1.4.2 {plain call, option but no argument} -body {
    ns_server -server test --
} -returnCodes error -result {wrong # args: should be "ns_server ?-server /server/? ?-pool /string/? ?--? /subcmd/ ?args?"}

test ns_server-1.5 {provide invalid server argument} -body {
    ns_server -server foo
} -returnCodes error -result {invalid server: 'foo'}


#
# Testing ns_server active|all|queued
#

test ns_server-2.0.0 {provide valid "ns_server active" argument} -body {
    ns_server active
} -match exact -result ""

test ns_server-2.0.1 {provide valid "ns_server active" argument} -body {
    ns_server active -checkforproxy
} -match exact -result ""

test ns_server-2.0.1 {provide invalid "ns_server active" argument} -body {
    ns_server active -dummy
}  -returnCodes error -result {wrong # args: should be "ns_server active ?-checkforproxy?"}

test ns_server-2.0.3 {get values from an active connection} -setup {
    ns_register_proc GET /run {
        ns_return 200 text/plain [ns_server active]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 GET /run
} -cleanup {
    ns_unregister_op GET /run
} -match glob -result "200 *cns*running GET /run *"

test ns_server-2.0.4.1 {get values from an active connection with -checkforproxy} -setup {
    ns_register_proc GET /run {
        ns_return 200 text/plain [ns_server active -checkforproxy]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 GET /run
} -cleanup {
    ns_unregister_op GET /run
} -match glob -result "200 *cns*running GET /run *"

test ns_server-2.0.4.2 {get values from an active connection with -checkforproxy} -setup {
    ns_register_proc GET /run {
        ns_return 200 text/plain [ns_server active -checkforproxy]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 -setheaders [list x-forwarded-for 1.2.3.4] GET /run
} -cleanup {
    ns_unregister_op GET /run
} -match glob -result "200 *cns*1.2.3.4*running GET /run *"



test ns_server-2.0.5 {get queued values from an active connection} -setup {
    ns_register_proc GET /run {
        ns_return 200 text/plain [ns_server queued]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 GET /run
} -cleanup {
    ns_unregister_op GET /run
} -match glob -result "200"

test ns_server-2.0.6 {get all values from an active connection} -setup {
    ns_register_proc GET /run {
        ns_return 200 text/plain [ns_server all]
    }
} -body {
    nstest::http -http 1.1 -getbody 1 GET /run
} -cleanup {
    ns_unregister_op GET /run
} -match glob -result "200 *cns*running GET /run *"

#
# Continue with "basic" tests
#

test ns_server-2.1 {basic operation} -body {
    string is integer -strict [ns_server connections]
} -match exact -result 1

test ns_server-2.2 {basic operation} -body {
    ns_server maxthreads
} -match exact -result 10

test ns_server-2.3 {basic operation} -body {
    ns_server minthreads
} -match exact -result 2

test ns_server-2.3.1 {set minthreads} -body {
    ns_server minthreads 1
} -match exact -result 1

test ns_server-2.3.2 {query modified minthreads} -body {
    ns_server minthreads
} -match exact -result 1

test ns_server-2.3.3 {provided too large minthreads value} -body {
    ns_server minthreads 100
} -returnCodes error -result {expected integer in range [1,10] for '?minthreads', but got 100}

test ns_server-2.3.4.1 {query alternate pool from default server} -body {
    ns_server -pool emergency maxthreads
} -match exact -result 1

test ns_server-2.3.4.2 {query alternate pool from specified server} -body {
    ns_server -server test -pool emergency maxthreads
} -match exact -result 1

test ns_server-2.3.4.3 {query alternate pool from incorrect server} -body {
    ns_server -server testvhost -pool emergency maxthreads
} -returnCodes error -result {no such pool 'emergency' for server 'testvhost'}

test ns_server-2.3.5.1 {query alternate pool from server "test"} -body {
    ns_server -server test maxthreads
} -match exact -result 10

test ns_server-2.3.5.2 {query alternate pool from server "testvhost"} -body {
    ns_server -server testvhost maxthreads
} -match exact -result 3

test ns_server-2.3.5.3 {query alternate pool from server "testvhost2"} -body {
    ns_server -server testvhost2 maxthreads
} -match exact -result 4


test ns_server-2.4.1.0 {query pools from default server} -body {
    ns_server pools
} -match exact -result "emergency {}"

test ns_server-2.4.1.1 {query pools with explicit -server "test"} -body {
    ns_server -server test pools
} -match exact -result "emergency {}"

test ns_server-2.4.1.2 {query pools with explicit -server "testvhost"} -body {
    ns_server -server testvhost pools
} -match exact -result "{}"

test ns_server-2.4.1.3 {query pools with explicit -server "testvhost2"} -body {
    ns_server -server testvhost2 pools
} -match exact -result "{}"

test ns_server-2.4.2 {query hosts from default server} -body {
    lsort [ns_server hosts]
} -match glob -result "example.com:* test:* test:*"


test ns_server-2.5 {basic operation} -body {
    dict size [ns_server stats]
} -match exact -result 11

test ns_server-2.6 {basic operation} -body {
    dict size [ns_server threads]
} -match exact -result 5

test ns_server-2.7 {basic operation} -body {
    ns_server waiting
} -match exact -result 0

test ns_server-2.8 {register filter and query} -setup {
    proc _filter_do_nothing {args} {
        return filter_ok
    }
    ns_register_filter preauth GET /ns_server-2.8 _filter_do_nothing
} -body {
    ns_server filters
} -match glob -result {*{GET /ns_server-2.8 preauth ns:tclfilter _filter_do_nothing}*}

test ns_server-2.9 {basic operation} -body {
    expr {[llength [ns_server traces]] == 1}
} -result 1

test ns_server-2.10 {basic operation} -body {
    expr {[llength [ns_server requestprocs]]>1}
} -result 1

test ns_server-2.11 {basic operation} -body {
    expr {[llength [split [ns_server pagedir] "/"]]>1}
} -result 1

test ns_server-2.12 {basic operation} -body {
    ns_server tcllib
} -match "glob" -result "*modules*"

test ns_server-2.13.1 {basic operation} -body {
    ns_server serverdir
} -match "glob" -result "*tests/testserver"

test ns_server-2.13.2 {basic operation} -body {
    ns_server -server test serverdir
} -match "glob" -result "*tests/testserver"

test ns_server-2.13.3 {basic operation} -body {
    ns_server -server testvhost serverdir
} -match "glob" -result "*tests/testserver"

test ns_server-2.13.4 {basic operation} -body {
    ns_server -server testvhost2 serverdir
} -match "glob" -result "*tests/testserver"


test ns_server-2.14.1 {query alternate pool from default server} -body {
    ns_server -server test vhostenabled
} -match exact -result 0

test ns_server-2.14.2 {query alternate pool from specified server} -body {
    ns_server -server testvhost vhostenabled
} -match exact -result 1


#
# Test mapping/unmapping of requests to connection pools.
# Test with the pool "emergency"
#
# Initially, the mapping of the "emergency" pool should be empty.

test ns_server-2.14.1 {basic operation} -body {
    ns_server -pool emergency map
} -result {}

test ns_server-2.14.1a {basic operation with invalid pool} -body {
    ns_server -pool emergencyx map
} -returnCodes error -result {no such pool 'emergencyx' for server 'test'}

test ns_server-2.14.1b {basic operation with invalid mapspec} -body {
    ns_server -pool emergency map "XXX"
} -returnCodes error -result {invalid mapspec 'XXX'; must be 2- or 3-element list containing HTTP method, plain URL path, and optionally a filtercontext}


#
# Map some GET request, query the mapping, and unmap the GET requests
#
test ns_server-2.14.2 {mapping and unmapping of requests} -setup {
    ns_server -pool emergency map "GET /foo"
} -body {
    ns_server -pool emergency map
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -result {{GET /foo * inherit}}

#
# After cleanup, the map should be empty again.
#
test ns_server-2.14.3 {check, if cleanup of last test was successful} -body {
    ns_server -pool emergency map
} -result {}

#
# Map some GET request, query the mapping, and unmap the GET requests
#
test ns_server-2.14.4a {mapping and unmapping of requests, return mapping} -setup {
    ns_server -pool emergency map "GET /foo"
    ns_server -pool emergency map "GET /* {X-NS-ip 127.0.0.1}"
} -body {
    ns_server mapped "GET /foo"
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -result {emergency}

test ns_server-2.14.4b {mapping and unmapping of requests, return mapping} -setup {
    ns_server -pool emergency map "GET /foo"
    ns_server -pool emergency map "GET /* {X-NS-ip 127.0.0.1}"
} -body {
    ns_server mapped -all "GET /foo"
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -result {pool emergency handler {ns:fastpath a:0x0}}

#
# Map some GET request, query the mapping, and unmap the GET requests
#
test ns_server-2.14.5a {mapping and unmapping of requests, return mapping with inheritance} -setup {
    ns_server -pool emergency map "GET /foo/*.png"
} -body {
    return [list \
                [ns_server mapped "GET /foo"] \
                [ns_server mapped "GET /foo/1.png"] \
                [ns_server mapped "GET /foo/bar/2.png"]]
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -result {{} emergency emergency}

test ns_server-2.14.5b {mapping and unmapping of requests, return mapping with inheritance} -setup {
    ns_server -pool emergency map "GET /foo/*.png"
} -body {
    return [list \
                [ns_server mapped -all "GET /foo"] \
                [ns_server mapped -all "GET /foo/1.png"] \
                [ns_server mapped -all "GET /foo/bar/2.png"]]
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -result {{pool {} handler {ns:fastpath a:0x0}} {pool emergency handler {ns:fastpath a:0x0}} {pool emergency handler {ns:fastpath a:0x0}}}

test ns_server-2.14.5c {providing invalid URL path} -setup {
    ns_server -pool emergency map "GET /foo/*.png"
} -body {
    return [list \
                [ns_server mapped -all "GET /foo?X=1"] \
                [ns_server mapped -all "GET /foo/bar/2.png"]]
} -cleanup {
    ns_server -pool emergency unmap "GET /foo"
} -returnCodes {error ok} -result {invalid mapspec 'GET /foo?X=1'; must be 2- or 3-element list containing HTTP method, plain URL path, and optionally a filtercontext}



#
# Filter tests
#
test ns_server-3.1 {
    Register filter with web-call,
    returning filter_ok,
    serving no content
} -setup {
    ns_register_filter preauth GET /ns_server-3.1 ::_ns_filter_test filter_ok
} -body {
    nstest::http GET /ns_server-3.1
} -result {404}

test ns_server-3.2 {
    Register filter with web-call,
    returning filter_return,
    serving some content
} -setup {
    ns_register_filter preauth GET /ns_server-3.2 ::_ns_filter_test filter_return {
        ns_return 200 text/plain OK
    }
} -body {
    nstest::http -getheaders {content-length} GET /ns_server-3.2
} -result {200 2}

test ns_server-3.3 {
    Register filter with web-call,
    returning filter_break,
    serving no content
} -setup {
    ns_register_filter preauth GET /ns_server-3.3 ::_ns_filter_test filter_break {
        #ns_log notice "inside the filter 3.3"
    }
} -body {
    nstest::http GET /ns_server-3.3
} -result {404}

test ns_server-3.4 {
    Register filter with web-call,
    returning filter_break,
    serving some content
} -setup {
    ns_register_filter preauth GET /ns_server-3.4 ::_ns_filter_test filter_break {
        #ns_log notice "inside the filter 3.4"
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {content-length} GET /ns_server-3.4
} -result {200 2}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
