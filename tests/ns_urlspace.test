# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

#
# ns_urlspace
#
test ns_urlspace-1.0 {basic operation} -body {
     ns_urlspace
} -returnCodes error -result {wrong # args: should be "ns_urlspace command ?args?"}

test ns_urlspace-1.1 {basic operation} -body {
     ns_urlspace x
} -returnCodes error -result {bad subcmd "x": must be get, list, new, set, or unset}

test ns_urlspace-1.2 {basic operation get} -body {
     ns_urlspace get
} -returnCodes error -result {wrong # args: should be "ns_urlspace get ?-context context? ?-exact? ?-id id[-1,16]? ?-key key? ?-noinherit? URL"}
test ns_urlspace-1.3 {basic operation set} -body {
     ns_urlspace set
} -returnCodes error -result {wrong # args: should be "ns_urlspace set ?-contextfilter contextfilter? ?-id id[-1,16]? ?-key key? ?-noinherit? URL data"}
test ns_urlspace-1.4 {basic operation unset} -body {
     ns_urlspace unset
} -returnCodes error -result {wrong # args: should be "ns_urlspace unset ?-allfilters? ?-id id[-1,16]? ?-key key? ?-noinherit? ?-recurse? URL"}
test ns_urlspace-1.5 {nothing set} -body {
     ns_urlspace get /
} -result {}


test ns_urlspace-2.1.0 {flat set/get/unset/list} -setup {
    ns_urlspace set / foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace unset /] \
        [ns_urlspace unset /] \
        [ns_urlspace get /] \
        [ns_urlspace list]
} -result {foo 1 0 {} {}}

test ns_urlspace-2.1.1 {flat set/get/unset/list, map with query variables} -setup {
    ns_urlspace set / foo
    ns_urlspace set /?x=1 bar
    ns_urlspace set /?x=2 baz
} -body {
    list  \
        [ns_urlspace get /] \
        [ns_urlspace get /?x=1] \
        [ns_urlspace get /?x=2] \
        [ns_urlspace unset /] \
        [ns_urlspace unset /?x=1] \
        [ns_urlspace unset /?x=2] \
        [ns_urlspace get /] \
        [ns_urlspace get /?x=1] \
        [ns_urlspace get /?x=2] \
        [ns_urlspace list]
} -result {foo bar baz 1 1 1 {} {} {} {}}


test ns_urlspace-2.2.0 {flat noinherit set/list/unset/list} -setup {
    #ns_log notice "BEFORE <[ns_urlspace list]>"
    ns_urlspace set /x foo
    ns_urlspace set -noinherit /y bar
} -body {
    ns_urlspace list
} -cleanup {
    ns_urlspace unset /x
    ns_urlspace unset -noinherit /y
} -result {{. /x * inherit foo} {. /y * noinherit bar}}


test ns_urlspace-2.2.1 {flat noinherit set/list/unset/list} -setup {
    ns_urlspace set / foo
    ns_urlspace set /x foo
    ns_urlspace set -noinherit /y bar
} -body {
    ns_urlspace list
} -cleanup {
    ns_urlspace unset /
    ns_urlspace unset /x
    ns_urlspace unset -noinherit /y
} -result {{. /x * inherit foo} {. /y * noinherit bar} {. / * inherit foo}}


test ns_urlspace-2.2.2 {flat noinherit set/list/unset/list} -setup {
    #ns_log notice "BEFORE <[ns_urlspace list]>"
    ns_urlspace set /x foo
    ns_urlspace set -noinherit /y bar
} -body {
    list \
        [ns_urlspace list] \
        [ns_urlspace unset /x] \
        [ns_urlspace unset /y] \
        [ns_urlspace list] \
        [ns_urlspace unset -noinherit /y] \
        [ns_urlspace list]
} -result {{{. /x * inherit foo} {. /y * noinherit bar}} 1 0 {{. /y * noinherit bar}} 1 {}}



test ns_urlspace-2.3 {tree set/get/unset/list} -setup {
    ns_urlspace set /x foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace unset /x] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} foo foo foo foo 1 {} {} {} {}}

test ns_urlspace-2.4 {tree noinherit set/get/unset/list} -setup {
    ns_urlspace set -noinherit /x foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace unset -noinherit /x] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} foo {} {} {} 1 {} {} {} {}}

test ns_urlspace-2.5 {tree+constant-filter set/get/unset/list} -setup {
    ns_urlspace set /x/a.html foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace unset /x] \
        [ns_urlspace unset /x/bar.html] \
        [ns_urlspace unset /x/a.html] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} {} {} {} foo 0 0 1 {} {} {} {}}

test ns_urlspace-2.6 {tree+constant-filter noinherit set/get/unset/list} -setup {
    ns_urlspace set -noinherit /x/a.html foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace unset -noinherit /x] \
        [ns_urlspace unset -noinherit /x/bar.html] \
        [ns_urlspace unset -noinherit /x/a.html] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} {} {} {} foo 0 0 1 {} {} {} {}}

test ns_urlspace-2.6 {tree+wild-card-filter set/list/unset/list} -setup {
    ns_urlspace set /x/*.html foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace unset /x] \
        [ns_urlspace unset /x/bar.html] \
        [ns_urlspace unset /x/*.html] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} {} {} {} foo 0 0 1 {} {} {} {}}

### i would expect in test 2-8 in element 5 and 6 a value
### "... set -noinherit /x/*.html foo" + ".... get /x/a.html"  ... should return a value
test ns_urlspace-2.8 {tree+wild-card-filter noinherit set/list/unset/list} -setup {
    ns_urlspace set -noinherit /x/*.html foo
} -body {
    list \
        [ns_urlspace get /] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace get /x/*.html] \
        [ns_urlspace unset -noinherit /x] \
        [ns_urlspace unset -noinherit /x/bar.html] \
        [ns_urlspace unset -noinherit /x/*.html] \
        [ns_urlspace get /x] \
        [ns_urlspace get /x/a] \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html]
    } -result {{} {} {} {} {} {} 0 0 1 {} {} {} {}}

test ns_urlspace-2.9 {tree+wild-card-filter} -setup {
    ns_urlspace set /foo* 123
    ns_urlspace set /TOP/foo* 345
} -body {
    list \
        [ns_urlspace get /foo] \
        [ns_urlspace get /foobar] \
        [ns_urlspace get /foo/] \
        [ns_urlspace get /foo/bar] \
        [ns_urlspace get /foobar/abc] \
        [ns_urlspace get /TOP/foo] \
        [ns_urlspace get /TOP/foo1] \
        [ns_urlspace get /TOP/foo/abc] \
        [ns_urlspace unset /foo*] \
        [ns_urlspace unset /TOP/foo*] \
        [ns_urlspace list] \
    } -result {123 123 123 {} {} 345 345 {} 1 1 {}}

test ns_urlspace-2.10 {tree+wild-card-filter with ext} -setup {
    ns_urlspace set /foo*.tcl 234
    ns_urlspace set /TOP/foo*.tcl 345
} -body {
    list \
        [ns_urlspace get /foo.tcl] \
        [ns_urlspace get /bar.tcl] \
        [ns_urlspace get /foo1.tcl] \
        [ns_urlspace get /foo/bar.tcl] \
        [ns_urlspace get /foo1/bar.tcl] \
        [ns_urlspace get /TOP/foo.tcl] \
        [ns_urlspace get /TOP/foo1.tcl] \
        [ns_urlspace get /TOP/foo1.html] \
        [ns_urlspace get /TOP/foo/bar/1.tcl] \
        [ns_urlspace unset /foo*.tcl] \
        [ns_urlspace unset /TOP/foo*.tcl] \
        [ns_urlspace list] \
    } -result {234 {} 234 {} {} 345 345 {} {} 1 1 {}}

test ns_urlspace-2.11 {tree+wild-card-filter exact set/list/unset/list} -setup {
    ns_urlspace set /x/*.html foo
} -body {
    list \
        [ns_urlspace get -exact /] \
        [ns_urlspace get -exact /x] \
        [ns_urlspace get -exact /x/a] \
        [ns_urlspace get -exact /x/a.tcl] \
        [ns_urlspace get -exact /x/a.html] \
        [ns_urlspace get -exact /x/*.html] \
        [ns_urlspace unset /x] \
        [ns_urlspace unset /x/bar.html] \
        [ns_urlspace unset /x/*.html] \
        [ns_urlspace list] \
    } -result {{} {} {} {} {} foo 0 0 1 {}}

#
# key
#

test ns_urlspace-3.1 {tree+wild-card-filter key set/list/unset/list} -setup {
    ns_urlspace set -key . /x/*.html foo
    ns_urlspace set -key a /x/*.html bar
} -body {
    list \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace get /x/*.html] \
        [ns_urlspace get /x/y/a.html] \
        [ns_urlspace get -key a /x/a.html] \
        [ns_urlspace get -key a /x/y/a.html] \
        [ns_urlspace get -key b /x/a.html] \
        [ns_urlspace get -key b /x/y/a.html] \
        [ns_urlspace unset /x/*.html] \
        [ns_urlspace unset -key a /x/*.html] \
        [ns_urlspace list] \
    } -result {{} foo foo foo bar bar {} {} 1 1 {}}

test ns_urlspace-3.2 {tree+wild-card-filter key-with-spaces set/list/unset/list} -setup {
    ns_urlspace set -key "a b c" /x/*.html "d e f"
} -body {
    list \
        [ns_urlspace list] \
        [ns_urlspace unset -key "a b c" /x/*.html] \
        [ns_urlspace list] \
    } -result {{{{a b c} /x *.html inherit {d e f}}} 1 {}}

test ns_urlspace-3.3 {tree+wild-card-filter key set/list/unset/list} -setup {
    ns_urlspace set -key . /x/*.html foo
    ns_urlspace set -key a /x/*.html bar
    ns_urlspace set -key b /x/*.tcl baz
} -body {
    list \
        ":" \
        [ns_urlspace get /x/a.tcl] \
        [ns_urlspace get /x/a.html] \
        [ns_urlspace get /x/y/a.html] \
        "a:" \
        [ns_urlspace get -key a /x/a.tcl] \
        [ns_urlspace get -key a /x/a.html] \
        [ns_urlspace get -key a /x/y/a.html] \
        "*:" \
        [ns_urlspace get -key * /x/a.tcl] \
        [ns_urlspace get -key * /x/a.html] \
        [ns_urlspace get -key * /x/y/a.html]
    } -cleanup {
        ns_urlspace unset -key . /x/*.html
        ns_urlspace unset -key a /x/*.html
        ns_urlspace unset -key b /x/*.tcl
    } -result {: {} foo foo a: {} bar bar *: {} {} {}}


#
# id
#
test ns_urlspace-4.1 {id set/list/unset/list} -setup {
    set ID [ns_urlspace new]
    ns_urlspace set /x/*.html foo
    ns_urlspace set -id $ID /x/*.html bar
} -body {
    list \
        [ns_urlspace get /x/x.html] \
        [ns_urlspace get -id $ID /x/x.html] \
        [ns_urlspace unset /x/*.html] \
        [ns_urlspace unset -id $ID /x/*.html] \
        [ns_urlspace list] \
        [ns_urlspace list -id $ID] \
    } -cleanup {
        unset ID
    } -result {foo bar 1 1 {} {}}

#
# Test with different orderings
#
test ns_urlspace-5.1 {wild-card-filter with ordering} -setup {
    ns_urlspace set -key 5.1 /*        ADP
    ns_urlspace set -key 5.1 /*.adp    ADP
    ns_urlspace set -key 5.1 /*.tcl    TCL
    ns_urlspace set -key 5.1 /*.*      FILE
    ns_urlspace set -key 5.1 /static/* FILE
} -body {
    lmap url {
        /test.adp /test.txt /test.tcl /test
        /static/test.adp /static/test.txt /static/test.tcl /static/test
    } {
        ns_urlspace get -key 5.1 $url
    }
} -cleanup {
    ns_urlspace unset -key 5.1 /*
    ns_urlspace unset -key 5.1 /*.adp
    ns_urlspace unset -key 5.1 /*.tcl
    ns_urlspace unset -key 5.1 /*.*
    ns_urlspace unset -key 5.1 /static/*
} -result {ADP FILE TCL ADP FILE FILE FILE FILE}


test ns_urlspace-5.2 {wild-card-filter with different ordering} -setup {
    ns_urlspace set -key 5.2 /*.adp    ADP
    ns_urlspace set -key 5.2 /*.tcl    TCL
    ns_urlspace set -key 5.2 /static/* FILE
    ns_urlspace set -key 5.2 /*        ADP
    ns_urlspace set -key 5.2 /*.*      FILE
} -body {
    lmap url {
        /test.adp /test.txt /test.tcl /test
        /static/test.adp /static/test.txt /static/test.tcl /static/test
    } {
        ns_urlspace get -key 5.2 $url
    }
} -cleanup {
    ns_urlspace unset -key 5.2 /*
    ns_urlspace unset -key 5.2 /*.adp
    ns_urlspace unset -key 5.2 /*.tcl
    ns_urlspace unset -key 5.2 /*.*
    ns_urlspace unset -key 5.2 /static/*
} -result {ADP FILE TCL ADP FILE FILE FILE FILE}

test ns_urlspace-5.3 {wild-card-filter with different ordering} -setup {
    ns_urlspace set -key 5.3 /*.adp    ADP
    ns_urlspace set -key 5.3 /*.tcl    TCL
    ns_urlspace set -key 5.3 /static/* FILE
    ns_urlspace set -key 5.3 /*.*      FILE
    ns_urlspace set -key 5.3 /*        ADP
} -body {
    lmap url {
        /test.adp /test.txt /test.tcl /test
        /static/test.adp /static/test.txt /static/test.tcl /static/test
    } {
        ns_urlspace get -key 5.3 $url
    }
} -cleanup {
    ns_urlspace unset -key 5.3 /*
    ns_urlspace unset -key 5.3 /*.adp
    ns_urlspace unset -key 5.3 /*.tcl
    ns_urlspace unset -key 5.3 /*.*
    ns_urlspace unset -key 5.3 /static/*
} -result {ADP FILE TCL ADP FILE FILE FILE FILE}


##############################################################
# context filter
##############################################################

test ns_urlspace-6.1.0 {

    Context filters: constraint definition (for bots) on generic
    filter (/*), but no context provided.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    #ns_urlspace set -key 6.1 /*        A
    ns_urlspace set -key 6.1 /static/* B
    #ns_log notice "\n[ns_urlspace list]"
} -body {
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A {} {} B B B}


test ns_urlspace-6.1.1 {

    Context filters: constraint definition (for bots) on generic
    filter (/*), matching context provided.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    #ns_urlspace set -key 6.1 /*        A
    ns_urlspace set -key 6.1 /static/* B
    #ns_log notice "\n[ns_urlspace list]"
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 -context $c1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A C C B B B}


test ns_urlspace-6.1.2 {

    Context filters: same setup as in next tests, but without context
    filters (as a reference).

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A D D B B B}


test ns_urlspace-6.1.3.1 {

    Context filters: like 6.1.2, but a context filter for bots added
    additionally to generic rule for "/*".  We call without a context
    and expect same results as in 6.1.2.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A D D B B B}


test ns_urlspace-6.1.3.2 {

    Context filters: same setup as in 6.1.3, but we call with a
    provided context that matches the filter. We expect the filter to
    kick in, since this is more specific than the plain "/*" rule.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 -context $c1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A C C B B B}


test ns_urlspace-6.1.4 {

    Context filters: same setup as in 6.1.3, but we call with a
    provided context that DOES NOT match the filter. We expect the
    same behavior an in 6.1.2.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "chrome"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 -context $c1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A D D B B B}


test ns_urlspace-6.1.5.1 {

    Context filters: same setup as in 6.1.3 with additionally one more
    rule for /* with a different filter (we have no two different
    filters for the same pattern. With a context matching the first
    pattern, we expect the same results as in 6.1.3.


} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {host foo.org} /* C2
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 -context $c1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A C1 C1 B B B}

test ns_urlspace-6.1.5.2 {

    Context filters: same setup as in 6.1.3 with additionally one more
    rule for /* with a different filter (we have no two different
    filters for the same pattern. With a context matching the first
    pattern, we expect the same results as in 6.1.3.


} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {host foo.org} /* C2
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "host" "foo.org"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        ns_urlspace get -key 6.1 -context $c1 $url
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {A C2 C2 B B B}


test ns_urlspace-6.1.5.3 {

    Context filters: same setup as in 6.1.3 with additionally one more
    rule for /* with a multiple filter (we have no two different
    filters for the same pattern). It shows that the order of the
    context pattern is not significant. Always the more specific url
    path pattern have the higher weight.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {user-agent *crawl*} /* C2
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    set c2 [ns_set create filter1]
    ns_set put $c2 "user-agent" "megaindex.com/crawler"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test
    } {
        list $url \
            [ns_urlspace get -key 6.1 $url] \
            [ns_urlspace get -key 6.1 -context $c1 $url] \
            [ns_urlspace get -key 6.1 -context $c2 $url]
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {{/test.adp A A A} {/test.txt D C1 C2} {/test D C1 C2} {/static/test.adp B B B} {/static/test B B B}}


test ns_urlspace-6.1.5.4 {

    Context filters: same setup as in 6.1.5.3 with multiple patterns
    matching the context.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {user-agent *crawl*} /* C2
    ns_urlspace set -key 6.1 -contextfilter {user-agent *googlebot*} /* C3
    ns_urlspace set -key 6.1 -contextfilter {user-agent "googlebot v1"} /* C4
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    set c2 [ns_set create filter1]
    ns_set put $c2 "user-agent" "megaindex.com/crawler"
    set c3 [ns_set create filter1]
    ns_set put $c3 "user-agent" "googlebot v1"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test
    } {
        list $url \
            [ns_urlspace get -key 6.1 $url] \
            [ns_urlspace get -key 6.1 -context $c1 $url] \
            [ns_urlspace get -key 6.1 -context $c2 $url] \
            [ns_urlspace get -key 6.1 -context $c3 $url]
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {{/test.adp A A A A} {/test.txt D C3 C2 C4} {/test D C3 C2 C4} {/static/test.adp B B B B} {/static/test B B B B}}

test ns_urlspace-6.1.5.5 {

    Context filters and "list" subcmd: same setup as in 6.1.5.4 with multiple patterns.
    matching the context patterns but defined in a different order.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {user-agent *crawl*} /* C2
    ns_urlspace set -key 6.1 -contextfilter {user-agent *googlebot*} /* C3
    ns_urlspace set -key 6.1 -contextfilter {user-agent "googlebot v1"} /* C4
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    set c2 [ns_set create filter1]
    ns_set put $c2 "user-agent" "megaindex.com/crawler"
    set c3 [ns_set create filter1]
    ns_set put $c3 "user-agent" "googlebot v1"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test
    } {
        list $url \
            [ns_urlspace get -key 6.1 $url] \
            [ns_urlspace get -key 6.1 -context $c1 $url] \
            [ns_urlspace get -key 6.1 -context $c2 $url] \
            [ns_urlspace get -key 6.1 -context $c3 $url]
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {{/test.adp A A A A} {/test.txt D C3 C2 C4} {/test D C3 C2 C4} {/static/test.adp B B B B} {/static/test B B B B}}

test ns_urlspace-6.1.6 {

    Context filters and "list" subcmd: same setup as in 6.1.5.4 with
    multiple patterns.

} -setup {
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {user-agent *crawl*} /* C2
    ns_urlspace set -key 6.1 -contextfilter {user-agent *googlebot*} /* C3
    ns_urlspace set -key 6.1 -contextfilter {user-agent "googlebot v1"} /* C4
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
} -body {
    join [ns_urlspace list] \n
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 -allfilters /*
    ns_urlspace unset -key 6.1 /static/*
} -result {6.1 / *.adp inherit A
6.1 /static * inherit B
6.1 / * inherit D
6.1 / * inherit {user-agent {googlebot v1}} C4
6.1 / * inherit {user-agent *googlebot*} C3
6.1 / * inherit {user-agent *crawl*} C2
6.1 / * inherit {user-agent *bot*} C1}

test ns_urlspace-6.2.0 {

    Context filters with IP address and filter: order: IPv6 before
    IPv4 before header based context filters, for every category more concrete
    before less concrete.

} -setup {
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.1.0/16} /* C2
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.31/24} /* C3
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.1.1} /* C4
    ns_urlspace set -key 6.1 -contextfilter {user-agent "googlebot v1"} /* C5
    ns_urlspace set -key 6.1 -contextfilter {user-agent "*googlebot*"} /* C6
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 2a03:2880:f107:83:face:b00c:0:25de} /* C7
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 2a03:2880::/29} /* C8
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.31} /* C9
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.33} /* C10
    ns_urlspace set -key 6.1 -contextfilter {user-agent *mozilla*6*} /* C11

} -body {
    join [ns_urlspace list] \n
} -cleanup {
    #ns_log notice "===== cleanup of 6.2.0"
    ns_urlspace unset -key 6.1 -allfilters /*
    #ns_log notice "===== cleanup of 6.2.0 DONE"
} -result {6.1 / * inherit {X-NS-ip 2a03:2880:f107:83:face:b00c:0:25de} C7
6.1 / * inherit {X-NS-ip 2a03:2880::/29} C8
6.1 / * inherit {X-NS-ip 137.208.116.33} C10
6.1 / * inherit {X-NS-ip 137.208.116.31} C9
6.1 / * inherit {X-NS-ip 137.208.1.1} C4
6.1 / * inherit {X-NS-ip 137.208.116.31/24} C3
6.1 / * inherit {X-NS-ip 137.208.1.0/16} C2
6.1 / * inherit {user-agent {googlebot v1}} C5
6.1 / * inherit {user-agent *googlebot*} C6
6.1 / * inherit {user-agent *mozilla*6*} C11
6.1 / * inherit {user-agent *bot*} C1}



test ns_urlspace-6.2.1 {

    Context filters with IP address and filter: test lookups

} -setup {
    ns_urlspace set -key 6.1 /* C0
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C1
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.1.0/16} /* C2
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.31/24} /* C3
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.1.1} /* C4
    ns_urlspace set -key 6.1 -contextfilter {user-agent "googlebot v1"} /* C5
    ns_urlspace set -key 6.1 -contextfilter {user-agent "*googlebot*"} /* C6
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 2a03:2880:f107:83:face:b00c:0:25de} /* C7
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 2a03:2880::/29} /* C8
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.31} /* C9
    ns_urlspace set -key 6.1 -contextfilter {X-NS-ip 137.208.116.33} /* C10
    ns_urlspace set -key 6.1 -contextfilter {user-agent *mozilla*6*} /* C11

} -body {
    set url /robots.txt
    set c1 [ns_set create filter1]
    ns_set put $c1 "X-NS-ip" "137.208.116.31"
    set c2 [ns_set create filter1]
    ns_set put $c2 "X-NS-ip" "137.208.116.32"
    set c3 [ns_set create filter1]
    ns_set put $c3 "X-NS-ip" "2a03:2880:f007:1:face:b00c:0:1"

    list \
        [ns_urlspace get -key 6.1 $url] \
        [ns_urlspace get -key 6.1 -context $c1 $url] \
        [ns_urlspace get -key 6.1 -context $c2 $url] \
        [ns_urlspace get -key 6.1 -context $c3 $url]
} -cleanup {
    #ns_log notice "===== cleanup of 6.2.0"
    ns_urlspace unset -key 6.1 -allfilters /*
    #ns_log notice "===== cleanup of 6.2.0 DONE"

} -result {C0 C9 C3 C8}


test ns_urlspace-6.3.1 {

    Context filters: constraint definition (for bots) on generic
    filter (/*) fires only when context is provided and context filter
    returns success.

} -setup {
    #ns_log notice "===== setup of 6.3.1"
    #ns_log notice "Start 6.3.1:\n<[ns_urlspace list]>"
    ns_urlspace set -key 6.1 /*.adp    A
    ns_urlspace set -key 6.1 -contextfilter {user-agent *bot*} /* C
    ns_urlspace set -key 6.1 /*        D
    ns_urlspace set -key 6.1 /static/* B
    #ns_log notice "===== setup of 6.3.1 DONE"
} -body {
    set c1 [ns_set create filter1]
    ns_set put $c1 "user-agent" "googlebot"
    set c2 [ns_set create filter2]
    ns_set put $c2 "user-agent" "Chrome"
    #ns_log notice "c1: [ns_set array $c1]"
    #ns_log notice "c2: [ns_set array $c2]"
    lmap url {
        /test.adp /test.txt /test
        /static/test.adp /static/test.tcl /static/test
    } {
        list \
            [ns_urlspace get -key 6.1 $url] \
            [ns_urlspace get -key 6.1 -context $c1 $url] \
            [ns_urlspace get -key 6.1 -context $c2 $url]
    }
} -cleanup {
    ns_urlspace unset -key 6.1 /*.adp
    ns_urlspace unset -key 6.1 /*
} -result {{A A A} {D C D} {D C D} {B B B} {B B B} {B B B}}
# -returnCodes error


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
