# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test ns_thread-1.0 {syntax: ns_thread} -body {
    ns_thread
} -returnCodes error -result {wrong # args: should be "ns_thread begin|begindetached|create|get|getid|handle|id|join|name|stackinfo|wait|yield ?/arg .../"}

test ns_thread-1.1 {syntax: ns_thread subcommands} -body {
    ns_thread ?
} -returnCodes error -result {ns_thread: bad subcommand "?": must be begin, begindetached, create, get, getid, handle, id, join, name, stackinfo, wait, or yield}

test ns_thread-1.2 {syntax: ns_thread create} -body {
    ns_thread create
} -returnCodes error -result {wrong # args: should be "ns_thread create ?-detached? ?-name /string/? ?--? /script/"}

test ns_thread-1.3 {syntax: ns_thread handle} -body {
    ns_thread handle -
} -returnCodes error -result {wrong # args: should be "ns_thread handle"}

test ns_thread-1.4 {syntax: ns_thread id} -body {
    ns_thread id -
} -returnCodes error -result {wrong # args: should be "ns_thread id"}

test ns_thread-1.5 {syntax: ns_thread name} -body {
    ns_thread name - -
} -returnCodes error -result {wrong # args: should be "ns_thread name ?/name/?"}

test ns_thread-1.6 {syntax: ns_thread stackinfo} -body {
    ns_thread stackinfo -
} -returnCodes error -result {wrong # args: should be "ns_thread stackinfo"}

test ns_thread-1.7 {syntax: ns_thread wait} -body {
    ns_thread wait
} -returnCodes error -result {wrong # args: should be "ns_thread wait /threadid/"}

test ns_thread-1.8 {syntax: ns_thread yield} -body {
    ns_thread yield -
} -returnCodes error -result {wrong # args: should be "ns_thread yield"}

# ns_mutex

test ns_mutex-1.0 {syntax: ns_mutex} -body {
    ns_mutex
} -returnCodes error -result {wrong # args: should be "ns_mutex create|destroy|eval|lock|trylock|unlock ?/arg .../"}

test ns_mutex-1.1 {syntax: ns_mutex subcommands} -body {
    ns_mutex ?
} -returnCodes error -result {ns_mutex: bad subcommand "?": must be create, destroy, eval, lock, trylock, or unlock}

test ns_mutex-1.2 {syntax: ns_mutex create} -body {
    ns_mutex create - -
} -returnCodes error -result {wrong # args: should be "ns_mutex create ?/name/?"}

test ns_mutex-1.3 {syntax: ns_mutex destroy} -body {
    ns_mutex destroy
} -returnCodes error -result {wrong # args: should be "ns_mutex destroy /mutexId/"}

test ns_mutex-1.4 {syntax: ns_mutex eval} -body {
    ns_mutex eval
} -returnCodes error -result {wrong # args: should be "ns_mutex eval /mutexId/ /script/"}

test ns_mutex-1.5 {syntax: ns_mutex lock} -body {
    ns_mutex lock
} -returnCodes error -result {wrong # args: should be "ns_mutex lock /mutexId/"}

test ns_mutex-1.6 {syntax: ns_mutex trylock} -body {
    ns_mutex trylock
} -returnCodes error -result {wrong # args: should be "ns_mutex trylock /mutexId/"}

test ns_mutex-1.7 {syntax: ns_mutex unlock} -body {
    ns_mutex unlock
} -returnCodes error -result {wrong # args: should be "ns_mutex unlock /mutexId/"}

# ns_critsec

test ns_critsec-1.0 {syntax: ns_critsec} -body {
    ns_critsec
} -returnCodes error -result {wrong # args: should be "ns_critsec create|destroy|enter|eval|leave ?/arg .../"}

test ns_critsec-1.1 {syntax: ns_critsec subcommands} -body {
    ns_critsec ?
} -returnCodes error -result {ns_critsec: bad subcommand "?": must be create, destroy, enter, eval, or leave}

test ns_critsec-1.2 {syntax: ns_critsec create} -body {
    ns_critsec create -
} -returnCodes error -result {wrong # args: should be "ns_critsec create"}

test ns_critsec-1.3 {syntax: ns_critsec destroy} -body {
    ns_critsec destroy
} -returnCodes error -result {wrong # args: should be "ns_critsec destroy /csid/"}

test ns_critsec-1.4 {syntax: ns_critsec enter} -body {
    ns_critsec enter
} -returnCodes error -result {wrong # args: should be "ns_critsec enter /csid/"}

test ns_critsec-1.5 {syntax: ns_critsec eval} -body {
    ns_critsec eval
} -returnCodes error -result {wrong # args: should be "ns_critsec eval /csid/ /script/"}

test ns_critsec-1.6 {syntax: ns_critsec leave} -body {
    ns_critsec leave
} -returnCodes error -result {wrong # args: should be "ns_critsec leave /csid/"}


# ns_sema

test ns_sema-1.0 {syntax: ns_sema} -body {
    ns_sema
} -returnCodes error -result {wrong # args: should be "ns_sema create|destroy|release|wait ?/arg .../"}
test ns_sema-1.1 {syntax: ns_sema subcommands} -body {
    ns_sema ?
} -returnCodes error -result {ns_sema: bad subcommand "?": must be create, destroy, release, or wait}

test ns_sema-1.2 {syntax: ns_sema create} -body {
    ns_sema create 1 -
} -returnCodes error -result {wrong # args: should be "ns_sema create ?/count/?"}

test ns_sema-1.3 {syntax: ns_sema destroy} -body {
    ns_sema destroy
} -returnCodes error -result {wrong # args: should be "ns_sema destroy /handle/"}

test ns_sema-1.4 {syntax: ns_sema release} -body {
    ns_sema release
} -returnCodes error -result {wrong # args: should be "ns_sema release /handle/ ?/count/?"}

test ns_sema-1.5 {syntax: ns_sema wait} -body {
    ns_sema wait
} -returnCodes error -result {wrong # args: should be "ns_sema wait /handle/"}


# ns_cond

test ns_cond-1.0 {syntax: ns_cond} -body {
    ns_cond
} -returnCodes error -result {wrong # args: should be "ns_cond abswait|broadcast|create|destroy|set|signal|wait ?/arg .../"}

test ns_cond-1.1 {syntax: ns_cond subcommands} -body {
    ns_cond ?
} -returnCodes error -result {ns_cond: bad subcommand "?": must be abswait, broadcast, create, destroy, set, signal, or wait}

test ns_cond-1.2 {syntax: ns_cond abswait} -body {
    ns_cond abswait
} -returnCodes error -result {wrong # args: should be "ns_cond abswait /condId/ /mutexId/ ?/epoch/?"}

test ns_cond-1.3 {syntax: ns_cond broadcast} -body {
    ns_cond broadcast
} -returnCodes error -result {wrong # args: should be "ns_cond broadcast /condId/"}

test ns_cond-1.4 {syntax: ns_cond create} -body {
    ns_cond create -
} -returnCodes error -result {wrong # args: should be "ns_cond create"}

test ns_cond-1.5 {syntax: ns_cond destroy} -body {
    ns_cond destroy
} -returnCodes error -result {wrong # args: should be "ns_cond destroy /condId/"}

test ns_cond-1.6 {syntax: ns_cond set} -body {
    ns_cond set
} -returnCodes error -result {wrong # args: should be "ns_cond set /condId/"}

test ns_cond-1.7 {syntax: ns_cond signal} -body {
    ns_cond signal
} -returnCodes error -result {wrong # args: should be "ns_cond signal /condId/"}

test ns_cond-1.8 {syntax: ns_cond wait} -body {
    ns_cond wait
} -returnCodes error -result {wrong # args: should be "ns_cond wait /condId/ /mutexId/ ?/timeout/?"}


# ns_rwlock

test ns_rwlock-1.0 {syntax: ns_rwlock} -body {
    ns_rwlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock create|destroy|readeval|readlock|readunlock|unlock|writeeval|writelock|writeunlock ?/arg .../"}

test ns_rwlock-1.1 {syntax: ns_rwlock subcommands} -body {
    ns_rwlock ?
} -returnCodes error -result {ns_rwlock: bad subcommand "?": must be create, destroy, readeval, readlock, readunlock, unlock, writeeval, writelock, or writeunlock}

test ns_rwlock-1.2 {syntax: ns_rwlock create} -body {
    ns_rwlock create -
} -returnCodes error -result {wrong # args: should be "ns_rwlock create"}

test ns_rwlock-1.3 {syntax: ns_rwlock destroy} -body {
    ns_rwlock destroy
} -returnCodes error -result {wrong # args: should be "ns_rwlock destroy /rwlockid/"}

test ns_rwlock-1.4 {syntax: ns_rwlock readeval} -body {
    ns_rwlock readeval
} -returnCodes error -result {wrong # args: should be "ns_rwlock readeval /rwlockid/ /script/"}

test ns_rwlock-1.5 {syntax: ns_rwlock readlock} -body {
    ns_rwlock readlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock readlock /rwlockid/"}

test ns_rwlock-1.6 {syntax: ns_rwlock readunlock} -body {
    ns_rwlock readunlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock readunlock /rwlockid/"}

test ns_rwlock-1.7 {syntax: ns_rwlock unlock} -body {
    ns_rwlock unlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock unlock /rwlockid/"}

test ns_rwlock-1.8 {syntax: ns_rwlock writeeval} -body {
    ns_rwlock writeeval
} -returnCodes error -result {wrong # args: should be "ns_rwlock writeeval /rwlockid/ /script/"}

test ns_rwlock-1.9 {syntax: ns_rwlock writelock} -body {
    ns_rwlock writelock
} -returnCodes error -result {wrong # args: should be "ns_rwlock writelock /rwlockid/"}

test ns_rwlock-1.10 {syntax: ns_rwlock writeunlock} -body {
    ns_rwlock writeunlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock writeunlock /rwlockid/"}


# general testing

test ns_thread-2.1 {detached thread} -body {
    ns_thread create -detached {return ok}
} -result {}

test ns_thread-2.2 {wait for thread thread} -body {
    set tid [ns_thread create {return ok}]
    set result [ns_thread wait $tid]
    list $tid $result
} -cleanup {
    unset -nocomplain -- tid result
} -match regexp -result {t(0x)?[a-z0-9]+-a(0x)?[a-z0-9]+-ns:thread ok}

test ns_thread-2.3 {get thread id of self} -body {
    ns_thread id
} -match regexp -result {[0-9]+}

test ns_thread-2.4 {thread name} -body {
    ns_thread wait [ns_thread create {ns_thread name threadtest}]
} -result {threadtest}

test ns_thread-2.5 {thread yield} -body {
    for {set i 0} {$i < 100} {incr i} {
        ns_thread create -detached {
            for {set i 0} {$i < 100} {incr i} {
                set x y
                ns_thread yield
            }
        }
    }
} -cleanup {
    unset -nocomplain -- i
} -result {}

test ns_thread-2.6 {get thread handle of self} -body {
    ns_thread handle
} -match regexp -result {^t.*ns:thread$}


test ns_thread-3.1 {create and destroy a mutex} -body {
    set mutex [ns_mutex create]
    ns_mutex destroy $mutex
    set mutex
}  -cleanup {
    unset -nocomplain -- mutex
} -returnCodes {ok error} -match regexp -result {ns:mutex:tcl:[0-9]+}

test ns_thread-3.2 {mutex locking, unnamed create} -body {
    set mutex [ns_mutex create]
    ns_mutex lock $mutex
    ns_mutex unlock $mutex
    ns_mutex destroy $mutex
}  -cleanup {
    unset -nocomplain -- mutex
} -returnCodes {ok error} -match glob -result {ns:mutex*}

test ns_thread-3.2.2 {mutex locking, named create} -body {
    set mutex [ns_mutex create mymutex]
    ns_mutex lock $mutex
    ns_mutex unlock $mutex
    ns_mutex destroy $mutex
}  -cleanup {
    unset -nocomplain -- mutex
} -returnCodes {ok error} -match glob -result {ns:mutex*}

test ns_thread-3.3 {named mutex locking, no create operation} -body {
    ns_mutex lock test:mutex
    ns_mutex unlock test:mutex
    ns_mutex destroy test:mutex
} -returnCodes {ok error} -result test:mutex

test ns_thread-3.4 {destroy a named mutex which doesn't exist} -body {
    ns_mutex destroy test:namedoesnotexist
} -returnCodes {ok error} -result {ns_mutex: could not convert 'test:namedoesnotexist' to mutex object}

test ns_thread-3.5 {mutex eval locked} -body {
    ns_mutex eval test:evalmutex {
        set a b
    }
} -cleanup {
    unset -nocomplain a
} -returnCodes {ok error}  -result b

test ns_thread-3.6 {mutex eval args} -body {
    ns_mutex eval test:evalmutex
} -returnCodes {ok error} -result {wrong # args: should be "ns_mutex eval /mutexId/ /script/"}

test ns_thread-3.7 {mutex eval args} -body {
    ns_mutex unlock mutex-[clock microseconds]
} -returnCodes {ok error} -match glob -result {ns_mutex: could not convert 'mutex-*' to mutex object}



test ns_thread-4.1 {create and destroy a critical section} -body {
    set cs [ns_critsec create]
    ns_critsec destroy $cs
    set cs
}  -cleanup {
    unset -nocomplain -- cs
} -match regexp -result {ns:critsec:tcl:[0-9]+}

test ns_thread-4.2 {enter and then leave a critical section} -body {
    set cs [ns_critsec create]
    ns_critsec enter $cs
    ns_critsec leave $cs
    ns_critsec destroy $cs
}  -cleanup {
    unset -nocomplain -- cs
} -match glob -result ns:critsec*

test ns_thread-4.3 {enter and then leave a named critical section} -body {
    ns_critsec enter test:cs
    ns_critsec leave test:cs
    ns_critsec destroy test:cs
} -result test:cs

test ns_thread-4.4 {critical section eval} -body {
    ns_critsec eval test:evalcs {
        set x 1
    }
} -cleanup {
    unset -nocomplain x
} -result 1

test ns_thread-4.5 {critical section eval args} -body {
    ns_critsec eval test:evalcs
} -returnCodes error -result {wrong # args: should be "ns_critsec eval /csid/ /script/"}


test ns_thread-5.1 {basic syntax} -body {
    ns_sema release .
} -returnCodes error -result {ns_sema: could not convert '.' to semaphore object}

test ns_thread-5.2 {create and destroy a semaphore} -body {
    set sema [ns_sema create]
    ns_sema destroy $sema
    set sema
}  -cleanup {
    unset -nocomplain -- sema
} -match regexp -result {ns:semaphore:tcl:[0-9]+}

test ns_thread-5.3 {create a semaphore with a count value} -body {
    set sema [ns_sema create 5]
}  -cleanup {
    unset -nocomplain -- sema
} -match regexp -result {ns:semaphore:tcl:[0-9]+}




test ns_thread-6.1 {create and destroy a read-write lock} -body {
    set rw [ns_rwlock create]
    ns_rwlock destroy $rw
    set rw
}  -cleanup {
    unset -nocomplain -- rw
} -match regexp -result {ns:rwlock:tcl:[0-9]+}

test ns_thread-6.2 {read lock} -body {
    set rw [ns_rwlock create]
    ns_rwlock readlock $rw
    ns_rwlock unlock $rw
    ns_rwlock destroy $rw
} -cleanup {
    unset -nocomplain -- rw
} -match glob -result ns:rwlock*

test ns_thread-6.3 {write lock} -body {
    set rw [ns_rwlock create]
    ns_rwlock writelock $rw
    ns_rwlock unlock $rw
    ns_rwlock destroy $rw
} -cleanup {
    unset -nocomplain -- rw
} -match glob -result ns:rwlock*

test ns_thread-6.4 {named rw lock} -body {
    ns_rwlock readlock test:rwlock
    ns_rwlock unlock test:rwlock
    ns_rwlock writelock test:rwlock
    ns_rwlock unlock test:rwlock
    ns_rwlock destroy test:rwlock
} -result test:rwlock

test ns_thread-6.5 {rwlock eval read-locked} -body {
    ns_rwlock readeval test:rwlock {
        set a b
    }
} -cleanup {
    unset -nocomplain a
} -result b

test ns_thread-6.6 {rwlock eval write-locked} -body {
    ns_rwlock writeeval test:rwlock {
        set a b
    }
} -cleanup {
    unset -nocomplain a
} -result b

test ns_thread-6.7 {rwlock readeval args} -body {
    ns_rwlock readeval test:rwlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock readeval /rwlockid/ /script/"}

test ns_thread-6.8 {rwlock writeeval args} -body {
    ns_rwlock writeeval test:rwlock
} -returnCodes error -result {wrong # args: should be "ns_rwlock writeeval /rwlockid/ /script/"}



cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
