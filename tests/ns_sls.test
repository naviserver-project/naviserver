# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv


test sls-1.1 {basic syntax} -body {
    ns_sls
} -returnCodes error -result {wrong # args: should be "ns_sls array|get|set|unset ?/args/"}

test sls-1.2 {basic syntax} -setup {
    ns_register_proc GET /sls-1.2 {
        set msg ""
        catch {ns_sls} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.2
} -cleanup {
    ns_unregister_op GET /sls-1.2
} -result {200 {wrong # args: should be "ns_sls array|get|set|unset ?/args/"}}

test sls-1.3 {basic syntax} -setup {
    ns_register_proc GET /sls-1.3 {
        set msg ""
        catch {ns_sls ?} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.3
} -cleanup {
    ns_unregister_op GET /sls-1.3
} -result {200 {ns_sls: bad subcommand "?": must be array, get, set, or unset}}

test sls-1.4 {syntax: ns_sls get} -setup {
    ns_register_proc GET /sls-1.4 {
        set msg ""
        catch {ns_sls get} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.4
} -cleanup {
    ns_unregister_op GET /sls-1.4
} -result {200 {wrong # args: should be "ns_sls get /key/ ?/default/?"}}

test sls-1.5 {syntax: ns_sls set} -setup {
    ns_register_proc GET /sls-1.5 {
        set msg ""
        catch {ns_sls set} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.5
} -cleanup {
    ns_unregister_op GET /sls-1.5
} -result {200 {wrong # args: should be "ns_sls set /key/ /value/"}}

test sls-1.6 {syntax: ns_sls unset} -setup {
    ns_register_proc GET /sls-1.6 {
        set msg ""
        catch {ns_sls unset} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.6
} -cleanup {
    ns_unregister_op GET /sls-1.6
} -result {200 {wrong # args: should be "ns_sls unset /key/"}}

test sls-1.7 {syntax: ns_sls array} -setup {
    ns_register_proc GET /sls-1.7 {
        set msg ""
        catch {ns_sls array x} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-1.7
} -cleanup {
    ns_unregister_op GET /sls-1.7
} -result {200 {wrong # args: should be "ns_sls array"}}


test sls-2.1 {set/get} -setup {
    ns_register_proc GET /sls-2.1 {
        ns_sls set x y
        ns_return 200 text/plain [ns_sls get x]
    }
} -body {
    nstest::http -getbody 1 GET /sls-2.1
} -cleanup {
    ns_unregister_op GET /sls-2.1
} -result {200 y}

test sls-2.2 {set/get missing} -setup {
    ns_register_proc GET /sls-2.2 {
        catch {ns_sls get x} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-2.2
} -cleanup {
    ns_unregister_op GET /sls-2.2
} -result {200 {key does not exist and no default given}}

test sls-2.3 {set/get w/ default} -setup {
    ns_register_proc GET /sls-2.3 {
        catch {ns_sls get x z} msg
        ns_return 200 text/plain $msg
    }
} -body {
    nstest::http -getbody 1 GET /sls-2.3
} -cleanup {
    ns_unregister_op GET /sls-2.3
} -result {200 z}

test sls-2.4 {list} -setup {
    ns_register_proc GET /sls-2.4 {
        ns_sls set x y
        ns_sls set a b
        ns_return 200 text/plain [lsort [ns_sls array]]
    }
} -body {
    nstest::http -getbody 1 GET /sls-2.4
} -cleanup {
    ns_unregister_op GET /sls-2.4
} -result {200 {a b x y}}

test sls-2.5 {unset} -setup {
    ns_register_proc GET /sls-2.5 {
        ns_sls set x y
        ns_sls unset x
        ns_return 200 text/plain [ns_sls get x none]
    }
} -body {
    nstest::http -getbody 1 GET /sls-2.5
} -cleanup {
    ns_unregister_op GET /sls-2.5
} -result {200 none}



#
# FIXME: Test persistence with keepalive connections...
#



cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
