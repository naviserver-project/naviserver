# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv



test ns_db-1.1 {basic syntax} -body {
    ns_db
} -returnCodes error -result {wrong # args: should be "ns_db option ?arg ...?"}

test ns_dbquotevalue-1 {basic syntax} -body {
    ns_dbquotevalue
} -returnCodes error -result {wrong # args: should be "ns_dbquotevalue value ?type?"}

test ns_dbquotevalue-2 {basic syntax} -body {
    ns_dbquotevalue ""
} -returnCodes {ok error} -result {NULL}
test ns_dbquotevalue-3 {basic syntax} -body {
    ns_dbquotevalue 10
} -returnCodes {ok error} -result {'10'}
test ns_dbquotevalue-3 {basic syntax} -body {
    ns_dbquotevalue "hello world"
} -returnCodes {ok error} -result {'hello world'}
test ns_dbquotevalue-4 {basic syntax} -body {
    ns_dbquotevalue "hello o'toole"
} -returnCodes {ok error} -result {'hello o''toole'}
test ns_dbquotevalue-5 {passing in value with objType "int"} -body {
    ns_dbquotevalue [expr {123}]
} -returnCodes {ok error} -result '123'
test ns_dbquotevalue-6 {string containing invalid value} -body {
    ns_dbquotevalue "1\x002"
} -returnCodes {ok error} -result "input string '1\x002' contains invalid characters"


test ns_dbquotelist-1 {basic syntax} -body {
    ns_dbquotelist
} -returnCodes error -result {wrong # args: should be "ns_dbquotelist list ?type?"}

test ns_dbquotelist-2 {basic syntax} -body {
    ns_dbquotelist ""
} -returnCodes {ok error} -result {}
test ns_dbquotelist-3.1 {basic syntax} -body {
    ns_dbquotelist 10
} -returnCodes {ok error} -result {'10'}
test ns_dbquotelist-3.2 {basic syntax} -body {
    ns_dbquotelist {1 2 3}
} -returnCodes {ok error} -result {'1','2','3'}
test ns_dbquotelist-3 {basic syntax} -body {
    ns_dbquotelist "hello world"
} -returnCodes {ok error} -result {'hello','world'}
test ns_dbquotelist-4 {basic syntax} -body {
    ns_dbquotelist "hello o'toole"
} -returnCodes {ok error} -result {'hello','o''toole'}
test ns_dbquotelist-5 {passing in value with objType "int"} -body {
    ns_dbquotelist [list [expr {123}] 456]
} -returnCodes {ok error} -result {'123','456'}
test ns_dbquotelist-6 {string containing invalid value} -body {
    ns_dbquotelist "1\x002"
} -returnCodes {ok error} -result "input string '1\x002' contains invalid characters"

test ns_db-2.0 {nsdb gethandle} -body {
    set h [ns_db gethandle -timeout 2.5s]
} -returnCodes {ok error} -match glob -result {nsdb*}

test ns_db-2.1 {"db_1row"} -body {
    set s [ns_db 1row $h "rows"]
    ns_set array $s
} -returnCodes {ok error} -result {column1 ok}

test ns_db-2.2 {"dml"} -body {
    set r [ns_db dml $h "dml"]
} -returnCodes {ok error} -result {}


test ns_db-2.9 {nsdb releasehandle} -body {
    set h [ns_db releasehandle $h]
} -returnCodes {ok error} -result {}


test ns_getcsv-1.0 {ns_getcsv} -body {
    set csvFile [ns_server pagedir]/csv
    set f [open $csvFile]

    while {1} {
        set r [ns_getcsv $f line]
        switch $r {
           -1       {break}
            0       {}
            default {lappend lines $line}
        }
    }
    close $f
    set lines
} -cleanup {
    unset -nocomplain lines r f
} -returnCodes {ok error} -result {{aaa bbb ccc} {aaa {b
bb} ccc} {zzz yyy xxx} {{ 1 } { 2 } { 3 }} {includes(\")quote {quoted includes (") quote}} {elm2 {} empty} single {last3 empty {} {} {}}} ;# "


test ns_getcsv-1.1 {ns_getcsv with trim} -body {
    set csvFile [ns_server pagedir]/csv
    set f [open $csvFile]

    while {1} {
        set r [ns_getcsv -trim $f line]
        switch $r {
           -1       {break}
            0       {}
            default {lappend lines $line}
        }
    }
    close $f
    set lines
} -cleanup {
    unset -nocomplain lines r f
} -returnCodes {ok error} -result {{aaa bbb ccc} {aaa {b
bb} ccc} {zzz yyy xxx} {1 2 3} {includes(\")quote {quoted includes (") quote}} {elm2 {} empty} single {last3 empty {} {} {}}} ;# "


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
