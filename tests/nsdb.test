# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv



test nsdb-1.0 {syntax: ns_db} -body {
    ns_db
} -returnCodes error -result {wrong # args: should be "ns_db /subcommand/ ?/arg .../?"}

test nsdb-1.0.1 {syntax: ns_db bouncepool} -body {
    ns_db bouncepool
} -returnCodes error -result {wrong # args: should be "ns_db bouncepool /poolname/"}

test nsdb-1.0.2 {syntax: ns_db cancel} -body {
    ns_db cancel
} -returnCodes error -result {wrong # args: should be "ns_db cancel /handle/"}

test nsdb-1.0.4 {syntax: ns_db connected} -body {
    ns_db connected
} -returnCodes error -result {wrong # args: should be "ns_db connected /handle/"}

test nsdb-1.0.5 {syntax: ns_db currenthandles} -body {
    ns_db currenthandles ?
} -returnCodes error -result {wrong # args: should be "ns_db currenthandles"}

test nsdb-1.0.6 {syntax: ns_db datasource} -body {
    ns_db datasource
} -returnCodes error -result {wrong # args: should be "ns_db datasource /handle/"}

test nsdb-1.0.7 {syntax: ns_db bindrow} -body {
    ns_db bindrow
} -returnCodes error -result {wrong # args: should be "ns_db bindrow /handle/"}

test nsdb-1.0.8 {syntax: ns_db dbtype} -body {
    ns_db dbtype
} -returnCodes error -result {wrong # args: should be "ns_db dbtype /handle/"}

test nsdb-1.0.9 {syntax: ns_db dml} -body {
    ns_db dml
} -returnCodes error -result {wrong # args: should be "ns_db dml /handle/ /sql/"}

test nsdb-1.0.10 {syntax: ns_db driver} -body {
    ns_db driver
} -returnCodes error -result {wrong # args: should be "ns_db driver /handle/"}

test nsdb-1.0.11 {syntax: ns_db exception} -body {
    ns_db exception
} -returnCodes error -result {wrong # args: should be "ns_db exception /handle/"}

test nsdb-1.0.12 {syntax: ns_db exec} -body {
    ns_db exec
} -returnCodes error -result {wrong # args: should be "ns_db exec /handle/ /sql/"}

test nsdb-1.0.13 {syntax: ns_db flush} -body {
    ns_db flush
} -returnCodes error -result {wrong # args: should be "ns_db flush /handle/"}

test nsdb-1.0.14 {syntax: ns_db gethandle} -body {
    ns_db gethandle "" 1 ?
} -returnCodes error -result {wrong # args: should be "ns_db gethandle ?-timeout /time/? ?--? ?/poolname/? ?/nhandles[1,MAX]/?"}

test nsdb-1.0.15 {syntax: ns_db getrow} -body {
    ns_db getrow
} -returnCodes error -result {wrong # args: should be "ns_db getrow /handle/ /setId/"}

test nsdb-1.0.16 {syntax: ns_db logminduration} -body {
    ns_db logminduration "" 1s ?
} -returnCodes error -result {wrong # args: should be "ns_db logminduration ?/poolname/? ?/minduration/?"}

test nsdb-1.0.18 {syntax: ns_db password} -body {
    ns_db password
} -returnCodes error -result {wrong # args: should be "ns_db password /handle/"}

test nsdb-1.0.19 {syntax: ns_db poolname} -body {
    ns_db poolname
} -returnCodes error -result {wrong # args: should be "ns_db poolname /handle/"}

test nsdb-1.0.20 {syntax: ns_db pools} -body {
    ns_db pools ?
} -returnCodes error -result {wrong # args: should be "ns_db pools"}

test nsdb-1.0.21 {syntax: ns_db releasehandle} -body {
    ns_db releasehandle
} -returnCodes error -result {wrong # args: should be "ns_db releasehandle /handle/"}

test nsdb-1.0.22 {syntax: ns_db rowcount} -body {
    ns_db rowcount
} -returnCodes error -result {wrong # args: should be "ns_db rowcount /handle/"}

test nsdb-1.0.23 {syntax: ns_db select} -body {
    ns_db select
} -returnCodes error -result {wrong # args: should be "ns_db select /handle/ /sql/"}

test nsdb-1.0.24 {syntax: ns_db setexception} -body {
    ns_db setexception
} -returnCodes error -result {wrong # args: should be "ns_db setexception /handle/ /code/ /message/"}

test nsdb-1.0.25 {syntax: ns_db sp_exec} -body {
    ns_db sp_exec
} -returnCodes error -result {wrong # args: should be "ns_db sp_exec /handle/"}

test nsdb-1.0.26 {syntax: ns_db sp_getparams} -body {
    ns_db sp_getparams
} -returnCodes error -result {wrong # args: should be "ns_db sp_getparams /handle/"}

test nsdb-1.0.27 {syntax: ns_db sp_returncode} -body {
    ns_db sp_returncode
} -returnCodes error -result {wrong # args: should be "ns_db sp_returncode /handle/"}

test nsdb-1.0.28 {syntax: ns_db sp_setparam} -body {
    ns_db sp_setparam
} -returnCodes error -result {wrong # args: should be "ns_db sp_setparam /handle/ /paramname/ /type/ in|out /value/"}

test nsdb-1.0.29 {syntax: ns_db sp_start} -body {
    ns_db sp_start
} -returnCodes error -result {wrong # args: should be "ns_db sp_start /handle/ /procname/"}

test nsdb-1.0.30 {syntax: ns_db stats} -body {
    ns_db stats ?
} -returnCodes error -result {wrong # args: should be "ns_db stats"}

test nsdb-1.0.31 {syntax: ns_db user} -body {
    ns_db user
} -returnCodes error -result {wrong # args: should be "ns_db user /handle/"}

test nsdb-1.0.32 {syntax: ns_db verbose} -body {
    ns_db verbose
} -returnCodes error -result {wrong # args: should be "ns_db verbose /handle/ ?/verbose/?"}

test nsdb-1.0.33 {syntax: ns_db 1row} -body {
    ns_db 1row
} -returnCodes error -result {wrong # args: should be "ns_db 1row /handle/ /sql/"}

test nsdb-1.0.34 {syntax: ns_db 0or1row} -body {
    ns_db 0or1row
} -returnCodes error -result {wrong # args: should be "ns_db 0or1row /handle/ /sql/"}


test nsdb-1.1 {syntax: ns_dbquotevalue} -body {
    ns_dbquotevalue
} -returnCodes error -result {wrong # args: should be "ns_dbquotevalue /value/ ?/type/?"}

test nsdb-1.2 {syntax: ns_dbquotelist} -body {
    ns_dbquotelist
} -returnCodes error -result {wrong # args: should be "ns_dbquotelist /list/ ?/type/?"}

test nsdb-1.3 {syntax: ns_dbconfigpath} -body {
    ns_dbconfigpath ?
} -returnCodes error -result {wrong # args: should be "ns_dbconfigpath"}

test nsdb-1.4 {syntax: ns_dberrorcode} -body {
    ns_dberrorcode
} -returnCodes error -result {wrong # args: should be "ns_dberrorcode /handle/"}

test nsdb-1.5 {syntax: ns_dberrormsg} -body {
    ns_dberrormsg
} -returnCodes {ok error} -result {wrong # args: should be "ns_dberrormsg /handle/"}

test nsdb-1.6 {syntax: ns_dbquotename} -body {
    ns_dbquotename
} -returnCodes error -result {wrong # args: should be "ns_dbquotename name"}
# Tcl proc ns_dbquotename_ message should be {wrong # args: should be "ns_dbquotename /name/"}

test nsdb-1.7 {syntax: ns_quotelisttolist} -body {
    ns_quotelisttolist
} -returnCodes error -result {wrong # args: should be "ns_quotelisttolist /string/"}

test nsdb-1.8 {syntax: ns_localsqltimestamp} -body {
    ns_localsqltimestamp x
} -returnCodes error -result {wrong # args: should be "ns_localsqltimestamp"}

test nsdb-1.9 {syntax: ns_buildsqldate} -body {
    ns_buildsqldate x
} -returnCodes error -result {wrong # args: should be "ns_buildsqldate month day year"}
# Tcl proc ns_buildsqldate message should be {wrong # args: should be "ns_buildsqldate /month/ /day/ /year/"}

test nsdb-1.10 {syntax: ns_dbpooldescription} -body {
    ns_dbpooldescription 
} -returnCodes error -result {wrong # args: should be "ns_dbpooldescription /poolname/"}


#
# Functional tests
#
test ns_dbquotevalue-2 {empty string} -body {
    ns_dbquotevalue ""
} -returnCodes {ok error} -result {NULL}
test ns_dbquotevalue-3 {dbquotevalue number} -body {
    ns_dbquotevalue 10
} -returnCodes {ok error} -result {'10'}
test ns_dbquotevalue-3 {dbquotevalue string with space} -body {
    ns_dbquotevalue "hello world"
} -returnCodes {ok error} -result {'hello world'}
test ns_dbquotevalue-4 {dbquotevalue string with quote} -body {
    ns_dbquotevalue "hello o'toole"
} -returnCodes {ok error} -result {'hello o''toole'}
test ns_dbquotevalue-5 {passing in value with objType "int"} -body {
    ns_dbquotevalue [expr {123}]
} -returnCodes {ok error} -result '123'
test ns_dbquotevalue-6 {string containing invalid value} -body {
    ns_dbquotevalue "1\x00\x02"
} -returnCodes {ok error} -result "input string '1\x00\x02' contains invalid characters"



test ns_dbquotelist-2 {dbquotelist empty} -body {
    ns_dbquotelist ""
} -returnCodes {ok error} -result {}
test ns_dbquotelist-3.1 {dbquotelist integer} -body {
    ns_dbquotelist 10
} -returnCodes {ok error} -result {'10'}
test ns_dbquotelist-3.2 {dbquotelist list of integers} -body {
    ns_dbquotelist {1 2 3}
} -returnCodes {ok error} -result {'1','2','3'}
test ns_dbquotelist-3 {dbquotelist list of strings} -body {
    ns_dbquotelist "hello world"
} -returnCodes {ok error} -result {'hello','world'}
test ns_dbquotelist-4 {dbquotelist list with quote} -body {
    ns_dbquotelist "hello o'toole"
} -returnCodes {ok error} -result {'hello','o''toole'}
test ns_dbquotelist-5 {passing in value with objType "int"} -body {
    ns_dbquotelist [list [expr {123}] 456]
} -returnCodes {ok error} -result {'123','456'}
test ns_dbquotelist-6 {string containing invalid value} -body {
    ns_dbquotelist "1\x00\x02"
} -returnCodes {ok error} -result "input string '1\x00\x02' contains invalid characters"


test ns_dbquotename-1 {dbquotelist empty} -body {
    ns_dbquotename hello
} -returnCodes {ok error} -result {hello}

test ns_dbquotename-2 {dbquotelist empty} -body {
    ns_dbquotename "pretty name"
} -returnCodes {ok error} -result {"pretty name"}


test ns_db-2.0 {nsdb gethandle} -body {
    set h [ns_db gethandle -timeout 2.5s]
} -returnCodes {ok error} -match glob -result {nsdb*}

test ns_db-2.1 {"db_1row"} -body {
    set s [ns_db 1row $h "rows"]
    ns_set array $s
} -returnCodes {ok error} -result {column1 ok}

test ns_db-2.2 {"dml"} -body {
    set r [ns_db dml $h "dml"]
} -returnCodes {ok error} -result {}


test ns_db-2.9 {nsdb releasehandle} -body {
    set h [ns_db releasehandle $h]
} -returnCodes {ok error} -result {}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
