# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv


ns_cache_create -maxentry 10 -- c0 20480
ns_cache_create -maxentry 10 -- c1 1024
ns_cache_create -expires 100 -- c2 [expr 1024 * 1024]
ns_cache_create -expires 100.1s -timeout 1s -- c4 [expr 1024 * 1024]


test cache-1.1 {basic syntax} -body {
    ns_cache_keys
} -returnCodes error -result {wrong # args: should be "ns_cache_keys ?-exact? ?--? cache ?pattern?"}

test cache-1.2 {basic syntax} -body {
    ns_cache_flush
} -returnCodes error -result {wrong # args: should be "ns_cache_flush ?-glob? ?--? cache ?args?"}

test cache-1.3 {basic syntax} -body {
    ns_cache_stats
} -returnCodes error -result {wrong # args: should be "ns_cache_stats ?-contents? ?-reset? ?--? cache"}

test cache-1.4 {basic syntax} -body {
    ns_cache_create
} -returnCodes error -result {wrong # args: should be "ns_cache_create ?-timeout timeout? ?-expires expires? ?-maxentry maxentry? ?--? cache size"}

test cache-1.5 {basic syntax} -body {
    ns_cache_eval
} -returnCodes error -result {wrong # args: should be "ns_cache_eval ?-timeout timeout? ?-expires expires? ?-force? ?--? cache key args"}

test cache-1.6 {basic syntax} -body {
    ns_cache_incr
} -returnCodes error -result {wrong # args: should be "ns_cache_incr ?-timeout timeout? ?-expires expires? ?--? cache key ?incr?"}

test cache-1.7 {basic syntax} -body {
    ns_cache_append
} -returnCodes error -result {wrong # args: should be "ns_cache_append ?-timeout timeout? ?-expires expires? ?--? cache key args"}

test cache-1.8 {basic syntax} -body {
    ns_cache_lappend
} -returnCodes error -result {wrong # args: should be "ns_cache_lappend ?-timeout timeout? ?-expires expires? ?--? cache key args"}

test cache-1.10 {basic syntax} -body {
    ns_memoize
} -returnCodes error -result {wrong # args: should be "?-timeout timeout? ?-expires expires? ?--? script ?args?"}

test cache-1.11 {basic syntax} -body {
    ns_cache_configure
} -returnCodes error -result {wrong # args: should be "ns_cache_configure cache ?args?"}

test cache-1.12 {basic syntax} -body {
    ns_cache_exists
} -returnCodes error -result {wrong # args: should be "ns_cache_exists cache"}




test cache-2.1 {cache names} -body {
    lsort [ns_cache_names]
} -match glob -result {c0 c1 c2 *}



test cache-3.1a {cache create} -body {
    ns_cache_create -expires 3 -- c3 1024
} -result {1}
test cache-3.1b {cache create} -body {
    ns_cache_create -expires 3 -- c3 1024
} -result {0}


test cache-3.2 {query configuration} -body {
    ns_cache_configure c3
} -result {maxsize 1024 maxentry 0 expires 3 timeout {}}

test cache-3.3 {query configuration} -body {
    ns_cache_configure c3 -maxsize 1025
    ns_cache_configure c3
} -result {maxsize 1025 maxentry 0 expires 3 timeout {}}

test cache-3.4 {query configuration} -body {
    ns_cache_configure c3 -maxentry 1000
    ns_cache_configure c3
} -result {maxsize 1025 maxentry 1000 expires 3 timeout {}}

test cache-3.5 {query configuration} -body {
    ns_cache_configure c3 -expires 4
    ns_cache_configure c3
} -result {maxsize 1025 maxentry 1000 expires 4 timeout {}}

test cache-3.6 {query configuration} -body {
    ns_cache_configure c3 -timeout 1
    ns_cache_configure c3
} -result {maxsize 1025 maxentry 1000 expires 4 timeout 1}

test cache-3.6 {check cache existence} -body {
    ns_cache_exists c3
} -result {1}
test cache-3.7 {check cache existence} -body {
    ns_cache_exists c3333
} -result {0}



test cache-4.1 {cache keys} -body {
    ns_cache_keys noexist
} -returnCodes error -result {no such cache: noexist}

test cache-4.2 {cache keys} -body {
    ns_cache_keys c1
} -result {}

test cache-4.3 {cache keys} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result k1

test cache-4.4 {cache keys} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k2 {return a}
    lsort [ns_cache_keys c1]
} -cleanup {
    ns_cache_flush c1
} -result {k1 k2}



test cache-5.1 {flush empty cache} -body {
    ns_cache_flush c1
    ns_cache_flush c1
} -result 0

test cache-5.2 {full cache flush} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k2 {return a}
    ns_cache_flush c1
} -result 2

test cache-5.3 {flush single key} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k2 {return a}
    ns_cache_flush c1 k1
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result k2

test cache-5.4 {flush multiple keys} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k2 {return a}
    ns_cache_eval c1 k3 {return a}
    ns_cache_flush c1 k1 k2
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result k3

test cache-5.4.1 {flush expired key absolute time (Ns_CacheFindEntry)} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k1 {return a}
    ns_sleep 2s
    ns_cache_flush c1 k1
} -cleanup {
    ns_cache_flush c1
} -result 0

test cache-5.4.1.1 {flush expired key relative time (Ns_CacheFindEntry)} -body {
    ns_cache_eval -expires 1 -- c1 k1 {return a}
    ns_sleep 2s
    ns_cache_flush c1 k1
} -cleanup {
    ns_cache_flush c1
} -result 0

test cache-5.4.2 {flush expired key, abs time (Ns_CacheFirstEntry, Ns_CacheNextEntry)} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k1 {return a}
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k2 {return b}
    ns_sleep 2s
    ns_cache_flush c1
} -cleanup {
    ns_cache_flush c1
} -result 0

test cache-5.4.2.1 {flush expired key, rel time (Ns_CacheFirstEntry, Ns_CacheNextEntry)} -body {
    ns_cache_eval -expires 1 -- c1 k1 {return a}
    ns_cache_eval -expires 1 -- c1 k2 {return b}
    ns_sleep 2s
    ns_cache_flush c1
} -cleanup {
    ns_cache_flush c1
} -result 0

test cache-5.5 {cache flush glob keys} -body {
    ns_cache_eval c1 kx1 {return a}
    ns_cache_eval c1 kx2 {return a}
    ns_cache_eval c1 ky3 {return a}
    ns_cache_flush -glob c1 kx*
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result ky3

test cache-5.6 {cache flush multiple glob keys} -body {
    ns_cache_eval c1 kx1 {return a}
    ns_cache_eval c1 kx2 {return a}
    ns_cache_eval c1 ky3 {return a}
    ns_cache_flush -glob c1 kx1 kx*
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result ky3

test cache-5.7 {flush expired key w/glob (Ns_CacheFirstEntry, Ns_CacheNextEntry)} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k1 {return a}
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k2 {return a}
    ns_sleep 2s
    ns_cache_flush -glob -- c1 *
} -cleanup {
    ns_cache_flush c1
} -result 0

test cache-5.8 {cache flush concurrent} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] c1 k1 {return a}
    ns_thread begindetached {
        ns_sleep 1.2s
        ns_cache_eval c1 k1 {ns_sleep 1s; return b}
    }
    ns_thread yield
    ns_sleep 1.5s
    ns_cache_flush c1
    ns_thread yield
    ns_sleep 1s
    ns_cache_eval c1 k1 {return c}
} -cleanup {
    ns_cache_flush c1
} -result b




test cache-6.1 {eval with arg} -body {
    ns_cache_eval c1 k1 {return a}
} -cleanup {
    ns_cache_flush c1
} -result a

test cache-6.2 {eval with args} -body {
    ns_cache_eval c1 k1 concat a b c
} -cleanup {
    ns_cache_flush c1
} -result {a b c}

test cache-6.3 {eval, same value} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k1 {return a}
} -cleanup {
    ns_cache_flush c1
} -result a

test cache-6.4 {eval, different value} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval c1 k1 {return b}
} -cleanup {
    ns_cache_flush c1
} -result a

test cache-6.4.1 {eval force replacement} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_eval -force -- c1 k1 {return b}
} -cleanup {
    ns_cache_flush c1
} -result b

test cache-6.4.2 {eval maxentry size} -body {
    ns_cache_eval c1 k1 {return a}
    # The value of k2 is larger than "maxentry" size, so don't cache.
    ns_cache_eval c1 k2 {return 01234567891}
    ns_cache_keys c1
} -cleanup {
    ns_cache_flush c1
} -result k1

# t1  sccccccccccccccD
# t2 F  F  F  F  F  F  F
test cache-6.4.3 {flush during ns_cache_eval} -body {
    nsv_set sync . .
    ns_thread begindetached {
        set x 0
        nsv_set sync t1 started
        while {[nsv_get sync t2 result] == 0} {ns_log notice "t1 waits";ns_sleep 1ms}
        ns_log notice "t1 GO"
        ns_sleep 2ms
        time {ns_cache_eval -force -- c4 k1 {incr i; ns_sleep 20ms; ns_log notice "t1 return"; return "b $i"}} 10
        nsv_unset sync t1
        ns_log notice "t1 DONE"
    }
    ns_thread begindetached {
        set x 0
        nsv_set sync t2 started
        while {[nsv_get sync t1 result] == 0} {ns_log notice "t2 waits";ns_sleep 1ms}
        ns_log notice "t2 GO"
        time {ns_sleep 3ms; ns_log notice "t2 flush"; ns_cache_flush c4} 50
        nsv_unset sync t2
        ns_log notice "t2 DONE"
    }
    ns_sleep 0.5s
    ns_log notice "c"
    set r [ns_cache_eval -force -- c4 k1 {return c}]
    ns_log notice "c DONE $r"
    set r
} -cleanup {
    unset -nocomplain r
    ns_cache_flush c4
    ns_log notice "call flush DONE"
} -returnCodes {ok return error} -result "c"

test cache-6.4.4 {flush during ns_cache_eval -force} -body {
    nsv_set sync . .
    ns_thread begindetached {
        set x 0
        nsv_set sync t1 started
        while {[nsv_get sync t2 result] == 0} {ns_log notice "t1 waits";ns_sleep 1ms}
        ns_log notice "t1 GO"
        ns_sleep 2ms
        time {ns_cache_eval -force -- c4 k1 {incr i; ns_sleep 20ms; ns_log notice "t1 return"; return "b $i"}} 10
        nsv_unset sync t1
        ns_log notice "t1 DONE"
    }
    ns_thread begindetached {
        set x 0
        nsv_set sync t2 started
        while {[nsv_get sync t1 result] == 0} {ns_log notice "t2 waits";ns_sleep 1ms}
        ns_log notice "t2 GO"
        time {ns_sleep 3ms; ns_log notice "t2 flush"; ns_cache_flush c4} 50
        nsv_unset sync t2
        ns_log notice "t2 DONE"
    }
    ns_sleep 0.5s
    ns_log notice "c"
    set r [ns_cache_eval -force -- c4 k1 {return c}]
    ns_log notice "c DONE $r"
    set r
} -cleanup {
    unset -nocomplain r
    ns_cache_flush c4
    ns_log notice "call flush DONE"
} -returnCodes {ok return error} -result "c"


#    01234567890123456789012345678901234567890123456789
# t1  sccccccccccD
# t2 sccD sccD sccD sccD
test cache-6.4.5 {interleaving ns_cache_eval -force} -body {
    nsv_set sync . .
    ns_thread begindetached {
        set x 0
        nsv_set sync t1 started
        while {[nsv_get sync t2 result] == 0} {ns_log notice "t1 waits";ns_sleep 1ms}
        ns_log notice "t1 GO"
        ns_sleep 10ms
        time {ns_cache_eval -force -- c4 k1 {incr i; ns_log notice "t1 $i";ns_sleep 20ms; return "t1 $i"};ns_sleep 1ms} 5
        nsv_unset sync t1
        ns_log notice "t1 DONE"
    }
    ns_thread begindetached {
        set x 0
        nsv_set sync t2 started
        while {[nsv_get sync t1 result] == 0} {ns_log notice "t2 waits";ns_sleep 1ms}
        ns_log notice "t2 GO"
        time {ns_cache_eval -force -- c4 k1 {incr i; ns_log notice "t2 $i";ns_sleep 2ms; return "t2 $i"};ns_sleep 1ms} 15
        nsv_unset sync t2
        ns_log notice "t2 DONE"
    }
    ns_sleep 1.5s
    ns_log notice "c"
    set r [ns_cache_eval -force -- c4 k1 {return c}]
    ns_log notice "c DONE $r"
    set r
} -cleanup {
    unset -nocomplain r
    ns_cache_flush c4
    ns_log notice "call flush DONE"
} -returnCodes {ok return error} -result "c"


test cache-6.5 {eval: wait timeout absolute} -body {
    ns_thread begindetached {
        ns_cache_eval -- c1 k1 {ns_sleep 3s; return a}
    }
    ns_sleep 1s
    ns_cache_eval -timeout [ns_time incr [ns_time get] 1] -- c1 k1 {return a}
} -cleanup {
    ns_sleep 3.2s
    ns_cache_flush c1
} -returnCodes error -result "timeout waiting for concurrent update: k1"

test cache-6.5.1 {eval: wait timeout relative} -body {
    ns_thread begindetached {
        ns_cache_eval -- c1 k1 {ns_sleep 3s; return a}
    }
    ns_sleep 1s
    ns_cache_eval -timeout 1 -- c1 k1 {return a}
} -cleanup {
    ns_sleep 3.2s
    ns_cache_flush c1
} -returnCodes error -result "timeout waiting for concurrent update: k1"

test cache-6.6 {eval expires} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 1] -- c1 k1 {return a}
    ns_sleep 2s
    ns_cache_eval c1 k1 {return b}
} -cleanup {
    ns_cache_flush c1
} -result b

test cache-6.7 {nested eval} -body {
    ns_cache_eval c1 k1 {
        ns_cache_eval c1 k2 {
            ns_cache_eval c1 k3 return a
        }
    }
} -cleanup {
    ns_cache_flush c1
} -result a

test cache-6.8 {pruning} -body {
    ns_cache_stats -reset -- c0
    ns_cache_eval c0 000 {return a}
    set entrySize [dict get [ns_cache_stats c0] size]
    set maxSize [dict get [ns_cache_stats c0] maxsize]
    set fitting [expr {$maxSize/$entrySize}]
    for {set i 0} {$i < $fitting + 6} {incr i} {
        ns_cache_eval c0 [format %.3d $i] {return a}
    }
    dict get [ns_cache_stats c0] pruned
} -cleanup {
    ns_cache_flush c0
    unset -nocomplain s
} -result 6



test cache-7.1 {cache stats entries} -body {
    lsort [dict keys [ns_cache_stats c1]]
} -cleanup {
    unset -nocomplain stats
} -result {commit entries expired flushed hitrate hits maxsize missed pruned rollback saved size}

test cache-7.2 {cache stats contents} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_stats -contents -- c1
} -cleanup {
    ns_cache_flush c1
} -match regexp -result {1 0}

test cache-7.3 {cache stats contents w/expiry} -body {
    ns_cache_eval -expires [ns_time incr [ns_time get] 100] -- c1 k1 {return aaa}
    ns_cache_stats -contents -- c1
} -cleanup {
    ns_cache_flush c1
} -match regexp -result {3 [0-9]+.*}

test cache-7.4 {cache stats contents w/default ttl} -body {
    ns_cache_eval c2 k1 {return a}
    ns_cache_stats -contents -- c2
} -cleanup {
    ns_cache_flush c2
} -match regexp -result {1 [0-9][0-9][0-9].*}



test cache-8.1 {cache incr} -body {
    ns_cache_incr c1 k1
} -cleanup {
    ns_cache_flush c1
} -result 1

test cache-8.2 {cache incr} -body {
    ns_cache_incr c1 k1
    ns_cache_incr c1 k1
} -cleanup {
    ns_cache_flush c1
} -result 2

test cache-8.3 {cache incr: negative number} -body {
    ns_cache_incr c1 k1 -1
} -cleanup {
    ns_cache_flush c1
} -result -1

test cache-8.4 {cache incr: positive multiple} -body {
    ns_cache_incr c1 k1 2
} -cleanup {
    ns_cache_flush c1
} -result 2



test cache-9.1 {cache append} -body {
    ns_cache_append c1 k1 x
    ns_cache_append c1 k1 y
} -cleanup {
    ns_cache_flush c1
} -result xy

test cache-9.2 {cache append multiple values} -body {
    ns_cache_append c1 k1 x
    ns_cache_append c1 k1 y z
} -cleanup {
    ns_cache_flush c1
} -result {xyz}

test cache-9.4 {cache lappend} -body {
    ns_cache_lappend c1 k1 x
    ns_cache_lappend c1 k1 y
} -cleanup {
    ns_cache_flush c1
} -result {x y}

test cache-9.5 {cache lappend multiple values} -body {
    ns_cache_lappend c1 k1 x
    ns_cache_lappend c1 k1 y z
} -cleanup {
    ns_cache_flush c1
} -result {x y z}

test cache-9.6 {cache get} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_get c1 k1
} -cleanup {
    ns_cache_flush c1
} -result {a}

test cache-9.7 {cache get varname} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_get c1 k1 v
} -cleanup {
    ns_cache_flush c1
} -result {1}

test cache-9.8 {cache get varname value} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_get c1 k1 v
    set v
} -cleanup {
    ns_cache_flush c1
} -result {a}

test cache-9.9 {cache get varname non-existing} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_get c1 k2
} -cleanup {
    ns_cache_flush c1
} -returnCodes error -result {no such key: k2}

test cache-9.10 {cache get varname non-existing varname} -body {
    ns_cache_eval c1 k1 {return a}
    ns_cache_get c1 k2 v
} -cleanup {
    ns_cache_flush c1
} -result {0}

test cache-10.1 {memoize} -body {
    ns_cache_eval c1 k1 {return a}
} -cleanup {
    ns_memoize_flush
} -result a

test cache-10.2 {memoize with multiple args} -body {
    ns_memoize return b
} -cleanup {
    ns_memoize_flush
} -result b

test cache-10.3 {memoize timeout} -body {
    ns_memoize -timeout 2 -- {return c}
} -cleanup {
    ns_memoize_flush
} -result c

test cache-10.4 {memoize flush} -body {
    ns_memoize {return d}
    ns_memoize_flush {return d}
} -cleanup {
    ns_memoize_flush
} -result 1

test cache-10.5 {memoize flush glob} -body {
    ns_memoize return e1
    ns_memoize return e2
    ns_memoize return f1
    ns_memoize_flush {return e*}
} -cleanup {
    ns_memoize_flush
} -result 2



test ns_cache-11.1 {stability} -constraints stress -body {

    ns_log Notice Begin cache stress test.

    ns_cache_stats -reset -- c1
    set nt   64

    for {set i 0} {$i < $nt} {incr i} {
        lappend threads [ns_thread begin {
            for {set j 0} {$j < 10000} {incr j} {
                ns_cache_eval -force -- c1 k1 {
                    ns_cache_eval -- c1 $j return 01234567890123456789
                    return 01234567890123456789
                }
                #ns_thread yield
            }
        }]
    }
    lappend threads [ns_thread begin {
        for {set j 0} {$j < 10000} {incr j} {
            ns_cache_flush c1 $j
            #ns_thread yield
        }
    }]

    foreach t $threads {
        ns_thread wait $t
    }

    ns_log Notice [ns_cache_stats c1]

} -cleanup {
    unset -nocomplain a i j nt
    ns_cache_flush c1
} -result {}



test ns_cache-12.1 {transaction rollback} -body {

    ns_cache_create trans_c1 1024

    #
    # set some value in the cache before the transactions
    #
    ns_cache_eval trans_c1 k1 {return 1}
    #
    # start the transaction
    #
    ns_cache_transaction_begin
        #
        # get some old value in the transaction
        #
        set result [list a: [ns_cache_get trans_c1 k1]]

        #
        # set three values in the transaction via ns_cache_eval
        #
        ns_cache_eval trans_c1 k2 {return 2}
        ns_cache_eval trans_c1 k3 {return 3}
        lappend result b: [ns_cache_incr trans_c1 k4]

        #
        # check, if we can obtain the just fresh value inside the transaction

        # ... via _eval
        lappend result c: [ns_cache_eval trans_c1 k2 {return 2}]

        # ... via _get
        lappend result d: [ns_cache_get trans_c1 k2]
        lappend result e: [ns_cache_get trans_c1 k3]

        # get keys inside transaction
        lappend result f: [ns_cache_keys trans_c1 k2]
        lappend result g: [ns_cache_keys trans_c1]

        # flush the value added by this transaction inside the transaction
        lappend result h: [ns_cache_flush trans_c1 k3]

        # increment k4 once again, get the value via ns_cache_get
        lappend result i: [ns_cache_incr trans_c1 k4]
        lappend result j: [ns_cache_get trans_c1 k4]

        #
        # rollback the transaction
        #
    ns_cache_transaction_rollback

    #
    # get all the entries from the cache
    #
    lappend result y: [ns_cache_keys trans_c1]

    #
    # k2 should not be obtainable  (catch -> 1)
    lappend result z: [catch {ns_cache_get trans_c1 k2}]

} -cleanup {
    unset -nocomplain result
    ns_cache_flush trans_c1
} -result {a: 1 b: 1 c: 2 d: 2 e: 3 f: k2 g: {k1 k2 k3 k4} h: 1 i: 2 j: 2 y: k1 z: 1}


test ns_cache-12.2 {transaction commit} -body {

    ns_cache_create trans_c1 1024

    #
    # set some value in the cache before the transactions
    #
    ns_cache_eval trans_c1 k1 {return 1}

    #
    # start the transaction
    #
    ns_cache_transaction_begin
        #
        # get some old value in the transaction
        #
        set result [list a: [ns_cache_get trans_c1 k1]]

        #
        # set three values in the transaction via ns_cache_eval
        #
        ns_cache_eval trans_c1 k2 {return 2}
        ns_cache_eval trans_c1 k3 {return 3}
        lappend result b: [ns_cache_incr trans_c1 k4]

        #
        # check, if we can obtain the just fresh value inside the transaction

        # ... via _eval
        lappend result c: [ns_cache_eval trans_c1 k2 {return 2}]

        # ... via _get
        lappend result d: [ns_cache_get trans_c1 k2]
        lappend result e: [ns_cache_get trans_c1 k3]

        # get keys inside transaction
        lappend result f: [ns_cache_keys trans_c1 k2]
        lappend result g: [ns_cache_keys trans_c1]

        # flush the value added by this transaction inside the transaction
        lappend result h: [ns_cache_flush trans_c1 k3]

        # increment k4 once again, get the value via ns_cache_get
        lappend result i: [ns_cache_incr trans_c1 k4]
        lappend result j: [ns_cache_get trans_c1 k4]

        #
        # commit the transaction
        #
    ns_cache_transaction_commit

    #
    # get all the entries from the cache
    #
    lappend result y: [ns_cache_keys trans_c1]

    #
    # k2 should be obtainable (catch -> 0)
    lappend result z: [catch {ns_cache_get trans_c1 k2}]

} -cleanup {
    unset -nocomplain result
    ns_cache_flush trans_c1
} -result {a: 1 b: 1 c: 2 d: 2 e: 3 f: k2 g: {k1 k2 k3 k4} h: 1 i: 2 j: 2 y: {k1 k2 k4} z: 0}


test ns_cache-12.3 {flush rollback cache flush} -body {
    set cache trans_c2
    ns_cache_create $cache 1024

    #
    # set some value in the cache before the transactions
    #
    ns_cache_eval $cache k1 {return 1}
    ns_cache_eval $cache k2 {return 2}

    ns_cache_transaction_begin

        #
        # add two values in the transaction (k3 and k4)
        #
        ns_cache_eval $cache k3 {return 3}
        ns_cache_incr $cache k4

        # ... get the keys of the cache inside the transaction
        lappend result keys-inside: [ns_cache_keys $cache]

        # ... flush k1 (value from outside)
        ns_cache_flush $cache k1
        lappend result keys-inside-after-flush-k1: [ns_cache_keys $cache]

        # ... flush k4 (value from inside)
        ns_cache_flush $cache k4
        lappend result keys-inside-after-flush-k4: [ns_cache_keys $cache]

        # ... flush all
        ns_cache_flush $cache
        lappend result keys-inside-after-glob-flush: [ns_cache_keys $cache]

    ns_cache_transaction_rollback

    #
    # get all the entries from the cache
    #
    lappend result keys-after-rollback: [ns_cache_keys $cache]

} -cleanup {
    unset -nocomplain result
    ns_cache_flush $cache
    unset -nocomplain cache
} -result {keys-inside: {k1 k2 k3 k4} keys-inside-after-flush-k1: {k2 k3 k4} keys-inside-after-flush-k4: {k2 k3} keys-inside-after-glob-flush: {} keys-after-rollback: {}}


test ns_cache-12.4 {flush rollback glob flushes} -body {
    set cache trans_c3
    ns_cache_create $cache 1024

    #
    # set some value in the cache before the transactions
    #
    ns_cache_eval $cache k1 {return 1}
    ns_cache_eval $cache k2 {return 2}

    ns_cache_transaction_begin

        #
        # add two values in the transaction (k3 and k4)
        ns_cache_eval $cache k3 {return 3}
        ns_cache_incr $cache k4

        # ... get the keys of the cache inside the transaction
        lappend result keys-inside: [ns_cache_keys $cache]

        # ... flush k1 (value from outside)
        ns_cache_flush $cache k1
        lappend result keys-inside-after-flush-k1: [ns_cache_keys $cache]

        # ... flush k4 (value from inside)
        ns_cache_flush $cache k4
        lappend result keys-inside-after-flush-k4: [ns_cache_keys $cache]

        # ... flush all
        ns_cache_flush -glob $cache *
        lappend result keys-inside-after-glob-flush: [ns_cache_keys $cache]

    ns_cache_transaction_rollback

    #
    # get all the entries from the cache
    #
    lappend result keys-after-rollback: [ns_cache_keys $cache]

} -cleanup {
    unset -nocomplain result
    ns_cache_flush $cache
    unset -nocomplain cache
} -result {keys-inside: {k1 k2 k3 k4} keys-inside-after-flush-k1: {k2 k3 k4} keys-inside-after-flush-k4: {k2 k3} keys-inside-after-glob-flush: {} keys-after-rollback: {}}


test ns_cache-12.5 {flush rollback explicit flushes} -body {
    set cache trans_c4
    ns_cache_create $cache 1024

    #
    # set some value in the cache before the transactions
    #
    ns_cache_eval $cache k1 {return 1}
    ns_cache_eval $cache k2 {return 2}

    ns_cache_transaction_begin

        #
        # add two values in the transaction (k3 and k4)
        ns_cache_eval $cache k3 {return 3}
        ns_cache_incr $cache k4

        # ... get the keys of the cache inside the transaction
        lappend result keys-inside: [ns_cache_keys $cache]

        # ... flush k1 (value from outside)
        ns_cache_flush $cache k1
        lappend result keys-inside-after-flush-k1: [ns_cache_keys $cache]

        # ... flush k4 (value from inside)
        ns_cache_flush $cache k4
        lappend result keys-inside-after-flush-k4: [ns_cache_keys $cache]

        # ... flush all keys explicitly
        ns_cache_flush $cache {*}[ns_cache_keys $cache]

        lappend result keys-inside-after-glob-flush: [ns_cache_keys $cache]

    ns_cache_transaction_rollback

    #
    # get all the entries from the cache
    #
    lappend result keys-after-rollback: [ns_cache_keys $cache]

} -cleanup {
    unset -nocomplain result
    ns_cache_flush $cache
    unset -nocomplain cache
} -result {keys-inside: {k1 k2 k3 k4} keys-inside-after-flush-k1: {k2 k3 k4} keys-inside-after-flush-k4: {k2 k3} keys-inside-after-glob-flush: {} keys-after-rollback: {}}

test ns_cache-13.0 {test mem units - create} -body {
    ns_cache_create foo 1kB
    ns_cache_configure foo
} -result {maxsize 1024 maxentry 0 expires {} timeout {}}

test ns_cache-13.1 {test mem units - reconfigure} -body {
    ns_cache_configure foo -maxsize 10kB
    ns_cache_configure foo
} -result {maxsize 10240 maxentry 0 expires {} timeout {}}

test ns_cache-13.2 {test mem units - reconfigure with integer} -body {
    ns_cache_configure foo -maxsize [expr {1024*10}]
    ns_cache_configure foo
} -result {maxsize 10240 maxentry 0 expires {} timeout {}}

test ns_cache-13.3 {test mem units - reconfigure in loop (cached Tcl_Obj)} -body {
    foreach i {1 2 3 4 5} {
        ns_cache_configure foo -maxsize 100kB
    }
    ns_cache_configure foo
} -result {maxsize 102400 maxentry 0 expires {} timeout {}}

test ns_cache-13.1 {test mem units - reconfigure invalid value} -body {
    ns_cache_configure foo -maxsize 10B
} -returnCodes error -result {invalid memory unit '10B'; valid units kB, MB, GB, KiB, MiB, and GiB}

cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
