# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv



test cookie-1.1 {basic syntax} -body {
    ns_getcookie
} -returnCodes error -result {wrong # args: should be "ns_getcookie ?-all all? ?-include_set_cookies include_set_cookies? ?--? name ?default?"}

test cookie-1.2 {basic syntax} -body {
    ns_setcookie
} -returnCodes error -result {wrong # args: should be "ns_setcookie ?-discard discard? ?-domain domain? ?-expires expires? ?-path path? ?-replace replace? ?-samesite samesite? ?-scriptable scriptable? ?-secure secure? ?--? name data"}

test cookie-1.3 {basic syntax} -body {
    ns_deletecookie
} -returnCodes error -result {wrong # args: should be "ns_deletecookie ?-domain domain? ?-path path? ?-replace replace? ?-samesite samesite? ?-secure secure? ?--? name"}



test cookie-2.1 {set plain cookie} -setup {
    ns_register_proc GET /cookie-2.1 {
        ns_setcookie x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.1
} -cleanup {
    ns_unregister_op GET /cookie-2.1
} -result {200 {x="y"; HttpOnly; SameSite=Lax}}

test cookie-2.2 {set cookie w/weird chars} -setup {
    ns_register_proc GET /cookie-2.2 {
        ns_setcookie x " %/&"
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.2
} -cleanup {
    ns_unregister_op GET /cookie-2.2
} -result {200 {x="%20%25/&"; HttpOnly; SameSite=Lax}}

test cookie-2.3 {secure cookie} -setup {
    ns_register_proc GET /cookie-2.3 {
        ns_setcookie -secure 1 -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.3
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -result {200 {x="y"; Secure; HttpOnly; SameSite=Lax}}

test cookie-2.4.1 {set cookie w/ domain} -setup {
    ns_register_proc GET /cookie-2.4 {
        ns_setcookie -domain example.com -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.4
} -cleanup {
    ns_unregister_op GET /cookie-2.4
} -result {200 {x="y"; Domain=example.com; HttpOnly; SameSite=Lax}}

test cookie-2.4.2 {set cookie with empty domain} -setup {
    ns_register_proc GET /cookie-2.4 {
        ns_setcookie -domain "" -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.4
} -cleanup {
    ns_unregister_op GET /cookie-2.4
} -result {200 {x="y"; HttpOnly; SameSite=Lax}}


test cookie-2.5 {set cookie w/ path} -setup {
    ns_register_proc GET /cookie-2.5 {
        ns_setcookie -path /foo/bar -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.5
} -cleanup {
    ns_unregister_op GET /cookie-2.5
} -result {200 {x="y"; Path=/foo/bar; HttpOnly; SameSite=Lax}}

test cookie-2.6 {set cookie w/ max age} -setup {
    ns_register_proc GET /cookie-2.6 {
        ns_setcookie -expires 99 -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.6
} -cleanup {
    ns_unregister_op GET /cookie-2.6
} -result {200 {x="y"; Max-Age=99; HttpOnly; SameSite=Lax}}

test cookie-2.7 {set cookie w/ infinite lifetime} -setup {
    ns_register_proc GET /cookie-2.7 {
        ns_setcookie -expires -1 -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.7
} -cleanup {
    ns_unregister_op GET /cookie-2.7
} -result {200 {x="y"; Expires=Fri, 01-Jan-2035 01:00:00 GMT; HttpOnly; SameSite=Lax}}

test cookie-2.8 {set cookie w/ absolute expiry} -setup {
    ns_register_proc GET /cookie-2.8 {
        ns_setcookie -expires [ns_time incr [ns_time] 10] -- x y
        ns_return 200 text/plain ok
    }
} -body {
    # NB: This test is racy...
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.8
} -cleanup {
    ns_unregister_op GET /cookie-2.8
} -result {200 {x="y"; Max-Age=10; HttpOnly; SameSite=Lax}}

test cookie-2.9 {set scriptable cookie} -setup {
    ns_register_proc GET /cookie-2.9 {
        ns_setcookie -scriptable t -- x y
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.9
} -cleanup {
    ns_unregister_op GET /cookie-2.9
} -result {200 {x="y"; SameSite=Lax}}

test cookie-2.10 {set discard flag for cookie} -setup {
    ns_register_proc GET /cookie-2.10 {
        ns_setcookie -discard t -- x 1
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.10
} -cleanup {
    ns_unregister_op GET /cookie-2.10
} -result {200 {x="1"; Discard; HttpOnly; SameSite=Lax}}

test cookie-2.11 {set discard flag for cookie} -setup {
    ns_register_proc GET /cookie-2.11 {
        ns_setcookie x 1
        ns_setcookie x 2
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getmultiheaders {Set-Cookie} GET /cookie-2.11
} -cleanup {
    ns_unregister_op GET /cookie-2.11
} -result {200 {x="1"; HttpOnly; SameSite=Lax} {x="2"; HttpOnly; SameSite=Lax}}

test cookie-2.12 {set discard flag for cookie} -setup {
    ns_register_proc GET /cookie-2.12 {
        ns_setcookie x 1
        ns_setcookie -replace true x 2
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getmultiheaders {Set-Cookie} GET /cookie-2.12
} -cleanup {
    ns_unregister_op GET /cookie-2.12
} -result {200 {x="2"; HttpOnly; SameSite=Lax}}


#
# Test Samesite flags
#
test cookie-2.13 {samesite strict cookie} -setup {
    ns_register_proc GET /cookie-2.3 {
        ns_setcookie -samesite strict -- x value
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.3
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -result {200 {x="value"; HttpOnly; SameSite=Strict}}

test cookie-2.14 {samesite strict cookie} -setup {
    ns_register_proc GET /cookie-2.3 {
        ns_setcookie -samesite lax -- x value
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.3
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -result {200 {x="value"; HttpOnly; SameSite=Lax}}

test cookie-2.15.1 {samesite none cookie, no secure, fall back to Lax} -setup {
    ns_register_proc GET /cookie-2.3 {
        ns_setcookie -samesite none -- x value
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.3
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -result {200 {x="value"; HttpOnly; SameSite=Lax}}

test cookie-2.15.2 {samesite none cookie, with secure} -setup {
    ns_register_proc GET /cookie-2.3 {
        ns_setcookie -samesite none -secure true -- x value
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-2.3
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -result {200 {x="value"; Secure; HttpOnly; SameSite=None}}

test cookie-2.16 {samesite invalid cookie} -body {
    ns_setcookie -samesite x -- x value
} -cleanup {
    ns_unregister_op GET /cookie-2.3
} -returnCodes error -result {bad option "x": must be strict, lax, or none}



test cookie-3.1 {delete cookie} -setup {
    ns_register_proc GET /cookie-3.1 {
        ns_deletecookie x
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-3.1
} -cleanup {
    ns_unregister_op GET /cookie-3.1
} -result {200 {x=""; Expires=Fri, 01-Jan-1980 01:00:00 GMT; HttpOnly; SameSite=Lax}}

test cookie-3.2 {delete cookie w/ all options} -setup {
    ns_register_proc GET /cookie-3.2 {
        ns_deletecookie -secure 1 -domain example.com -path /foo/bar -- x
        ns_return 200 text/plain ok
    }
} -body {
    nstest::http -getheaders {Set-Cookie} GET /cookie-3.2
} -cleanup {
    ns_unregister_op GET /cookie-3.2
} -result {200 {x=""; Expires=Fri, 01-Jan-1980 01:00:00 GMT; Domain=example.com; Path=/foo/bar; Secure; HttpOnly; SameSite=Lax}}



test cookie-4.1 {get cookie} -setup {
    ns_register_proc GET /cookie-4.1 {
        ns_return 200 text/plain [ns_getcookie x]
    }
} -body {
    nstest::http -setheaders {Cookie x=y} -getbody 1 GET /cookie-4.1
} -cleanup {
    ns_unregister_op GET /cookie-4.1
} -result {200 y}

test cookie-4.2 {get quoted cookie} -setup {
    ns_register_proc GET /cookie-4.2 {
        ns_return 200 text/plain [ns_getcookie x]
    }
} -body {
    nstest::http -setheaders {Cookie x=\"y\"} -getbody 1 GET /cookie-4.2
} -cleanup {
    ns_unregister_op GET /cookie-4.2
} -result {200 y}

test cookie-4.3 {get existing cookie w/ default} -setup {
    ns_register_proc GET /cookie-4.3 {
        ns_return 200 text/plain [ns_getcookie x z]
    }
} -body {
    nstest::http -setheaders {Cookie x=y} -getbody 1 GET /cookie-4.3
} -cleanup {
    ns_unregister_op GET /cookie-4.3
} -result {200 y}

test cookie-4.4 {get missing cookie w/ default} -setup {
    ns_register_proc GET /cookie-4.4 {
        ns_return 200 text/plain [ns_getcookie x z]
    }
} -body {
    nstest::http -getbody 1 GET /cookie-4.4
} -cleanup {
    ns_unregister_op GET /cookie-4.4
} -result {200 z}

test cookie-4.5 {get missing cookie} -setup {
    ns_register_proc GET /cookie-4.5 {
        catch {ns_getcookie x} err
        ns_return 200 text/plain $err
    }
} -body {
    nstest::http -getbody 1 GET /cookie-4.5
} -cleanup {
    ns_unregister_op GET /cookie-4.5
} -result {200 {no such cookie}}


test cookie-4.6 {get cookie with cookie-set values} -setup {
    ns_register_proc GET /cookie-4.6 {
        ns_setcookie foo foovalue
        catch {ns_getcookie -include_set_cookies t foo} err
        ns_return 200 text/plain $err
    }
} -body {
    nstest::http -getbody 1 -getheaders {Set-Cookie} GET /cookie-4.6
} -cleanup {
    ns_unregister_op GET /cookie-4.6
} -result {200 {foo="foovalue"; HttpOnly; SameSite=Lax} foovalue}

test cookie-4.7 {get missing cookie} -setup {
    ns_register_proc GET /cookie-4.7 {
        ns_setcookie foo foovalue
        catch {ns_getcookie -include_set_cookies t oo} err
        ns_return 200 text/plain $err
    }
} -body {
    nstest::http -getbody 1 -getheaders {Set-Cookie} GET /cookie-4.7
} -cleanup {
    ns_unregister_op GET /cookie-4.7
} -result {200 {foo="foovalue"; HttpOnly; SameSite=Lax} {no such cookie}}


test cookie-4.8 {get all named cookies, single cookie} -setup {
    ns_register_proc GET /cookie-4.8 {
        ns_return 200 text/plain [ns_getcookie -all t x]
    }
} -body {
    nstest::http -setheaders {Cookie x=\"hello\"} -getbody 1 GET /cookie-4.8
} -cleanup {
    ns_unregister_op GET /cookie-4.8
} -result {200 hello}


test cookie-4.9a {get all named cookies, multiple cookies} -setup {
    ns_register_proc GET /cookie-4.9 {
        ns_return 200 text/plain [ns_getcookie -all t x]
    }
} -body {
    nstest::http -setheaders {Cookie {x="hello"; x="world"}} -getbody 1 GET /cookie-4.9
} -cleanup {
    ns_unregister_op GET /cookie-4.9
} -result {200 {hello world}}

test cookie-4.9b {get all named cookies, multiple cookies, skip} -setup {
    ns_register_proc GET /cookie-4.9 {
        ns_return 200 text/plain [ns_getcookie -all t x]
    }
} -body {
    nstest::http -setheaders {Cookie {x=hello; y="njet"; x=world}} -getbody 1 GET /cookie-4.9
} -cleanup {
    ns_unregister_op GET /cookie-4.9
} -result {200 {hello world}}

test cookie-4.9c {get all named cookies, multiple cookies, no spaces, terminator} -setup {
    ns_register_proc GET /cookie-4.9 {
        ns_return 200 text/plain [ns_getcookie -all t x]
    }
} -body {
    nstest::http -setheaders {Cookie {x=hello;y=njet;x=world;}} -getbody 1 GET /cookie-4.9
} -cleanup {
    ns_unregister_op GET /cookie-4.9
} -result {200 {hello world}}

test cookie-4.9d {get all named cookies, multiple cookies, no spaces, terminator, other cookie at the end} -setup {
    ns_register_proc GET /cookie-4.9 {
        ns_return 200 text/plain [ns_getcookie -all t x]
    }
} -body {
    nstest::http -setheaders {Cookie {x=hello;y=njet;x=world;z=1}} -getbody 1 GET /cookie-4.9
} -cleanup {
    ns_unregister_op GET /cookie-4.9
} -result {200 {hello world}}


#
# TODO: exercise the cookie parser with bad input...
#



cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
