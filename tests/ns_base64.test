# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

tcltest::testConstraint nsf [expr {[info commands ::nsf::proc] ne ""}]

::tcltest::configure {*}$argv

test ns_base64encode-0.1 {basic syntax: plain call} -body {
     ns_base64encode
} -returnCodes error -result {wrong # args: should be "ns_base64encode ?-binary? ?--? string"}

test ns_base64decode-0.1 {basic syntax: plain call} -body {
     ns_base64decode
} -returnCodes error -result {wrong # args: should be "ns_base64decode ?-binary? ?--? string"}


test ns_base64encode-1.1 {ns_base64encode basic functionality} -body {
    ns_base64encode "this is a test\n"
} -result "dGhpcyBpcyBhIHRlc3QK"

test ns_base64decode-1.1 {ns_base64decode basic functionality} -body {
    ns_base64decode "dGhpcyBpcyBhIHRlc3QK"
} -result "this is a test\n"


test ns_base64encode-1.2 {basic operation ns_base64encode} -body {
     ns_base64encode "true friends stab you in the front"
} -result "dHJ1ZSBmcmllbmRzIHN0YWIgeW91IGluIHRoZSBmcm9udA=="

test ns_base64decode-1.2 {basic operation ns_base64decode} -body {
     ns_base64decode "dHJ1ZSBmcmllbmRzIHN0YWIgeW91IGluIHRoZSBmcm9udA=="
} -result "true friends stab you in the front"

test ns_base64urlencode-1.2 {basic operation ns_base64encode} -body {
     ns_base64urlencode "true friends stab you in the front"
} -result "dHJ1ZSBmcmllbmRzIHN0YWIgeW91IGluIHRoZSBmcm9udA"

test ns_base64urldecode-1.2 {basic operation ns_base64decode} -body {
     ns_base64urldecode "dHJ1ZSBmcmllbmRzIHN0YWIgeW91IGluIHRoZSBmcm9udA"
} -result "true friends stab you in the front"


test ns_base64encode-1.3 {ns_base64encode wraps lines at 60 characters} -body {
    set str "The short red fox ran quickly through the green field "
    append str "and jumped over the tall brown bear\n"
    ns_base64encode $str
} -result  "VGhlIHNob3J0IHJlZCBmb3ggcmFuIHF1aWNrbHkgdGhyb3VnaCB0aGUgZ3Jl
ZW4gZmllbGQgYW5kIGp1bXBlZCBvdmVyIHRoZSB0YWxsIGJyb3duIGJlYXIK"

test ns_base64decode-1.3 {ns_base64decode ignores newlines} -body {
    set str "VGhlIHNob3J0IHJlZCBmb3ggcmFuIHF1aWNrbHkgdGhyb3VnaCB0aGUgZ3Jl\n"
    append str "ZW4gZmllbGQgYW5kIGp1bXBlZCBvdmVyIHRoZSB0YWxsIGJyb3duIGJlYXIK"
    ns_base64decode $str
} -result  "The short red fox ran quickly through the green field and jumped over the tall brown bear\n"

test ns_base64urlencode-1.3 {ns_base64urlencode does not wrap lines at 60 characters} -body {
    set str "The short red fox ran quickly through the green field "
    append str "and jumped over the tall brown bear\n"
    ns_base64urlencode $str
} -result  "VGhlIHNob3J0IHJlZCBmb3ggcmFuIHF1aWNrbHkgdGhyb3VnaCB0aGUgZ3JlZW4gZmllbGQgYW5kIGp1bXBlZCBvdmVyIHRoZSB0YWxsIGJyb3duIGJlYXIK"



test ns_base64encode-1.4 {line wrap at char 60 and reverse} -body {
    ns_base64decode [ns_base64encode "true friends stab you in the front one two three four five six seven eight nine"]
} -result "true friends stab you in the front one two three four five six seven eight nine"

test ns_base64urlencode-1.4 {line wrap at char 60 and reverse} -body {
    ns_base64urldecode [ns_base64urlencode "true friends stab you in the front one two three four five six seven eight nine"]
} -result "true friends stab you in the front one two three four five six seven eight nine"


test ns_base64encode-1.5 {ns_base64decode handles equal sign padding} -body {
    # Decode the encoded string that is padded with one padding char.
    ns_base64decode [ns_base64encode "01234"]
} -result  "01234"

test ns_base64encode-1.6 {ns_base64decode handles equal sign padding} -body {
    # Decode the encoded string that is padded with two padding chars.
    ns_base64decode [ns_base64encode "0123"]
} -result  "0123"

test ns_base64urlencode-1.5 {ns_base64urldecode no padding} -body {
    # case 1.5 from above, in *url" variant, no padding
    ns_base64urldecode [ns_base64urlencode "01234"]
} -result  "01234"

test ns_base64urlencode-1.6 {ns_base64urldecode no padding} -body {
    ns_base64urldecode [ns_base64urlencode "0123"]
} -result  "0123"


test ns_base64encode-1.7 {ns_base64decode empty string} -body {
    ns_base64decode ""
} -result  ""

test ns_base64encode-1.7 {ns_base64decode space} -body {
    ns_base64decode " "
} -result  ""




test ns_base64encode-2.1 {small round trip decodes} -body {
    set result {}
    foreach l {0 1 2 3 4 5 6 7 8 9} {
        set string [string range "Lorem?ipsum" 0 $l]
        set encoded [ns_base64encode $string]
        set decoded [ns_base64decode $encoded]
        lappend result [expr {$string eq $decoded}]
    }
    set result
} -result {1 1 1 1 1 1 1 1 1 1}

test ns_base64urlencode-2.1 {small round trip decodes} -body {
    set result {}
    foreach l {0 1 2 3 4 5 6 7 8 9} {
        set string [string range "Lorem?ipsum" 0 $l]
        set encoded [ns_base64urlencode $string]
        set decoded [ns_base64urldecode $encoded]
        lappend result [expr {$string eq $decoded}]
    }
    set result
} -result {1 1 1 1 1 1 1 1 1 1}


test ns_base64encode-2.2 {binary encodings} -body {
    set result {}
    foreach string {abcd ++++ ---- //// ____} {
        set encoded [ns_base64encode $string]
        lappend result [ns_base64decode $encoded]
    }
    set result
} -result {abcd ++++ ---- //// ____}


test ns_base64urlencode-2.2 {binary encodings} -body {
    set result {}
    foreach string {abcd ++++ ---- //// ____} {
        set encoded [ns_base64urlencode $string]
        lappend result [ns_base64urldecode $encoded]
    }
    set result
} -result {abcd ++++ ---- //// ____}



test ns_base64encode-2.3 {ns_base64encode embedded nulls round-trip} -body {
    set string "a\0b"
    set encoded [ns_base64encode $string]
    set decoded [ns_base64decode $encoded]
    list [string length $string] [string equal $string $decoded] [string length $decoded]
} -result {3 1 3}

test ns_base64encode-2.3.1 {ns_base64encode embedded nulls round-trip} -body {
    set string [binary format H* 610062]
    set encoded [ns_base64encode $string]
    set decoded [ns_base64decode $encoded]
    list [string length $string] [string equal $string $decoded] [string length $decoded]
} -result {3 1 3}

test ns_base64encode-2.3.2 {ns_base64encode and decode with 2 byte UTF-8 character "ü"} -body {
    set string "ü"
    set encoded [ns_base64encode $string]
    set decoded [ns_base64decode $encoded]
    #set decoded [encoding convertfrom utf-8 $decoded]
    list [string length $string] [string equal $string $decoded] [string length $decoded] \
        $encoded $decoded
} -result {1 1 1 w7w= ü}

test ns_base64encode-2.3.3 {ns_base64encode and decode with 3 byte UTF-8 character "☀"} -body {
    set string "☀"
    set encoded [ns_base64encode $string]
    set decoded [ns_base64decode $encoded]
    #set decoded [encoding convertfrom utf-8 $decoded]
    list [string length $string] [string equal $string $decoded] [string length $decoded] \
        $encoded $decoded
} -result {1 1 1 4piA ☀}


# test tcl_base64encode-2.3.4.0 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
#     set string "☀"
#     set encoded [ns_base64encode [encoding convertto utf-8 $string]]
#     set decoded [encoding convertfrom utf-8 [ns_base64decode $encoded]]
#     list [string length $string] [string equal $string $decoded] [string length $decoded] \
#         $encoded $decoded
# } -result {1 1 1 4piA ☀}

test tcl_base64encode-2.3.4.1 {tcl base64 encode and decode with 2 byte UTF-8 character "ü"} -body {
    set string "ü"
    set encoded [ns_base64encode [encoding convertto utf-8 $string]]
    set decoded [encoding convertfrom utf-8 [ns_base64decode $encoded]]
    list [string length $string] [string equal $string $decoded] [string length $decoded] \
        $encoded $decoded
} -result {1 1 1 w7w= ü}

test tcl_base64encode-2.3.4.2 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
    set string "a"
    set encoded [ns_base64encode [encoding convertto utf-8 $string]]
    set decoded [encoding convertfrom utf-8 [ns_base64decode $encoded]]
    list [string length $string] [string equal $string $decoded] [string length $decoded] \
        $encoded $decoded
} -result {1 1 1 YQ== a}


# test ns_base64encode-2.3.5 {ns_base64encode with binary string representing 3-byte UTF-8 char} -body {
#     #
#     set string [binary format H* E29880]  ;# "☀" in UTF-8 is: 0xE2 0x98 0x80
#     set encoded [ns_base64encode $string]
#     set decoded [ns_base64decode $encoded]
#     list [string length $string] [string equal $string $decoded] [string length $decoded]
# } -result {3 1 3}


if {$tcl_version > 8.5} {
    #
    # Show equivalence of the above cases with Tcl built-in behavior in Tcl 8.6 or newer
    #
    test tcl_base64encode-2.3 {tcl base64 encode embedded nulls round-trip} -body {
        set string "a\0b"
        set encoded [binary encode base64 $string]
        set decoded [binary decode base64 $encoded]
        list [string length $string] [string equal $string $decoded] [string length $decoded]
    } -result {3 1 3}

    test tcl_base64encode-2.3.1 {tcl base64 encode embedded nulls round-trip} -body {
        set string [binary format H* 610062]
        set encoded [binary encode base64 $string]
        set decoded [binary decode base64 $encoded]
        list [string length $string] [string equal $string $decoded] [string length $decoded]
    } -result {3 1 3}

    test tcl_base64encode-2.3.2 {tcl base64 encode and decode with 2 byte UTF-8 character "ü"} -body {
        set string "ü"
        set encoded [binary encode base64 $string]
        set decoded [binary decode base64 $encoded]
        list [string length $string] [string equal $string $decoded] [string length $decoded] \
            $encoded $decoded
    } -result {1 1 1 /A== ü}

    test tcl_base64encode-2.3.3 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
        set string "☀"
        set encoded [binary encode base64 $string]
        set decoded [binary decode base64 $encoded]
        list [string length $string] [string equal $string $decoded] [string length $decoded] \
            $encoded
    } -result {1 0 1 AA==}

    test tcl_base64encode-2.3.4.0 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
        set string "☀"
        set encoded [binary encode base64 [encoding convertto utf-8 $string]]
        set decoded [encoding convertfrom utf-8 [binary decode base64 $encoded]]
        list [string length $string] [string equal $string $decoded] [string length $decoded] \
            $encoded $decoded
    } -result {1 1 1 4piA ☀}

    test tcl_base64encode-2.3.4.1 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
        set string "ü"
        set encoded [binary encode base64 [encoding convertto utf-8 $string]]
        set decoded [encoding convertfrom utf-8 [binary decode base64 $encoded]]
        list [string length $string] [string equal $string $decoded] [string length $decoded] \
            $encoded $decoded
    } -result {1 1 1 w7w= ü}

    test tcl_base64encode-2.3.4.2 {tcl base64 encode and decode with 3 byte UTF-8 character "☀"} -body {
        set string "a"
        set encoded [binary encode base64 [encoding convertto utf-8 $string]]
        set decoded [encoding convertfrom utf-8 [binary decode base64 $encoded]]
        list [string length $string] [string equal $string $decoded] [string length $decoded] \
            $encoded $decoded
    } -result {1 1 1 YQ== a}

    test tcl_base64encode-2.3.5 {tcl base64 encode with binary string representing 3-byte UTF-8} -body {
        set string [binary format H* E29880]  ;# "☀" in UTF-8 is: 0xE2 0x98 0x80
        set encoded [binary encode base64 $string]
        set decoded [binary decode base64 $encoded]
        list [string length $string] [string equal $string $decoded] [string length $decoded]
    } -result {3 1 3}
}


test ns_base64encode-2.4 {ns_base64encode embedded nulls} -body {
    ns_base64encode "test\0test\0testpass"
} -result  "dGVzdAB0ZXN0AHRlc3RwYXNz"

test ns_base64encode-2.4r {ns_base64encode embedded nulls round-trip} -body {
    set string "test\0test\0testpass"
    set encoded [ns_base64encode $string]
    set decoded [ns_base64decode $encoded]
    set result [string equal $string $decoded]
} -result  1





test ns_base64encode-2.5 {ns_base64encode embedded nulls and varying strings} -body {
    set l [list]
    for { set i -1 } { $i < 33 } { incr i +1 } {
        lappend l [ns_base64encode "$i\0$i\0"]
    }
    set l
} -result [list "LTEALTEA" "MAAwAA==" "MQAxAA==" "MgAyAA==" "MwAzAA==" "NAA0AA==" "NQA1AA==" "NgA2AA==" "NwA3AA==" "OAA4AA==" "OQA5AA==" "MTAAMTAA" "MTEAMTEA" "MTIAMTIA" "MTMAMTMA" "MTQAMTQA" "MTUAMTUA" "MTYAMTYA" "MTcAMTcA" "MTgAMTgA" "MTkAMTkA" "MjAAMjAA" "MjEAMjEA" "MjIAMjIA" "MjMAMjMA" "MjQAMjQA" "MjUAMjUA" "MjYAMjYA" "MjcAMjcA" "MjgAMjgA" "MjkAMjkA" "MzAAMzAA" "MzEAMzEA" "MzIAMzIA"]


test ns_base64encode-2.6 {ns_base64encode mass encoding} -body {
    string length [ns_base64encode [string repeat "x\0\n" 100000]]
} -result 406666

test ns_base64encode-2.6r {ns_base64encode identity mass encoding} -body {
    string length [ns_base64decode [ns_base64encode [string repeat "x\0\n" 100000]]]
} -result 300000


test ns_base64encode-3.0 {
    UTF-8 data, from string or file,
    binary or not,
    convert everything via I/O to bytearray
} -constraints {nsf} -body {
    set fn testserver/pages/utf-8-chars
    set a "äüö☀"
    set F [open $fn]; fconfigure $F -encoding binary -translation binary; set b [read $F]; close $F
    set F [open $fn]; set c [read $F]; close $F
    ns_log notice "obj(a) [nsf::__db_get_obj $a]"
    ns_log notice "obj(b) [nsf::__db_get_obj $b]"
    ns_log notice "obj(c) [nsf::__db_get_obj $c]"

    set r [list $a $b $c]
    set types [list \
                   [lindex [nsf::__db_get_obj $a] 1] \
                   [lindex [nsf::__db_get_obj $b] 1] \
                   [lindex [nsf::__db_get_obj $c] 1]]
    #ns_log notice $types
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
    #ns_log notice [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
    ns_log notice [list [ns_md string -digest sha1 $a] [ns_md string -digest sha1 $b] [ns_md string -digest sha1 $c]]
    #ns_log notice [list [ns_sha1 $a] [ns_sha1 $b] [ns_sha1 $c]]
    #ns_log notice [list [ns_md5 $a] [ns_md5 $b] [ns_md5 $c]]

    set F [::open [ns_mktemp] w]; ::fconfigure $F -translation binary
    ::puts -nonewline $F $a
    ::puts -nonewline $F $b
    ::puts -nonewline $F $c
    ::close $F

    ns_log notice "obj(a) [nsf::__db_get_obj $a]"
    ns_log notice "obj(b) [nsf::__db_get_obj $b]"
    ns_log notice "obj(c) [nsf::__db_get_obj $c]"
    #ns_logctl severity Debug on
    #set md [ns_md string -digest sha1 $a]
    #ns_log notice "====== WQ [string equal 7e32f884eaf0cbdf8c2df9e481ea9bef3ddbc4cf $md]==========================="
    set types  [list \
                   [lindex [nsf::__db_get_obj $a] 1] \
                   [lindex [nsf::__db_get_obj $b] 1] \
                   [lindex [nsf::__db_get_obj $c] 1]]
    #ns_log notice types=$types
    #lappend r [string equal $types "{} bytearray string"]

    set l [list [ns_base64encode $a] [ns_base64encode -binary $b] [ns_base64encode $c]]
    ns_log notice $l
    lappend r $l

} -cleanup {
    unset -nocomplain r fn a b c l F
} -returnCodes {error ok} -result {äüö☀ Ã¤Ã¼Ã¶â äüö☀ {w6TDvMO24piA w6TDvMO24piA w6TDvMO24piA} {w6TDvMO24piA w6TDvMO24piA w6TDvMO24piA}}


test ns_base64encode-3.1 {
    euro-sign, in unicode-notation,
    literally and
    converted to a bytearray
} -constraints {nsf} -body {
    set a "\u20ac"
    set b "€"
    set c [encoding convertto utf-8 $a]

    set r [list \
               [lindex [nsf::__db_get_obj $a] 1] \
               [lindex [nsf::__db_get_obj $b] 1] \
               [lindex [nsf::__db_get_obj $c] 1] ]
    #ns_log notice $r
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]

    #
    # expected result
    # % echo -n "€"| base64
    # 4oKs

    set F [::open [ns_mktemp] w]; ::fconfigure $F -translation binary
    ::puts -nonewline $F $a
    ::puts -nonewline $F $b
    ::puts -nonewline $F $c
    ::close $F

    lappend r [list \
                   [lindex [nsf::__db_get_obj $a] 1] \
                   [lindex [nsf::__db_get_obj $b] 1] \
                   [lindex [nsf::__db_get_obj $c] 1]]


    ns_log notice [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]

} -returnCodes {error ok} -result {{} {} bytearray {4oKs 4oKs 4oKs} {bytearray bytearray bytearray} {4oKs 4oKs 4oKs}}


test ns_base64encode-3.2 {
    mathematical symbols in UTF-8, from forums,
    literally and
    converted to a bytearray
} -constraints {nsf}  -body {
    set a "äöüʃɪbəlɛθ"
    set b [encoding convertto utf-8 $a]

    set r [list \
               [lindex [nsf::__db_get_obj $a] 1] \
               [lindex [nsf::__db_get_obj $b] 1] \
              ]
    #ns_log notice $r
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] ]

    #
    # expected result
    # % echo -n "äöüʃɪbəlɛθ"| base64
    # w6TDtsO8yoPJqmLJmWzJm864

    set F [::open [ns_mktemp] w]; ::fconfigure $F -translation binary
    ::puts -nonewline $F $a
    ::puts -nonewline $F $b
    ::close $F

    lappend r [list \
                   [lindex [nsf::__db_get_obj $a] 1] \
                   [lindex [nsf::__db_get_obj $b] 1] \
                  ]


    ns_log notice [list [ns_base64encode $a] [ns_base64encode $b] ]
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] ]

} -returnCodes {error ok} -result {{} bytearray {w6TDtsO8yoPJqmLJmWzJm864 w6TDtsO8yoPJqmLJmWzJm864} {bytearray bytearray} {w6TDtsO8yoPJqmLJmWzJm864 w6TDtsO8yoPJqmLJmWzJm864}}


test ns_base64encode-3.3 {binary data, from file or memory} -constraints {nsf} -body {
    set fn testserver/pages/binary
    set _ "\u0000\u0001\u0002\u0003☀"       ;# incorrect encoded binary string
    set a [encoding convertto utf-8 $_]     ;# correct encoded binary string
    set F [open $fn]; fconfigure $F -encoding binary -translation binary; set b [read $F]; close $F
    set F [open $fn]; set c [read $F]; close $F
    ns_log notice "obj(_) [nsf::__db_get_obj $_]"
    ns_log notice "obj(a) [nsf::__db_get_obj $a]"
    ns_log notice "obj(b) [nsf::__db_get_obj $b]"
    ns_log notice "obj(c) [nsf::__db_get_obj $c]"

    set r [list \
               [lindex [nsf::__db_get_obj $_] 1] \
               [lindex [nsf::__db_get_obj $a] 1] \
               [lindex [nsf::__db_get_obj $b] 1] \
               [lindex [nsf::__db_get_obj $c] 1]]
    #ns_log notice $r
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]

    #
    # expected result
    # % cat tests/testserver/pages/binary | base64
    # AAECA+KYgA==

    ns_log notice [list [ns_base64encode $_] [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
    #ns_log notice [list [ns_md string -digest sha1 $a] [ns_md string -digest sha1 $b] [ns_md string -digest sha1 $c]]
    #ns_log notice [list [ns_sha1 $a] [ns_sha1 $b] [ns_sha1 $c]]
    #ns_log notice [list [ns_md5 $a] [ns_md5 $b] [ns_md5 $c]]

    set F [::open [ns_mktemp] w]; ::fconfigure $F -translation binary
    ::puts -nonewline $F $_
    ::puts -nonewline $F $a
    ::puts -nonewline $F $b
    ::puts -nonewline $F $c
    ::close $F

    ns_log notice "obj(_) [nsf::__db_get_obj $_]"
    ns_log notice "obj(a) [nsf::__db_get_obj $a]"
    ns_log notice "obj(b) [nsf::__db_get_obj $b]"
    ns_log notice "obj(c) [nsf::__db_get_obj $c]"
    lappend r [list \
                   [lindex [nsf::__db_get_obj $a] 1] \
                   [lindex [nsf::__db_get_obj $b] 1] \
                   [lindex [nsf::__db_get_obj $c] 1]]

    ns_log notice [list [ns_base64encode $_] [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
    lappend r [list [ns_base64encode $a] [ns_base64encode $b] [ns_base64encode $c]]
} -cleanup {
    unset -nocomplain _ r fn a b c F
} -returnCodes {error ok} -result {{} bytearray bytearray string {AAECA+KYgA== AAECA+KYgA== AAECA+KYgA==} {bytearray bytearray bytearray} {AAECA+KYgA== AAECA+KYgA== AAECA+KYgA==}}


test ns_base64decode-4.0 {
    base64decoded from provided string + binary scan
} -constraints {nsf} -body {
    set decoded [ns_base64decode -binary {I+w+Yr+CXWGVsk2ZbqqzZlKcTuEM8TCMLOYjBv1h8xo2txA0Q5UX7v5gd5j6e8x1eIWGcfd3ORH2Vgt2HcDURw==}]
    #ns_log notice "obj(key) [nsf::__db_get_obj $decoded]"
    binary scan $decoded H* var
    list [string length $decoded] [string length $var] \
        [string equal $var 23ec3e62bf825d6195b24d996eaab366529c4ee10cf1308c2ce62306fd61f31a36b71034439517eefe607798fa7bcc7578858671f7773911f6560b761dc0d447]
} -result {64 128 1}



cleanupTests

#
# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
