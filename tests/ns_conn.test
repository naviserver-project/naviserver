# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test ns_conn-1.1 {basic syntax: plain call} -body {
     ns_conn
} -returnCodes error -result {wrong # args: should be "ns_conn option"}

test ns_conn-1.2 {basic syntax: wrong argument} -body {
     ns_conn 123
} -returnCodes error -result {bad option "123": must be acceptedcompression, auth, authpassword, authuser, channel, clientdata, close, compress, content, contentfile, contentlength, contentsentlength, copy, currentaddr, currentport, driver, encoding, fileheaders, filelength, fileoffset, files, flags, form, headerlength, headers, host, id, isconnected, keepalive, location, method, outputheaders, partialtimes, peeraddr, peerport, pool, port, protocol, query, ratelimit, request, server, sock, start, status, timeout, url, urlc, urlencoding, urlv, version, or zipaccepted}

test ns_conn-1.3.1 {pool} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn isconnected]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /1/}

test ns_conn-1.3.2 {pool} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn pool]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 //}

test ns_conn-1.3.3 {server} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn server]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /test/}

test ns_conn-1.3.4 {protocol} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn protocol]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /http/}

test ns_conn-1.3.5 {peeraddr} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn peeraddr]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result [list 200 "/[expr {[ns_info ipv6] ? {::1} : {127.0.0.1}}]/"]

test ns_conn-1.3.6 {content} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn content]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 //}



test ns_conn-2.1 {basic operation} -body {
     ns_conn close
} -returnCodes error -result {no connection}

#
# Test C-level interface of basic authentication (just parsing of the
# authorization string and decoding into user and password)
#
test ns_conn-3.1.0 {basic authentication} -setup {
    ns_register_proc GET /basic {
        set auth [ns_set array [ns_conn auth]]
        set user [ns_conn authuser]
        set pw [ns_conn authpassword]
        ns_return 200 text/plain [list $auth $user $pw]
    }
} -body {
    set authString "Basic [ns_uuencode x:y]"
    nstest::http -getbody 1 -setheaders [list authorization $authString] \
        GET /basic
} -cleanup {
    ns_unregister_op GET /basic
} -result {200 {{AuthMethod Basic Password y Username x} x y}}

test ns_conn-3.1.1 {basic authentication, different lengths} -setup {
    ns_register_proc GET /basic {
        set auth [ns_set array [ns_conn auth]]
        set user [ns_conn authuser]
        set pw [ns_conn authpassword]
        ns_return 200 text/plain [list $auth $user $pw]
    }
} -body {
    set authString "Basic [ns_uuencode user:password]"
    nstest::http -getbody 1 -setheaders [list authorization $authString] \
        GET /basic
} -cleanup {
    ns_unregister_op GET /basic
} -result {200 {{AuthMethod Basic Password password Username user} user password}}


#
# Test C-level interface of digest authentication (just parsing of the
# authorization string)
#
test ns_conn-3.2 {digest authentication} -setup {
    ns_register_proc GET /digest {
        ns_return 200 text/plain [ns_set array [ns_conn auth]]
    }
} -body {
    set authString {Digest username="Mufasa",realm="testrealm@host.com",nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
        uri="/dir/index.html",qop=auth,nc=00000001,cnonce="0a4f113b",response="6629fae49393a05397450978507c4ef1",
        opaque="5ccc069c403ebaf9f0171e9517f40e41"}
    regsub -all \n\s+ $authString "" authString
        
    nstest::http -getbody 1 -setheaders [list authorization $authString] \
        GET /digest
} -cleanup {
    ns_unregister_op GET /digest
} -result {200 {AuthMethod Digest username Mufasa realm testrealm@host.com nonce dcd98b7102dd2f0e8b11d0f600bfb0c093 uri /dir/index.html qop auth nc 00000001 cnonce 0a4f113b response 6629fae49393a05397450978507c4ef1 opaque 5ccc069c403ebaf9f0171e9517f40e41}}


test ns_conn-3.3 {bearer authentication} -setup {
    ns_register_proc GET /digest {
        ns_return 200 text/plain [ns_set array [ns_conn auth]]
    }
} -body {
    set authString {Bearer AbCdEf123456}
    nstest::http -getbody 1 -setheaders [list authorization $authString] \
        GET /digest
} -cleanup {
    ns_unregister_op GET /digest
} -result {200 {AuthMethod Bearer Token AbCdEf123456}}


test ns_conn-4.0 {behind proxy peer} -setup {
    ns_register_proc GET /foo {
        ns_return 200 text/plain <[ns_conn peeraddr -source forwarded]>
    }
} -body {
    nstest::http -getbody 1 -setheaders [list X-Forwarded-For 1.2.3.4] \
        GET /foo
} -cleanup {
    ns_unregister_op GET /foo
} -result {200 <1.2.3.4>}

test ns_conn-4.1 {behind proxy peer no ip-forwarded} -setup {
    ns_register_proc GET /foo {
        ns_return 200 text/plain <[ns_conn peeraddr -source forwarded]>
    }
} -body {
    nstest::http -getbody 1 GET /foo
} -cleanup {
    ns_unregister_op GET /foo
} -result {200 <>}

test ns_conn-4.2 {behind proxy peer} -setup {
    ns_register_proc GET /foo {
        ns_return 200 text/plain <[ns_conn peeraddr -source forwarded]>
    }
} -body {
    nstest::http -getbody 1 -setheaders [list X-Forwarded-For "1.2.3.4, 5.6.7.8"] \
        GET /foo
} -cleanup {
    ns_unregister_op GET /foo
} -result {200 <1.2.3.4>}


cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
